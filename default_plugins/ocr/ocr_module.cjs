"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __esm = (fn, res) => function __init() {
  return fn && (res = (0, fn[__getOwnPropNames(fn)[0]])(fn = 0)), res;
};
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// node_modules/@paddlejs/paddlejs-core/lib/index.js
var require_lib = __commonJS({
  "node_modules/@paddlejs/paddlejs-core/lib/index.js"(exports2, module2) {
    !function(t, e) {
      "object" == typeof exports2 && "object" == typeof module2 ? module2.exports = e() : "function" == typeof define && define.amd ? define([], e) : "object" == typeof exports2 ? exports2.paddlejs = e() : (t.paddlejs = t.paddlejs || {}, t.paddlejs.core = e());
    }(exports2, function() {
      return (() => {
        var t = { 911: (t2, e2) => {
          "use strict";
          var r2 = function() {
            if ("undefined" != typeof self) return self;
            if ("undefined" != typeof window) return window;
            if (void 0 !== r2) return r2;
            throw new Error("unable to locate global object");
          }();
          t2.exports = e2 = r2.fetch, r2.fetch && (e2.default = r2.fetch.bind(r2)), e2.Headers = r2.Headers, e2.Request = r2.Request, e2.Response = r2.Response;
        }, 994: (t2, e2, r2) => {
          "use strict";
          r2.r(e2), r2.d(e2, { PaddlejsBackend: () => yt, Runner: () => mt, Transformer: () => k, coreUtils: () => n, env: () => p, interfaces: () => i, registerBackend: () => _, registerOp: () => w });
          var n = {};
          r2.r(n), r2.d(n, { AddItemToVars: () => u, delUselessData: () => c, findVarByKey: () => o, getGlobalInterface: () => s, getOrMakeGlobalProperty: () => a, traverseVars: () => h });
          var i = {};
          function s() {
            var t3;
            if ("undefined" != typeof window) t3 = window;
            else if (void 0 !== r2.g) t3 = r2.g;
            else {
              if ("undefined" == typeof self) throw new Error("Could not find a global object");
              t3 = self;
            }
            return t3;
          }
          function a(t3, e3) {
            var r3 = s();
            return r3[t3] || (r3[t3] = e3), r3[t3];
          }
          function o(t3, e3) {
            return Array.isArray(t3) ? t3.find(function(t4) {
              return t4.name === e3;
            }) : t3[e3];
          }
          function u(t3, e3) {
            var r3 = Array.isArray(t3), n2 = Array.isArray(e3) ? e3 : [e3];
            r3 ? n2.forEach(function(e4) {
              for (var r4 = null, n3 = 0; n3 < t3.length; n3++) if (t3[n3].name === e4.name) {
                r4 = n3;
                break;
              }
              null !== r4 ? t3[r4] = e4 : t3.push(e4);
            }) : n2.forEach(function(e4) {
              t3[e4.name] = e4;
            });
          }
          function h(t3, e3) {
            Array.isArray(t3) ? t3.forEach(function(t4) {
              e3(t4);
            }) : Object.keys(t3).forEach(function(r3) {
              e3(t3[r3]);
            });
          }
          function c(t3) {
            if (t3.ops = null, t3.vars instanceof Array) for (var e3 = 0; e3 < t3.vars.length; e3++) t3.vars[e3].data && delete t3.vars[e3].data;
            else for (var r3 in t3.vars) t3.vars[r3].data && delete t3.vars[r3].data;
          }
          r2.r(i), r2.d(i, { BufferType: () => v, GraphType: () => y, UniformType: () => m, WasmMemoryType: () => g });
          const p = a("env", new (function() {
            function t3() {
              this.ENV = {};
            }
            return t3.prototype.set = function(t4, e3) {
              this.ENV[t4] = e3;
            }, t3.prototype.get = function(t4) {
              return this.ENV[t4];
            }, t3;
          }())());
          var f = function(t3, e3, r3, n2) {
            return new (r3 || (r3 = Promise))(function(i2, s2) {
              function a2(t4) {
                try {
                  u2(n2.next(t4));
                } catch (t5) {
                  s2(t5);
                }
              }
              function o2(t4) {
                try {
                  u2(n2.throw(t4));
                } catch (t5) {
                  s2(t5);
                }
              }
              function u2(t4) {
                var e4;
                t4.done ? i2(t4.value) : (e4 = t4.value, e4 instanceof r3 ? e4 : new r3(function(t5) {
                  t5(e4);
                })).then(a2, o2);
              }
              u2((n2 = n2.apply(t3, e3 || [])).next());
            });
          }, l = function(t3, e3) {
            var r3, n2, i2, s2, a2 = { label: 0, sent: function() {
              if (1 & i2[0]) throw i2[1];
              return i2[1];
            }, trys: [], ops: [] };
            return s2 = { next: o2(0), throw: o2(1), return: o2(2) }, "function" == typeof Symbol && (s2[Symbol.iterator] = function() {
              return this;
            }), s2;
            function o2(s3) {
              return function(o3) {
                return function(s4) {
                  if (r3) throw new TypeError("Generator is already executing.");
                  for (; a2; ) try {
                    if (r3 = 1, n2 && (i2 = 2 & s4[0] ? n2.return : s4[0] ? n2.throw || ((i2 = n2.return) && i2.call(n2), 0) : n2.next) && !(i2 = i2.call(n2, s4[1])).done) return i2;
                    switch (n2 = 0, i2 && (s4 = [2 & s4[0], i2.value]), s4[0]) {
                      case 0:
                      case 1:
                        i2 = s4;
                        break;
                      case 4:
                        return a2.label++, { value: s4[1], done: false };
                      case 5:
                        a2.label++, n2 = s4[1], s4 = [0];
                        continue;
                      case 7:
                        s4 = a2.ops.pop(), a2.trys.pop();
                        continue;
                      default:
                        if (!((i2 = (i2 = a2.trys).length > 0 && i2[i2.length - 1]) || 6 !== s4[0] && 2 !== s4[0])) {
                          a2 = 0;
                          continue;
                        }
                        if (3 === s4[0] && (!i2 || s4[1] > i2[0] && s4[1] < i2[3])) {
                          a2.label = s4[1];
                          break;
                        }
                        if (6 === s4[0] && a2.label < i2[1]) {
                          a2.label = i2[1], i2 = s4;
                          break;
                        }
                        if (i2 && a2.label < i2[2]) {
                          a2.label = i2[2], a2.ops.push(s4);
                          break;
                        }
                        i2[2] && a2.ops.pop(), a2.trys.pop();
                        continue;
                    }
                    s4 = e3.call(t3, a2);
                  } catch (t4) {
                    s4 = [6, t4], n2 = 0;
                  } finally {
                    r3 = i2 = 0;
                  }
                  if (5 & s4[0]) throw s4[1];
                  return { value: s4[0] ? s4[1] : void 0, done: true };
                }([s3, o3]);
              };
            }
          };
          const d = function() {
            function t3(t4) {
              this.urlConf = { dir: "", main: "" }, this.separateChunk = true, this.chunkNum = 1, this.dataType = "binary", this.params = { type: "fetch" }, this.inNode = false, this.isLocalFile = false, this.realFetch = function() {
                throw new Error("ERROR: empty fetch funciton");
              };
              var e3 = t4, r3 = "model.json";
              if (t4.endsWith(".json")) {
                var n2 = t4.lastIndexOf("/") + 1;
                e3 = t4.substr(0, n2), r3 = t4.substr(n2);
              } else "/" !== t4.charAt(t4.length - 1) && (e3 = t4 + "/");
              this.isLocalFile = 0 !== e3.indexOf("http"), this.urlConf = { dir: this.isLocalFile ? "/" === e3.charAt(0) ? "" + e3 : "/" + e3 : e3, main: r3 }, this.inNode = "node" === p.get("platform");
            }
            return t3.prototype.load = function() {
              return f(this, void 0, void 0, function() {
                var e3;
                return l(this, function(r3) {
                  switch (r3.label) {
                    case 0:
                      return [4, this.fetchModel()];
                    case 1:
                      return e3 = r3.sent(), this.separateChunk = !!e3.chunkNum && e3.chunkNum > 0, this.chunkNum = this.separateChunk ? e3.chunkNum : 0, this.separateChunk ? "binary" !== this.dataType ? [3, 3] : [4, this.fetchChunks().then(function(r4) {
                        return t3.allocateParamsVar(e3.vars, r4);
                      })] : [3, 3];
                    case 2:
                      r3.sent(), r3.label = 3;
                    case 3:
                      return [2, e3];
                  }
                });
              });
            }, t3.prototype.fetchOneChunk = function(t4) {
              return f(this, void 0, void 0, function() {
                return l(this, function(e3) {
                  switch (e3.label) {
                    case 0:
                      return p.get("fetch") ? [4, p.get("fetch")(t4, { type: "arrayBuffer" })] : [3, 2];
                    case 1:
                      return [2, e3.sent()];
                    case 2:
                      return [2, this.fetch(t4).then(function(t5) {
                        return t5.arrayBuffer();
                      })];
                  }
                });
              });
            }, t3.prototype.fetchJson = function(t4) {
              return this.fetch(t4).then(function(t5) {
                return t5.json();
              });
            }, t3.prototype.getFileName = function(t4) {
              return "chunk_" + t4 + ".dat";
            }, t3.prototype.fetchChunks = function() {
              return f(this, void 0, void 0, function() {
                var t4, e3, r3;
                return l(this, function(n2) {
                  for (t4 = this.chunkNum, e3 = [], r3 = 1; r3 <= t4; r3++) e3.push(this.fetchOneChunk(this.urlConf.dir + this.getFileName(r3)));
                  return [2, Promise.all(e3).then(function(t5) {
                    var e4, r4 = 0, n3 = [];
                    t5.forEach(function(t6) {
                      e4 = new Float32Array(t6), n3.push(e4), r4 += e4.length;
                    });
                    var i2 = new Float32Array(r4), s2 = 0;
                    return n3.forEach(function(t6) {
                      t6.forEach(function(t7) {
                        i2[s2] = t7, s2 += 1;
                      });
                    }), i2;
                  })];
                });
              });
            }, t3.allocateParamsVar = function(t4, e3) {
              var r3, n2 = 0, i2 = Array.isArray(e3) ? e3 : Object.values(e3);
              h(t4, function(t5) {
                r3 = t5.shape.reduce(function(t6, e4) {
                  return t6 * e4;
                }), t5.persistable && (t5.data = i2.slice(n2, n2 + r3), n2 += r3);
              });
            }, t3.prototype.fetch = function(t4, e3) {
              if (p.get("fetch")) return p.get("fetch")(t4, e3 || {});
              var n2 = (e3 || this.params).method || "get", i2 = new (this.inNode ? r2(911).Headers : Headers)();
              return this.realFetch = this.inNode ? this.isLocalFile ? this.fetchLocalFile : r2(911) : window.fetch.bind(window), this.realFetch(t4, { method: n2, headers: i2 });
            }, t3.prototype.fetchLocalFile = function(t4) {
              var e3 = r2(993);
              return new Promise(function(r3, n2) {
                try {
                  r3(e3.readFileSync(t4, "utf8"));
                } catch (t5) {
                  n2(t5);
                }
              });
            }, t3.prototype.fetchModel = function() {
              var t4 = this, e3 = this.params, r3 = this.urlConf.dir + this.urlConf.main, n2 = null;
              return "fetch" === e3.type && (n2 = new Promise(function(n3, i2) {
                t4.fetch(r3, e3).then(function(e4) {
                  return p.get("fetch") ? e4 : t4.isLocalFile && t4.inNode ? JSON.parse(e4) : e4.json();
                }).then(function(t5) {
                  return n3(t5);
                }).then(function(t5) {
                  return i2(t5);
                });
              })), n2;
            }, t3;
          }();
          var v, g, m, y;
          !function(t3) {
            t3.FrameBuffer = "frameBuffer", t3.ColorBuffer = "colorBuffer";
          }(v || (v = {})), function(t3) {
            t3.memory100 = "100", t3.memory200 = "200", t3.memory300 = "300", t3.memory400 = "400", t3.memory500 = "500", t3.memory600 = "600", t3.memory700 = "700", t3.memory800 = "800", t3.memory900 = "900";
          }(g || (g = {})), function(t3) {
            t3.uniform1f = "1f", t3.uniform1fv = "1fv", t3.uniform1i = "1i", t3.uniform1iv = "1iv", t3.uniform2f = "2f", t3.uniform2fv = "2fv", t3.uniform2i = "2i", t3.uniform2iv = "2iv", t3.uniform3f = "3f", t3.uniform3fv = "3fv", t3.uniform3i = "3i", t3.uniform3iv = "3iv", t3.uniform4f = "4f", t3.uniform4fv = "4fv", t3.uniform4i = "4i", t3.uniform4iv = "4iv";
          }(m || (m = {})), function(t3) {
            t3.SingleOutput = "single", t3.MultipleOutput = "multiple", t3.MultipleInput = "multipleInput";
          }(y || (y = {}));
          var b = { opRegistry: { ops: {} }, backend: "", backendInstance: null };
          function w(t3, e3) {
            var r3 = t3.conf, n2 = t3.params, i2 = t3.main, s2 = t3.mainFunc, a2 = t3.textureFuncConf, o2 = t3.commonFuncConf, u2 = t3.behaviors, h2 = void 0 === u2 ? [] : u2, c2 = b.backend + "_" + e3;
            b.opRegistry.ops[c2] || (b.opRegistry.ops[c2] = { name: e3, conf: r3, params: n2, main: i2, mainFunc: s2, textureFuncConf: a2, commonFuncConf: o2, behaviors: h2 });
          }
          function _(t3, e3, r3) {
            t3 && (b.backend = t3), e3 && (b.backendInstance = e3), r3 && Object.keys(r3).forEach(function(t4) {
              w(r3[t4], t4);
            });
          }
          b = a("GLOBALS", b);
          var A = s();
          A.ImageBitmap || (A.ImageBitmap = function() {
          });
          const x = function() {
            function t3(t4, e3) {
              this.id = "", this.type = "", this.inputs = {}, this.outputs = {}, this.attrs = {}, this.subAttrs = [], this.next = "", this.opData = null, this.isPacked = false, this.bufferType = v.FrameBuffer, this.uniform = null;
              var r3 = t4.inputs, n2 = t4.outputs, i2 = t4.attrs, s2 = void 0 === i2 ? {} : i2, a2 = t4.type, o2 = t4.isPacked, u2 = void 0 !== o2 && o2, h2 = t4.bufferType, c2 = void 0 === h2 ? v.FrameBuffer : h2, p2 = t4.uniform, f2 = void 0 === p2 ? null : p2;
              this.id = a2 + "_" + +/* @__PURE__ */ new Date() + "_" + e3, this.inputs = r3, this.outputs = n2, this.attrs = s2, this.subAttrs = t4["sub-attrs"] || [], this.uniform = f2, this.type = a2, this.isPacked = u2, this.bufferType = c2, this.next = "", this.opData = null;
            }
            return Object.defineProperty(t3.prototype, "inputsName", { get: function() {
              var t4 = this, e3 = [];
              return Object.keys(this.inputs).forEach(function(r3) {
                e3.push(t4.inputs[r3][0]);
              }), e3;
            }, enumerable: false, configurable: true }), Object.defineProperty(t3.prototype, "outputsName", { get: function() {
              return this.outputs.Output || this.outputs.Out || this.outputs.Y;
            }, enumerable: false, configurable: true }), t3.prototype.execute = function(t4) {
              b.backendInstance.runProgram(this.opData, t4);
            }, t3;
          }(), k = function(t3) {
            this.name = t3;
          };
          var O, P = (O = function(t3, e3) {
            return (O = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(t4, e4) {
              t4.__proto__ = e4;
            } || function(t4, e4) {
              for (var r3 in e4) Object.prototype.hasOwnProperty.call(e4, r3) && (t4[r3] = e4[r3]);
            })(t3, e3);
          }, function(t3, e3) {
            function r3() {
              this.constructor = t3;
            }
            O(t3, e3), t3.prototype = null === e3 ? Object.create(e3) : (r3.prototype = e3.prototype, new r3());
          }), T = { conv2d: function(t3, e3) {
            var r3 = t3.attrs.strides, n2 = t3.inputs.Input[0], i2 = t3.inputs.Filter[0];
            if ("image" === n2) return false;
            var s2 = o(e3, n2).shape, a2 = o(e3, i2).shape;
            return !r3.find(function(t4) {
              return t4 > 1;
            }) && s2[s2.length - 1 - 2] % 4 == 0 && 4 === a2.length && a2[0] % 4 == 0 && a2[1] % 4 == 0;
          } };
          function j(t3) {
            return { type: "packed_2_unpacked", attrs: {}, inputs: { Input: [t3.inputName] }, outputs: { Output: [t3.outputName] } };
          }
          function M(t3) {
            return { type: "unpacked_2_packed", attrs: {}, inputs: { Input: [t3.inputName] }, outputs: { Output: [t3.outputName] } };
          }
          function E(t3, e3) {
            Object.keys(t3.inputs).forEach(function(e4) {
              t3.inputs[e4] = [t3.inputs[e4] + "_packed"];
            }), Object.keys(t3.outputs).forEach(function(e4) {
              t3.outputs[e4] = [t3.outputs[e4] + "_packed"];
            }), t3.type = t3.type + "_packing", t3.id = t3.type + "_" + +/* @__PURE__ */ new Date() + "_" + e3.length, t3.isPacked = true;
          }
          const F = function(t3) {
            function e3() {
              return t3.call(this, "TexturePacking") || this;
            }
            return P(e3, t3), e3.prototype.transform = function() {
              for (var t4 = [], e4 = 0; e4 < arguments.length; e4++) t4[e4] = arguments[e4];
              if ("webgl" === b.backend && p.get("webgl_pack_channel")) {
                var r3 = t4[0], n2 = t4[1], i2 = t4[2], s2 = "depthwise_conv2d" === r3.type ? "conv2d" : r3.type, a2 = T[s2];
                if (a2 && a2(r3, n2)) {
                  var o2 = r3.inputs, u2 = r3.outputs, h2 = o2.Input[0], c2 = u2.Output ? u2.Output[0] : u2.Out[0], f2 = M({ inputName: h2, outputName: h2 + "_packed" }), l2 = i2.length;
                  i2.push(new x(f2, l2)), E(r3, i2);
                  var d2 = j({ inputName: c2 + "_packed", outputName: c2 }), v2 = i2.length + 1;
                  i2.push(new x(d2, v2));
                }
              }
            }, e3;
          }(k);
          var D = /* @__PURE__ */ function() {
            var t3 = function(e3, r3) {
              return (t3 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(t4, e4) {
                t4.__proto__ = e4;
              } || function(t4, e4) {
                for (var r4 in e4) Object.prototype.hasOwnProperty.call(e4, r4) && (t4[r4] = e4[r4]);
              })(e3, r3);
            };
            return function(e3, r3) {
              function n2() {
                this.constructor = e3;
              }
              t3(e3, r3), e3.prototype = null === r3 ? Object.create(r3) : (n2.prototype = r3.prototype, new n2());
            };
          }();
          const N = function(t3) {
            function e3() {
              return t3.call(this, "FormatInputsX") || this;
            }
            return D(e3, t3), e3.prototype.transform = function() {
              for (var t4 = [], e4 = 0; e4 < arguments.length; e4++) t4[e4] = arguments[e4];
              var r3 = t4[0], n2 = ["concat", "connect", "fc", "rnn_origin", "rnn_matmul", "stack"];
              if (n2.includes(r3.type)) {
                var i2 = r3.inputs;
                if (("rnn_origin" === r3.type || "rnn_matmul" === r3.type) && i2.WeightList.length > 0) i2.WeightList.forEach(function(t5, e5) {
                  i2["weightlist_" + e5] = [t5];
                });
                else {
                  var s2 = i2.X || i2.Input;
                  if ("wasm" !== p.get("backend")) s2.length > 1 && (s2.forEach(function(t5, e5) {
                    i2["origin" + (e5 > 0 ? "_" + e5 : "")] = [t5];
                  }), delete i2.X, delete i2.Input);
                  else {
                    if (s2.length > 4) throw Error("Not yet supporting concat input tensors more than 4.");
                    if (s2.length > 1) {
                      var a2 = s2[0], o2 = s2[1], u2 = s2[2], h2 = s2[3];
                      i2.X = [a2], o2 && (i2.Y = [o2]), u2 && (i2.Z = [u2], r3.type += "_mul"), h2 && (i2.M = [h2]);
                    }
                  }
                }
              }
            }, e3;
          }(k);
          var S = /* @__PURE__ */ function() {
            var t3 = function(e3, r3) {
              return (t3 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(t4, e4) {
                t4.__proto__ = e4;
              } || function(t4, e4) {
                for (var r4 in e4) Object.prototype.hasOwnProperty.call(e4, r4) && (t4[r4] = e4[r4]);
              })(e3, r3);
            };
            return function(e3, r3) {
              function n2() {
                this.constructor = e3;
              }
              t3(e3, r3), e3.prototype = null === r3 ? Object.create(r3) : (n2.prototype = r3.prototype, new n2());
            };
          }(), C = function() {
            for (var t3 = 0, e3 = 0, r3 = arguments.length; e3 < r3; e3++) t3 += arguments[e3].length;
            var n2 = Array(t3), i2 = 0;
            for (e3 = 0; e3 < r3; e3++) for (var s2 = arguments[e3], a2 = 0, o2 = s2.length; a2 < o2; a2++, i2++) n2[i2] = s2[a2];
            return n2;
          };
          function I(t3, e3) {
            var r3 = o(e3, t3);
            return r3 ? r3.shape : [];
          }
          function L(t3, e3, r3, n2) {
            for (var i2 = C(e3), s2 = 0, a2 = 0, o2 = t3; a2 < o2.length; a2++) s2 += I(o2[a2], n2)[r3];
            return i2[r3] = s2, { name: t3[t3.length - 1] + "_out", shape: i2 };
          }
          const R = function(t3) {
            function e3() {
              return t3.call(this, "splitOp") || this;
            }
            return S(e3, t3), e3.prototype.transform = function() {
              for (var t4, e4 = [], r3 = 0; r3 < arguments.length; r3++) e4[r3] = arguments[r3];
              for (var n2 = e4[0], i2 = e4[1], s2 = 0, a2 = n2.length; s2 < a2; s2++) {
                var o2 = n2[s2];
                if ("concat" === o2.type && (null === (t4 = o2.inputs) || void 0 === t4 ? void 0 : t4.X) && !(o2.inputs.X.length <= 4)) {
                  var h2 = o2.attrs, c2 = o2.inputs, p2 = o2.outputs, f2 = c2.X, l2 = f2.length, d2 = Math.ceil((l2 - 4) / 3) + 1, v2 = p2.Out[0], g2 = I(v2, i2), m2 = h2.axis || 0;
                  m2 = m2 > -1 ? m2 : g2.length + m2;
                  for (var y2 = [], b2 = [], w2 = f2.slice(0, 4), _2 = void 0, A2 = 0; A2 < d2; A2++) {
                    var x2 = 0 === A2 ? w2 : f2.slice(3 * A2 + 1, 3 * (A2 + 1) + 1), k2 = L(x2, g2, m2, i2);
                    0 !== A2 && x2.splice(0, 0, _2.name), k2.shape[m2] += _2 ? _2.shape[m2] : 0;
                    var O2 = { Out: [k2.name] };
                    b2.push({ attrs: h2, inputs: { X: x2 }, outputs: O2, type: "concat" }), y2.push(k2), _2 = k2;
                  }
                  b2[d2 - 1].outputs.Out = [v2], n2.splice.apply(n2, C([s2, 1], b2)), u(i2, y2);
                }
              }
            }, e3;
          }(k);
          var W = function() {
            for (var t3 = 0, e3 = 0, r3 = arguments.length; e3 < r3; e3++) t3 += arguments[e3].length;
            var n2 = Array(t3), i2 = 0;
            for (e3 = 0; e3 < r3; e3++) for (var s2 = arguments[e3], a2 = 0, o2 = s2.length; a2 < o2; a2++, i2++) n2[i2] = s2[a2];
            return n2;
          };
          function H(t3) {
            if (t3.length < 4) {
              for (var e3 = [], r3 = 0; r3 < 4 - t3.length; r3++) e3.push(1);
              return e3.concat(t3);
            }
            return W(t3);
          }
          function B(t3) {
            return t3.reduce(function(t4, e3) {
              return t4 + e3;
            });
          }
          function G(t3, e3) {
            var r3 = t3.length;
            return 4 - r3 + (e3 > -1 ? e3 : r3 + e3);
          }
          function z(t3, e3) {
            for (var r3 = e3[0], n2 = e3[1], i2 = e3[2], s2 = e3[3], a2 = i2 * s2, o2 = n2 * i2 * s2, u2 = [], h2 = 0; h2 < r3; h2++) for (var c2 = 0; c2 < s2; c2++) for (var p2 = 0; p2 < n2; p2++) for (var f2 = 0; f2 < i2; f2++) u2.push(t3[h2 * o2 + p2 * a2 + f2 * s2 + c2]);
            return new Float32Array(u2);
          }
          function X(t3) {
            for (var e3, r3 = t3.data, n2 = t3.shape, i2 = W(n2).reverse(), s2 = 0, a2 = i2.length - 1; s2 < a2; s2++) e3 = V(e3 || r3, i2[s2]);
            return e3;
          }
          function V(t3, e3) {
            for (var r3 = [], n2 = 0, i2 = t3.length; n2 < i2; n2 += e3) r3.push(t3.slice(n2, n2 + e3));
            return r3;
          }
          var U = /* @__PURE__ */ function() {
            var t3 = function(e3, r3) {
              return (t3 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(t4, e4) {
                t4.__proto__ = e4;
              } || function(t4, e4) {
                for (var r4 in e4) Object.prototype.hasOwnProperty.call(e4, r4) && (t4[r4] = e4[r4]);
              })(e3, r3);
            };
            return function(e3, r3) {
              function n2() {
                this.constructor = e3;
              }
              t3(e3, r3), e3.prototype = null === r3 ? Object.create(r3) : (n2.prototype = r3.prototype, new n2());
            };
          }(), Y = "fetch_pack";
          const q = function(t3) {
            function e3() {
              return t3.call(this, "PackOut") || this;
            }
            return U(e3, t3), e3.prototype.transform = function() {
              for (var t4 = [], e4 = 0; e4 < arguments.length; e4++) t4[e4] = arguments[e4];
              if (p.get("webgl_pack_output") && 1 !== p.get("webglVersion")) {
                var r3 = t4[0], n2 = t4[1], i2 = r3.find(function(t5) {
                  return "fetch" === t5.type;
                }), s2 = i2.inputs.X[0], a2 = o(n2, s2), h2 = H(a2.shape), c2 = h2[0], f2 = h2[1], l2 = h2[2], d2 = h2[3], v2 = { attrs: {}, inputs: { X: [s2] }, outputs: { Y: [Y] }, type: "pack_out" }, g2 = f2 * d2, m2 = Math.ceil(c2 * l2 / 4), y2 = { name: Y, shape: [1, 1, m2, g2], persistable: false };
                i2.inputs.X = [Y], i2.attrs.origin_shape = [c2, f2, l2, d2], r3.push(v2), u(n2, [y2]);
              }
            }, e3;
          }(k);
          var J = /* @__PURE__ */ function() {
            var t3 = function(e3, r3) {
              return (t3 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(t4, e4) {
                t4.__proto__ = e4;
              } || function(t4, e4) {
                for (var r4 in e4) Object.prototype.hasOwnProperty.call(e4, r4) && (t4[r4] = e4[r4]);
              })(e3, r3);
            };
            return function(e3, r3) {
              function n2() {
                this.constructor = e3;
              }
              t3(e3, r3), e3.prototype = null === r3 ? Object.create(r3) : (n2.prototype = r3.prototype, new n2());
            };
          }(), K = "img_pre_processed", Z = "img_origin";
          const $ = function(t3) {
            function e3() {
              return t3.call(this, "FeedProcess") || this;
            }
            return J(e3, t3), e3.prototype.transform = function() {
              for (var t4 = [], e4 = 0; e4 < arguments.length; e4++) t4[e4] = arguments[e4];
              var r3 = t4[0], n2 = t4[1], i2 = t4[2];
              if (i2.webglFeedProcess || p.get("webgl_gpu_pipeline")) {
                var s2 = i2.mean, a2 = void 0 === s2 ? [0, 0, 0] : s2, h2 = i2.std, c2 = void 0 === h2 ? [1, 1, 1] : h2, f2 = i2.scale, l2 = void 0 === f2 ? [1, 1] : f2, d2 = i2.pos, v2 = void 0 === d2 ? [0, 0] : d2, g2 = i2.feedShape, y2 = o(n2, "image"), b2 = y2.shape, w2 = b2[2], _2 = b2[3];
                y2.shape = [1, 1, w2, _2];
                var A2 = Object.assign({}, y2);
                A2.name = K, A2.shape = [1, 3, g2.fh, g2.fw], A2.persistable = false, delete A2.data;
                var x2 = Object.assign({}, y2);
                x2.name = Z, x2.shape = [1, 1, g2.fh, g2.fw], x2.persistable = false, delete x2.data, u(n2, [x2, A2]);
                var k2 = r3.find(function(t5) {
                  var e5 = t5.inputs;
                  return Object.keys(e5).find(function(t6) {
                    return "image" === e5[t6][0];
                  });
                }), O2 = k2.inputs;
                Object.keys(O2).forEach(function(t5) {
                  "image" === O2[t5][0] && (O2[t5][0] = K);
                });
                var P2 = { attrs: { mean: a2, std: c2 }, inputs: { X: [Z] }, outputs: { Y: [K] }, type: "feedPost" }, T2 = { attrs: { mean: a2, std: c2, scale: l2, pos: v2 }, inputs: { X: ["image"] }, outputs: { Y: [Z] }, type: "imgFeed", uniform: { u_scale: { type: m.uniform2fv, value: [1, 1] }, u_pos: { type: m.uniform2fv, value: [0, 0] }, u_keep_ratio: { type: m.uniform1i, value: 1 } }, isPacked: true };
                r3.splice(1, 0, P2), r3.splice(1, 0, T2);
              }
            }, e3;
          }(k), Q = { preTransforms: [new R(), new q(), new $()], transforms: [new N(), new F()], postTransforms: [] };
          var tt, et = function() {
            for (var t3 = 0, e3 = 0, r3 = arguments.length; e3 < r3; e3++) t3 += arguments[e3].length;
            var n2 = Array(t3), i2 = 0;
            for (e3 = 0; e3 < r3; e3++) for (var s2 = arguments[e3], a2 = 0, o2 = s2.length; a2 < o2; a2++, i2++) n2[i2] = s2[a2];
            return n2;
          };
          function rt(t3, e3) {
            return t3 && t3[e3] || [];
          }
          !function(t3) {
            t3.PreTransforms = "preTransforms", t3.Transforms = "transforms", t3.PostTransforms = "postTransforms";
          }(tt || (tt = {}));
          const nt = function() {
            function t3(t4, e3) {
              this.weightMap = [], this.ops = [], this.vars = [], this.config = {}, this.type = y.SingleOutput, this.plugins = null, this.ops = t4.ops, this.vars = t4.vars, this.type = e3.type || this.type, this.plugins = e3.plugins, this.config = e3, t4.feedShape && (this.config.feedShape = t4.feedShape);
            }
            return t3.prototype.createGraph = function() {
              return this.preTransforms(), this.createOpsMap(), this.arrangeMap(), this.postTransforms(), this.weightMap;
            }, t3.prototype.preTransforms = function() {
              var t4 = this;
              et(Q.preTransforms, rt(this.plugins, tt.PreTransforms)).forEach(function(e3) {
                e3.transform(t4.ops, t4.vars, t4.config);
              });
            }, t3.prototype.transforms = function(t4, e3) {
              var r3 = this;
              et(Q.transforms, rt(this.plugins, tt.Transforms)).forEach(function(n2) {
                n2.transform(t4, r3.vars, e3);
              });
            }, t3.prototype.postTransforms = function() {
              var t4 = this;
              et(Q.postTransforms, rt(this.plugins, tt.PostTransforms)).forEach(function(e3) {
                e3.transform(t4.weightMap, t4.vars, t4.type);
              });
            }, t3.prototype.createOpsMap = function() {
              for (var t4 = [], e3 = 0; e3 < this.ops.length; e3++) {
                var r3 = t4.length, n2 = this.ops[e3], i2 = new x(n2, r3);
                this.transforms(i2, t4), t4.push(i2);
              }
              this.weightMap = t4;
            }, t3.prototype.arrangeMap = function() {
              for (var t4 = {}, e3 = [], r3 = {}, n2 = function(n3) {
                for (var s3 = i2.weightMap[n3], a2 = 0; a2 < s3.outputsName.length; a2++) {
                  var o2 = s3.outputsName[a2];
                  t4[o2] = true;
                }
                e3[n3] = 0, r3[s3.id] = n3, s3.inputsName.length > 1 ? s3.inputsName.forEach(function(r4) {
                  true === t4[r4] && e3[n3]++;
                }) : e3[n3] = s3.inputsName.length;
              }, i2 = this, s2 = 0; s2 < this.weightMap.length; s2++) n2(s2);
              this.topoSort(this.weightMap, e3, r3);
            }, t3.prototype.topoSort = function(t4, e3, r3) {
              var n2 = [];
              n2.push(t4[0]);
              for (var i2 = t4.slice(0), s2 = null, a2 = t4[0]; n2.length > 0; ) {
                null != s2 && (t4[r3[s2.id]].next = a2.id), s2 = a2, a2 = n2.pop() || {};
                for (var o2 = 0; o2 < a2.outputsName.length; o2++) for (var u2 = 0; u2 < i2.length; u2++) for (var h2 = 0; h2 < i2[u2].inputsName.length; h2++) if (i2[u2].inputsName[h2] === a2.outputsName[o2] && (e3[r3[i2[u2].id]]--, 0 === e3[r3[i2[u2].id]])) {
                  n2.push(t4[r3[i2[u2].id]]), i2.splice(u2, 1), u2--;
                  break;
                }
              }
            }, t3.prototype.getFeedExecutor = function() {
              return this.weightMap.find(function(t4) {
                return "feed" === t4.type;
              });
            }, t3.prototype.getFetchExecutor = function() {
              return this.weightMap.find(function(t4) {
                return "fetch" === t4.type;
              });
            }, t3.prototype.getExecutorById = function(t4) {
              return this.weightMap.find(function(e3) {
                return e3.id === t4;
              });
            }, t3;
          }(), it = function() {
            function t3(t4) {
              this.opts = {}, this.isPacked = false, this.name = "", this.tensorId = "", this.total = 1, this.shape = [], this.unformattedShapeLength = 0, this.shape_texture = [], this.exceedMax = false, this.data = null, this.persistable = false, this.interpType = "NEAREST", this.dataLayout = "", this.runtime = 0, this.binding = 0;
              var e3 = t4.isPacked, r3 = void 0 !== e3 && e3, n2 = t4.name, i2 = t4.runtime, s2 = void 0 === i2 ? 0 : i2, a2 = t4.persistable, o2 = void 0 !== a2 && a2, u2 = t4.type, h2 = t4.dataLayout, c2 = t4.interpType, p2 = void 0 === c2 ? "NEAREST" : c2, f2 = t4.shape, l2 = t4.data, d2 = t4.binding, v2 = void 0 === d2 ? 0 : d2;
              this.opts = t4, this.isPacked = r3, this.name = n2, this.runtime = s2, this.binding = v2, this.persistable = o2, this.interpType = p2, this.tensorId = u2, this.dataLayout = h2, this.unformattedShapeLength = f2.length, this.shape = H(f2), this.total = this.shape.reduce(function(t5, e4) {
                return t5 * e4;
              }), t4.noLayout || l2 && l2.length && (this.data = function(t5, e4, r4, n3) {
                if ("nhwc" === e4) {
                  var i3 = r4[0], s3 = r4[1], a3 = z(t5, [i3, r4[2], r4[3], s3 * (n3 ? 4 : 1)]);
                  return new Float32Array(a3);
                }
                return new Float32Array(t5);
              }(l2, this.dataLayout, this.shape, this.isPacked), t4.data = null);
            }
            return Object.defineProperty(t3.prototype, "width_texture", { get: function() {
              var t4 = this.shape_texture.length;
              return this.shape_texture[t4 - 1] || 1;
            }, enumerable: false, configurable: true }), Object.defineProperty(t3.prototype, "height_texture", { get: function() {
              var t4 = this.shape_texture.length;
              return this.shape_texture[t4 - 2] || 1;
            }, enumerable: false, configurable: true }), Object.defineProperty(t3.prototype, "width_shape", { get: function() {
              var t4 = this.shape.length;
              return this.shape[t4 - 1];
            }, enumerable: false, configurable: true }), Object.defineProperty(t3.prototype, "height_shape", { get: function() {
              var t4 = this.shape.length;
              return this.shape[t4 - 2];
            }, enumerable: false, configurable: true }), Object.defineProperty(t3.prototype, "channel", { get: function() {
              var t4 = this.shape.length;
              return this.shape[t4 - 3];
            }, enumerable: false, configurable: true }), Object.defineProperty(t3.prototype, "length_shape", { get: function() {
              return this.shape.length || 0;
            }, enumerable: false, configurable: true }), Object.defineProperty(t3.prototype, "length_unformatted_shape", { get: function() {
              return this.unformattedShapeLength || 0;
            }, enumerable: false, configurable: true }), Object.defineProperty(t3.prototype, "total_shape", { get: function() {
              return this.total;
            }, enumerable: false, configurable: true }), Object.defineProperty(t3.prototype, "numbers_shape", { get: function() {
              for (var t4 = [], e3 = this.shape.length, r3 = 0; r3 < e3 - 1; r3++) {
                var n2 = this.shape.slice(r3 + 1).reduce(function(t5, e4) {
                  return t5 * e4;
                });
                t4.push(n2);
              }
              return t4.push(1), t4;
            }, enumerable: false, configurable: true }), t3;
          }(), st = { adaptPaddings: function() {
            for (var t3 in this.processedAttrs) if (Object.prototype.hasOwnProperty.call(this.processedAttrs, t3) && "paddings" === t3) {
              var e3 = this.processedAttrs[t3], r3 = e3[0], n2 = e3[1];
              return void (0 === r3 && 1 === n2 && (this.processedAttrs[t3][1] = 0));
            }
          }, setAdaptive: function() {
            this.processedAttrs.adaptive && 2 === this.processedAttrs.ksize.length && 1 === this.processedAttrs.ksize[0] && 1 === this.processedAttrs.ksize[1] && (this.processedAttrs.adaptive = false, this.processedAttrs.global_pooling = true);
          }, isGlobalPooling: function() {
            var t3, e3 = this.tensorDataMap.origin, r3 = (null === (t3 = null == e3 ? void 0 : e3.shape) || void 0 === t3 ? void 0 : t3.length) || 0;
            r3 > 2 && this.processedAttrs.global_pooling && (this.processedAttrs.ksize = [e3.shape[r3 - 2], e3.shape[r3 - 1]]);
          }, setPacked: function() {
            var t3 = this.processedAttrs.ispacked;
            this.tensorDataMap.origin && t3 && this.name.indexOf("pool") > -1 && (this.name += "_winograd");
          }, mergeAttrs: function() {
            this.processedAttrs = this.subAttrs.reduce(function(t3, e3) {
              return Object.assign(t3, e3);
            }, {});
          }, isApplySeparableConv: function() {
            if (!this.isPackedOp) {
              var t3 = this.processedAttrs.groups, e3 = this.tensorDataMap.filter;
              if ("depthwise_conv2d" === this.name && (this.name = "conv2d"), e3) {
                var r3 = e3.shape, n2 = r3[0], i2 = r3[1];
                n2 === t3 && 1 === i2 && (this.name += "_depthwise");
              }
            }
          }, batchComputeConv2d: function() {
            var t3 = this.tensorDataMap.filter.shape[1];
            this.processedAttrs.filter_nearest_vec4 = 4 * Math.floor(t3 / 4), this.processedAttrs.filter_remainder_vec4 = t3 % 4;
          }, processBias: function() {
            var t3 = this.tensorDataMap.bias;
            if (t3 && this.isPackedOp) {
              t3.packed = true;
              var e3 = t3.shape, r3 = [e3[e3.length - 1] / 4, 1, 1];
              t3.shape = r3;
            }
          }, isAdaptiveAvg: function() {
            var t3 = this.processedAttrs, e3 = t3.adaptive, r3 = t3.pooling_type;
            e3 && "avg" === r3 && (this.name += "_avg_adaptive");
          }, isMax: function() {
            var t3 = "max" === this.processedAttrs.pooling_type ? 1 : 0;
            this.processedAttrs.pooling_type = t3, 1 === t3 && (this.name += "_max");
          }, transToPrelu: function() {
            this.processedAttrs.multi_value = "0.0", this.processedAttrs.active_function = "prelu";
          }, transToRelu6: function() {
            this.processedAttrs.multi_value = this.processedAttrs.threshold, this.processedAttrs.active_function = "relu6";
          }, transToHardSigmoid: function() {
            this.processedAttrs.multi_value = this.processedAttrs.slope || 0.2, this.processedAttrs.bias_value = this.processedAttrs.offset || 0.5, this.processedAttrs.active_function = "hardSigmoid";
          }, transToLeakyrelu: function() {
            this.processedAttrs.multi_value = this.processedAttrs.alpha, this.processedAttrs.active_function = "leakyRelu", this.name = "relu";
          }, transToPow: function() {
            this.processedAttrs.multi_value = this.processedAttrs.factor || 2, this.processedAttrs.active_function = "pow_func", this.name = "pow";
          }, transToSigmoid: function() {
            this.processedAttrs.active_function = "sigmoid";
          }, transToSqrt: function() {
            this.processedAttrs.active_function = "sqrt";
          }, transToTanh: function() {
            this.processedAttrs.active_function = "tanh_func";
          }, transToExp: function() {
            this.processedAttrs.active_function = "exp";
          }, transToScale: function() {
            var t3 = this.processedAttrs.scale;
            this.processedAttrs.multi_value = void 0 !== t3 ? t3 : 1, this.processedAttrs.bias_value = this.processedAttrs.bias || 0;
            var e3 = this.processedAttrs.bias_after_scale;
            this.processedAttrs.active_function = e3 || void 0 === e3 ? "scale" : "scaleWidthBias";
          }, setActiveFunc: function() {
            var t3 = this.name.replace("conv2d-elementwise_add-", "");
            this.processedAttrs = Object.assign({ active_function: "scale", multi_value: "1.0", bias_value: "0.0", fuse_relu: false }, this.processedAttrs), "leaky_relu" === t3 && (this.processedAttrs.multi_value = this.processedAttrs.alpha, this.processedAttrs.active_function = "leakyRelu");
          }, normalizePerm: function() {
            var t3 = this.tensorDataMap.origin.shape.length, e3 = this.processedAttrs.axis, r3 = e3.length;
            if (r3 - t3 > 0 && (r3 = (e3 = e3.map(function(t4) {
              return t4 - 1;
            }).filter(function(t4) {
              return t4 >= 0;
            })).length), r3 > 4) throw Error("op transpoes2 axis length exceeds maximum length 4, get " + r3);
            for (var n2 = new Array(r3).fill(0), i2 = 0; i2 < r3; i2++) n2[e3[i2]] = i2;
            var s2 = [];
            for (i2 = 0; i2 < 4; i2++) s2[i2] = n2[i2] || 0;
            this.processedAttrs.perm_arr = s2, this.processedAttrs.perm_size = r3;
          }, normalizeDim: function() {
            for (var t3 = this.tensorDataMap.origin.shape, e3 = H(t3), r3 = G(t3, this.processedAttrs.axis), n2 = [], i2 = 0; i2 < e3[r3]; i2++) n2[i2] = i2;
            if (this.processedAttrs.target_length = n2.length, this.processedAttrs.target_value = n2, this.processedAttrs.inputs_dim = e3[r3], this.processedAttrs.dim = r3, 0 === this.processedAttrs.num && (this.processedAttrs.num = Object.values(this.tensorDataMap).filter(function(t4) {
              return "out" === t4.tensorName;
            }).length || 1), "wasm" === p.get("backend")) {
              this.processedAttrs.fourInputs = false;
              var s2 = this.tensorDataMap.counter;
              if (s2) {
                var a2 = H(s2.shape);
                this.processedAttrs.counter_num = a2[r3];
              }
              var o2 = this.tensorDataMap.appender;
              if (o2) {
                var u2 = H(o2.shape);
                this.processedAttrs.append_num = u2[r3];
              }
              var h2 = this.tensorDataMap.fourth;
              if (h2) {
                this.processedAttrs.fourInputs = true;
                var c2 = H(h2.shape);
                this.processedAttrs.fourth_num = c2[r3];
              }
            }
          }, processElementwiseAxis: function() {
            var t3 = this.tensorDataMap.origin.shape, e3 = this.tensorDataMap.counter.shape, r3 = void 0 === this.processedAttrs.axis ? -1 : this.processedAttrs.axis;
            this.processedAttrs.counterLen = e3.length, B(t3) === B(e3) ? (this.processedAttrs.axis = 0, this.processedAttrs.counterLen = 4) : (-1 === r3 && (r3 = t3.length - e3.length), this.processedAttrs.axis = G(t3, r3));
          }, genElementwiseCounterPos: function() {
            for (var t3 = this.processedAttrs, e3 = t3.counterLen, r3 = ["0", "0", "0", "0"], n2 = t3.axis, i2 = 4 - e3; i2 < 4; i2++) r3[i2] = "oPos[" + n2++ + "]";
            this.processedAttrs.counterPos = r3.join(",");
          }, flattenShape: function() {
            var t3 = Object.values(this.tensorDataMap).find(function(t4) {
              return t4.shape.length > 2;
            });
            if (t3) {
              var e3 = H(t3.shape);
              t3.shape = [e3[0] * e3[2], e3[1] * e3[3]];
            }
          }, reshape: function() {
            var t3 = this.tensorDataMap.origin, e3 = this.tensorDataMap.counter, r3 = this.tensorDataMap.out;
            if (e3.shape.length > t3.shape.length) {
              var n2 = e3;
              e3 = t3, t3 = n2;
            }
            if (t3.shape.length > 2 && 2 === e3.shape.length) {
              var i2 = function(t4, e4) {
                void 0 === t4 && (t4 = []), void 0 === e4 && (e4 = []);
                var r4 = t4.reduce(function(t5, e5) {
                  return t5 * e5;
                });
                return 1 === e4.length ? [1, r4] : [e4[0], r4 / e4[0]];
              }(t3.shape, r3.shape);
              t3.shape = i2;
            }
          }, checkIsMerge: function() {
            var t3 = this.name.replace("conv2d-elementwise_add-", "");
            this.name = "conv2d_elementwise_add", "leaky_relu" === t3 && (this.processedAttrs.alpha && (this.processedAttrs.multi_value = this.processedAttrs.alpha), this.processedAttrs.active_function = "leakyRelu");
          } };
          var at = function() {
            return (at = Object.assign || function(t3) {
              for (var e3, r3 = 1, n2 = arguments.length; r3 < n2; r3++) for (var i2 in e3 = arguments[r3]) Object.prototype.hasOwnProperty.call(e3, i2) && (t3[i2] = e3[i2]);
              return t3;
            }).apply(this, arguments);
          };
          const ot = function() {
            function t3(t4, e3, r3, n2, i2) {
              this.name = "", this.isPackedOp = false, this.processedAttrs = {}, this.subAttrs = [], this.uniform = null, this.inputTensors = [], this.outputTensors = [], this.dataLayout = "", this.iLayer = 0, this.program = [], this.isFinalOp = false, this.bufferType = v.FrameBuffer, this.tensorDataMap = {}, this.tensorData = [];
              var s2 = t4.type, a2 = t4.inputs, o2 = t4.outputs, u2 = t4.attrs, h2 = t4.isPacked, c2 = t4.bufferType, p2 = void 0 === c2 ? v.FrameBuffer : c2, f2 = t4.uniform, l2 = void 0 === f2 ? null : f2;
              this.modelName = i2, this.subAttrs = t4.subAttrs, this.name = s2, this.isPackedOp = h2, this.bufferType = p2, this.dataLayout = r3.dataLayout || "", this.iLayer = e3, this.isFinalOp = n2, this.uniform = l2, this.initExtendedAttrs(u2), this.constructTensorData(a2, o2, r3.vars), this.buildTensor();
              var d2 = this.buildShaderParams();
              this.buildProgram(d2);
            }
            return t3.prototype.initExtendedAttrs = function(t4) {
              for (var e3 in t4) if (Object.prototype.hasOwnProperty.call(t4, e3)) {
                var r3 = t4[e3];
                this.processedAttrs[e3] = r3;
              }
            }, t3.prototype.constructTensorData = function(t4, e3, r3) {
              var n2 = this;
              Object.keys(e3).forEach(function(t5) {
                e3[t5].forEach(function(i3, s3) {
                  e3[t5][s3] = n2.getTensorVar(i3, r3);
                });
              }), Object.keys(t4).forEach(function(e4) {
                t4[e4] = [n2.getTensorVar(t4[e4][0], r3)];
              });
              var i2 = function(t5) {
                if (Object.prototype.hasOwnProperty.call(e3, t5)) try {
                  var r4 = e3[t5] || [{}], i3 = s2.getExactTensorName(t5, "output");
                  i3 && r4.forEach(function(t6, e4) {
                    t6.tensorName = i3, n2.tensorDataMap[i3 + "_" + e4] = at(at({}, t6), { tensorName: i3, runtime: e4 });
                  });
                } catch (t6) {
                  console.error(t6);
                }
              }, s2 = this;
              for (var a2 in e3) i2(a2);
              for (var a2 in t4) if (Object.prototype.hasOwnProperty.call(t4, a2)) {
                var o2 = t4[a2].length > 0 ? t4[a2] : [{}], u2 = this.getExactTensorName(a2, "input");
                if (u2) {
                  var h2 = o2[0];
                  h2.tensorName = u2, this.tensorDataMap[u2] = at(at({}, h2), { tensorName: u2 });
                }
              }
            }, t3.prototype.getExactTensorName = function(t4, e3) {
              return "input" === e3 ? { input: "origin", x: "origin", y: "counter", w: "weight" }[t4.toLowerCase()] || t4.toLowerCase() : { output: "out", y: "out", out: "out", scale: "scale", bias: "bias", mean: "mean", variance: "variance", mask: "out", boxes: "out", variances: "out" }[t4.toLowerCase()];
            }, t3.prototype.getTensorVar = function(t4, e3) {
              var r3 = o(e3, t4.replace(/_packed$/, ""));
              return r3 && t4.endsWith("_packed") ? function(t5, e4) {
                var r4 = 3 === t5.shape.length ? W([1], t5.shape) : t5.shape, n2 = r4[0], i2 = r4[1], s2 = r4[2], a2 = r4[3], o2 = Object.assign({}, t5);
                if (o2.name = e4, o2.packed = false, i2 % 4 == 0) {
                  var u2 = i2 / 4;
                  o2.packed = true, o2.shape = [n2, u2, s2, a2];
                }
                return o2;
              }(r3, t4) : r3;
            }, t3.prototype.buildProgram = function(t4) {
              var e3 = this, r3 = this.name, n2 = b.backend + "_" + r3, i2 = b.opRegistry.ops[n2];
              try {
                if (!i2 && "wasm" !== p.get("backend")) throw new Error("[unregistered op] " + r3);
                var s2 = this.inputTensors;
                this.program = this.outputTensors.map(function(r4, n3) {
                  return b.backendInstance.createProgram({ op: i2, outTensor: r4, inputTensors: s2, shaderParams: t4[n3], runtime: n3, isFinalOp: e3.isFinalOp });
                });
              } catch (t5) {
                console.error(t5);
              }
            }, t3.prototype.processTensorDataAndAttrs = function() {
              var t4 = this;
              try {
                this.name.indexOf("conv2d-elementwise_add") > -1 ? this.name = "conv2d_elementwise_add" : this.name.indexOf("max_pool2d_with_index") > -1 && (this.name = "pool2d_max");
                var e3 = b.backend + "_" + this.name;
                (b.opRegistry.ops[e3] && b.opRegistry.ops[e3].behaviors || []).forEach(function(e4) {
                  try {
                    st[e4].call(t4);
                  } catch (t5) {
                    console.error(t5);
                  }
                });
              } catch (t5) {
                console.error(t5);
              }
            }, t3.prototype.buildTensor = function() {
              var t4 = this;
              this.processTensorDataAndAttrs();
              var e3 = Object.values(this.tensorDataMap);
              e3.forEach(function(e4, r3) {
                var n2, i2 = e4.tensorName, s2 = new it({ type: t4.modelName + "_" + e4.name, name: i2, shape: e4.shape, data: e4.data || null, persistable: e4.persistable || false, interpType: e4.interpType || "NEAREST", isPacked: t4.isPackedOp || e4.packed || false, binding: r3, noLayout: null === (n2 = b.backendInstance) || void 0 === n2 ? void 0 : n2.noLayout, dataLayout: t4.dataLayout, runtime: e4.runtime || 0 });
                "out" === i2 ? t4.outputTensors.push(s2) : t4.inputTensors.push(s2), e4.shape = s2.shape, e4.total = s2.total;
              }), this.tensorDataMap = null, this.tensorData = e3;
            }, t3.prototype.buildShaderParams = function() {
              var t4 = this, e3 = [];
              return this.outputTensors.forEach(function() {
                var r3 = JSON.parse(JSON.stringify(t4.processedAttrs));
                e3.push(r3);
              }), e3;
            }, t3;
          }();
          var ut = function() {
            return (ut = Object.assign || function(t3) {
              for (var e3, r3 = 1, n2 = arguments.length; r3 < n2; r3++) for (var i2 in e3 = arguments[r3]) Object.prototype.hasOwnProperty.call(e3, i2) && (t3[i2] = e3[i2]);
              return t3;
            }).apply(this, arguments);
          };
          const ht = function() {
            function t3() {
              this.targetContext = {}, this.gapFillWith = "#fff", this.mean = [0, 0, 0], this.std = [1, 1, 1], this.bgr = false, this.pixelWidth = 1, this.pixelHeight = 1, this.inputFeed = [], this.targetCanvas = p.get("canvas2d") || document.createElement("canvas"), this.targetContext = this.targetCanvas.getContext("2d");
            }
            return t3.prototype.process = function(t4, e3, r3) {
              var n2 = e3.fill, i2 = e3.mean, s2 = e3.std, a2 = e3.bgr, o2 = e3.keepRatio, u2 = void 0 === o2 || o2, h2 = e3.scale, c2 = void 0 === h2 ? 0 : h2, p2 = r3.fc, f2 = void 0 === p2 ? 3 : p2, l2 = r3.fh, d2 = r3.fw, v2 = t4, g2 = { gapFillWith: n2 || this.gapFillWith, mean: i2 || this.mean, std: s2 || this.std, bgr: a2 || this.bgr, keepRatio: u2, scale: c2, targetSize: { width: d2, height: l2 }, targetShape: [1, f2, l2, d2] };
              return this.fromPixels(v2, g2) || [];
            }, t3.prototype.fromPixels = function(t4, e3) {
              var r3 = [], n2 = { gapFillWith: e3.gapFillWith, dx: 0, dy: 0, dWidth: e3.targetSize.width, dHeight: e3.targetSize.height }, i2 = t4, s2 = t4.path && t4.width && t4.height;
              if (!s2 && !(t4 instanceof ImageBitmap || t4 instanceof HTMLVideoElement || t4 instanceof HTMLImageElement || t4 instanceof HTMLCanvasElement)) return [{ data: r3, shape: e3.shape || e3.targetShape, name: "image", persistable: true }];
              this.pixelWidth = t4.naturalWidth || t4.width, this.pixelHeight = t4.naturalHeight || t4.height;
              var a2 = p.get("webgl_gpu_pipeline") || e3.webglFeedProcess;
              return this.fitToTargetSize(s2 ? i2.path : i2, n2, ut(ut({}, e3), { inGPU: a2 })), r3 = this.getImageData(n2), a2 ? [{ data: r3 = Float32Array.from(r3.data), shape: [1, 1, n2.dHeight, n2.dWidth], name: "image", persistable: true }] : [{ data: r3 = this.allReshapeToRGB(r3, e3), shape: e3.targetShape || e3.shape, name: "image", persistable: true }];
            }, t3.prototype.allReshapeToRGB = function(t4, e3) {
              for (var r3 = e3.mean, n2 = e3.std, i2 = e3.targetShape, s2 = e3.bgr, a2 = e3.normalizeType, o2 = void 0 === a2 ? 0 : a2, u2 = i2[1], h2 = i2[2], c2 = i2[3], p2 = t4.data || t4, f2 = new Float32Array(h2 * c2 * u2), l2 = 0, d2 = 0; d2 < h2; ++d2) for (var v2 = d2 * c2, g2 = 0; g2 < c2; ++g2) for (var m2 = v2 + g2, y2 = 0; y2 < u2; ++y2) {
                var b2 = s2 ? 4 * m2 + (2 - y2) : 4 * m2 + y2;
                f2[l2] = 0 === o2 ? p2[b2] / 255 : (p2[b2] - 128) / 128, f2[l2] -= r3[y2], f2[l2] /= n2[y2], l2++;
              }
              return z(f2, [1, h2, c2, u2]);
            }, t3.prototype.fitToTargetSize = function(t4, e3, r3) {
              var n2 = r3 || {}, i2 = n2.keepRatio, s2 = void 0 === i2 || i2, a2 = n2.inGPU, o2 = void 0 !== a2 && a2, u2 = n2.scale, h2 = void 0 === u2 ? 0 : u2, c2 = e3.dWidth, p2 = e3.dHeight, f2 = o2 ? this.pixelWidth : c2, l2 = o2 ? this.pixelHeight : p2, d2 = o2 ? this.pixelWidth : c2, v2 = o2 ? this.pixelHeight : p2, g2 = 0, m2 = 0;
              if (h2) {
                if (d2 - c2 < 0 || v2 - p2 < 0) throw new Error("scale size smaller than target size");
                this.pixelWidth > this.pixelHeight ? (v2 = h2, d2 = Math.round(v2 * this.pixelWidth / this.pixelHeight)) : (d2 = h2, v2 = Math.round(d2 * this.pixelHeight / this.pixelWidth)), this.targetCanvas.width = f2 = d2, this.targetCanvas.height = l2 = v2, e3.dx = (d2 - c2) / 2, e3.dy = (v2 - p2) / 2;
              } else s2 && (c2 / p2 * this.pixelHeight / this.pixelWidth >= 1 ? o2 ? (f2 = Math.round(v2 * c2 / p2), g2 = Math.floor((f2 - d2) / 2)) : (d2 = Math.round(v2 * this.pixelWidth / this.pixelHeight), g2 = Math.floor((c2 - d2) / 2)) : o2 ? (l2 = Math.round(d2 * p2 / c2), m2 = Math.floor((l2 - v2) / 2)) : (v2 = Math.round(d2 * this.pixelHeight / this.pixelWidth), m2 = Math.floor((p2 - v2) / 2))), this.targetCanvas.width = e3.dWidth = f2, this.targetCanvas.height = e3.dHeight = l2;
              this.targetContext.fillStyle = e3.gapFillWith, this.targetContext.fillRect(0, 0, this.targetCanvas.width, this.targetCanvas.height), this.targetContext.drawImage(t4, g2, m2, d2, v2);
            }, t3.prototype.getImageData = function(t4) {
              var e3 = t4.dx, r3 = t4.dy, n2 = t4.dWidth, i2 = t4.dHeight;
              return this.targetContext.getImageData(e3, r3, n2, i2);
            }, t3.prototype.cover = function(t4, e3, r3, n2) {
              var i2 = r3, s2 = n2;
              return r3 / n2 * e3 / t4 >= 1 ? i2 = Math.round(s2 * t4 / e3) : s2 = Math.round(i2 * e3 / t4), [i2 / r3, s2 / n2];
            }, t3;
          }();
          var ct = function() {
            return (ct = Object.assign || function(t3) {
              for (var e3, r3 = 1, n2 = arguments.length; r3 < n2; r3++) for (var i2 in e3 = arguments[r3]) Object.prototype.hasOwnProperty.call(e3, i2) && (t3[i2] = e3[i2]);
              return t3;
            }).apply(this, arguments);
          };
          function pt(t3, e3, r3) {
            for (var n2 = [], i2 = 0, s2 = t3.length; i2 < s2; i2++) {
              var a2 = t3[i2];
              a2 > e3 && n2.push({ score: a2, i: i2 });
            }
            return n2.sort(function(t4, e4) {
              return e4.score - t4.score;
            }).slice(0, r3);
          }
          function ft(t3) {
            var e3 = t3[0], r3 = t3[1], n2 = t3[2], i2 = t3[3];
            return n2 < e3 || i2 < r3 ? 0 : (n2 - e3) * (i2 - r3);
          }
          function lt(t3, e3) {
            if (e3[0] > t3[2] || e3[2] < t3[0] || e3[1] > t3[3] || e3[3] < t3[1]) return 0;
            var r3 = ft(t3), n2 = ft(e3), i2 = function(t4, e4) {
              var r4 = t4[0], n3 = t4[1], i3 = t4[2], s2 = t4[3], a2 = e4[0], o2 = e4[1], u2 = e4[2], h2 = e4[3], c2 = Math.max(r4, a2), p2 = Math.max(n3, o2);
              return (Math.min(i3, u2) - c2) * (Math.min(s2, h2) - p2);
            }(t3, e3);
            return i2 / (r3 + n2 - i2);
          }
          const dt = { multiclass_nms: function(t3, e3) {
            var r3 = t3[0], n2 = void 0 === r3 ? [] : r3, i2 = t3[1], s2 = void 0 === i2 ? [] : i2, a2 = X(n2), o2 = X(s2);
            if (!a2 || !o2) return [];
            if (a2 = a2[0], o2 = o2[0], !(a2 && a2.length && o2 && o2.length)) return [];
            for (var u2 = e3.nms_top_k, h2 = void 0 === u2 ? 100 : u2, c2 = e3.nms_eta, p2 = void 0 === c2 ? 1 : c2, f2 = e3.keep_top_k, l2 = void 0 === f2 ? 100 : f2, d2 = e3.background_label, v2 = void 0 === d2 ? 0 : d2, g2 = e3.nms_threshold, m2 = void 0 === g2 ? 0.3 : g2, y2 = e3.score_threshold, b2 = void 0 === y2 ? 0 : y2, w2 = [], _2 = 0, A2 = o2.length; _2 < A2; _2++) {
              var x2 = [];
              if (_2 !== v2) {
                var k2 = pt(o2[_2], b2, h2);
                if (k2 && k2.length) {
                  var O2 = k2.shift(), P2 = a2[O2.i];
                  for (x2.push(ct(ct({}, O2), { box: P2, label: _2 })); k2.length; ) {
                    var T2 = k2.shift();
                    P2 = a2[T2.i];
                    for (var j2 = true, M2 = 0, E2 = x2; M2 < E2.length; M2++) if (lt(P2, E2[M2].box) > m2) {
                      j2 = false;
                      break;
                    }
                    j2 && x2.push(ct(ct({}, T2), { box: P2, label: _2 })), j2 && p2 < 1 && m2 > 0.5 && (m2 *= p2);
                  }
                  w2 = w2.concat(x2);
                }
              }
            }
            var F2 = w2.sort(function(t4, e4) {
              return e4.score - t4.score;
            }).slice(0, l2).sort(function(t4, e4) {
              return t4.label - e4.label;
            }).map(function(t4) {
              return function() {
                for (var t5 = 0, e4 = 0, r4 = arguments.length; e4 < r4; e4++) t5 += arguments[e4].length;
                var n3 = Array(t5), i3 = 0;
                for (e4 = 0; e4 < r4; e4++) for (var s3 = arguments[e4], a3 = 0, o3 = s3.length; a3 < o3; a3++, i3++) n3[i3] = s3[a3];
                return n3;
              }([t4.label, t4.score], t4.box);
            });
            return F2 && F2.length ? F2 : [];
          } };
          var vt = function(t3, e3, r3, n2) {
            return new (r3 || (r3 = Promise))(function(i2, s2) {
              function a2(t4) {
                try {
                  u2(n2.next(t4));
                } catch (t5) {
                  s2(t5);
                }
              }
              function o2(t4) {
                try {
                  u2(n2.throw(t4));
                } catch (t5) {
                  s2(t5);
                }
              }
              function u2(t4) {
                var e4;
                t4.done ? i2(t4.value) : (e4 = t4.value, e4 instanceof r3 ? e4 : new r3(function(t5) {
                  t5(e4);
                })).then(a2, o2);
              }
              u2((n2 = n2.apply(t3, e3 || [])).next());
            });
          }, gt = function(t3, e3) {
            var r3, n2, i2, s2, a2 = { label: 0, sent: function() {
              if (1 & i2[0]) throw i2[1];
              return i2[1];
            }, trys: [], ops: [] };
            return s2 = { next: o2(0), throw: o2(1), return: o2(2) }, "function" == typeof Symbol && (s2[Symbol.iterator] = function() {
              return this;
            }), s2;
            function o2(s3) {
              return function(o3) {
                return function(s4) {
                  if (r3) throw new TypeError("Generator is already executing.");
                  for (; a2; ) try {
                    if (r3 = 1, n2 && (i2 = 2 & s4[0] ? n2.return : s4[0] ? n2.throw || ((i2 = n2.return) && i2.call(n2), 0) : n2.next) && !(i2 = i2.call(n2, s4[1])).done) return i2;
                    switch (n2 = 0, i2 && (s4 = [2 & s4[0], i2.value]), s4[0]) {
                      case 0:
                      case 1:
                        i2 = s4;
                        break;
                      case 4:
                        return a2.label++, { value: s4[1], done: false };
                      case 5:
                        a2.label++, n2 = s4[1], s4 = [0];
                        continue;
                      case 7:
                        s4 = a2.ops.pop(), a2.trys.pop();
                        continue;
                      default:
                        if (!((i2 = (i2 = a2.trys).length > 0 && i2[i2.length - 1]) || 6 !== s4[0] && 2 !== s4[0])) {
                          a2 = 0;
                          continue;
                        }
                        if (3 === s4[0] && (!i2 || s4[1] > i2[0] && s4[1] < i2[3])) {
                          a2.label = s4[1];
                          break;
                        }
                        if (6 === s4[0] && a2.label < i2[1]) {
                          a2.label = i2[1], i2 = s4;
                          break;
                        }
                        if (i2 && a2.label < i2[2]) {
                          a2.label = i2[2], a2.ops.push(s4);
                          break;
                        }
                        i2[2] && a2.ops.pop(), a2.trys.pop();
                        continue;
                    }
                    s4 = e3.call(t3, a2);
                  } catch (t4) {
                    s4 = [6, t4], n2 = 0;
                  } finally {
                    r3 = i2 = 0;
                  }
                  if (5 & s4[0]) throw s4[1];
                  return { value: s4[0] ? s4[1] : void 0, done: true };
                }([s3, o3]);
              };
            }
          };
          const mt = function() {
            function t3(t4) {
              this.runnerConfig = {}, this.isPaused = false, this.model = {}, this.weightMap = [], this.isExecuted = false, this.test = false, this.graphGenerator = {}, this.mediaProcessor = null, this.needPreheat = true, this.feedShape = {}, this.runnerConfig = Object.assign({}, t4), this.needPreheat = void 0 === t4.needPreheat || t4.needPreheat, this.modelName = t4.modelName || Date.now().toString(), this.weightMap = [], p.set("ns", s()), "node" !== p.get("platform") && (this.mediaProcessor = new ht());
            }
            return t3.prototype.init = function() {
              return vt(this, void 0, void 0, function() {
                var t4;
                return gt(this, function(e3) {
                  switch (e3.label) {
                    case 0:
                      return b.backendInstance ? (this.isExecuted = false, "wasm" !== p.get("backend") ? [3, 2] : [4, Promise.all([this.load(), b.backendInstance.init()])]) : (console.error("ERROR: Haven't register backend"), [2]);
                    case 1:
                      return e3.sent(), [3, 5];
                    case 2:
                      return [4, b.backendInstance.init()];
                    case 3:
                      return e3.sent(), [4, this.load()];
                    case 4:
                      e3.sent(), e3.label = 5;
                    case 5:
                      return this.genFeedData(), this.genGraph(), this.genOpData(), "wasm" !== p.get("backend") ? [3, 7] : (this.model = Object.assign(this.model, this.runnerConfig), t4 = this.model, [4, b.backendInstance.initWasm(this.model, this.weightMap)]);
                    case 6:
                      return t4.index = e3.sent(), [2, []];
                    case 7:
                      return this.needPreheat ? [4, this.preheat()] : [3, 9];
                    case 8:
                      return [2, e3.sent()];
                    case 9:
                      return [2];
                  }
                });
              });
            }, t3.prototype.load = function() {
              return vt(this, void 0, void 0, function() {
                var t4, e3, r3, n2, i2, s2, a2, o2;
                return gt(this, function(u2) {
                  switch (u2.label) {
                    case 0:
                      return t4 = this.runnerConfig, e3 = t4.modelPath, r3 = t4.modelObj, n2 = void 0 === r3 ? null : r3, e3 ? (i2 = new d(e3), s2 = this, [4, i2.load()]) : [3, 2];
                    case 1:
                      return s2.model = u2.sent(), [3, 3];
                    case 2:
                      (null == n2 ? void 0 : n2.model) && (null == n2 ? void 0 : n2.params) && (a2 = n2.model, o2 = n2.params, d.allocateParamsVar(a2.vars, o2), this.model = a2), u2.label = 3;
                    case 3:
                      return [2];
                  }
                });
              });
            }, t3.prototype.genGraph = function() {
              this.graphGenerator = new nt(this.model, this.runnerConfig), this.weightMap = this.graphGenerator.createGraph();
            }, t3.prototype.genOpData = function() {
              var t4 = this, e3 = 0;
              this.weightMap.forEach(function(r3, n2) {
                var i2 = r3.type;
                if ("feed" !== i2 && "fetch" !== i2) {
                  e3++;
                  var s2 = n2 === t4.weightMap.length - 2, a2 = new ot(r3, e3, t4.model, s2, t4.modelName);
                  r3.opData = a2;
                }
              }), c(this.model);
            }, t3.prototype.preheat = function() {
              return vt(this, void 0, void 0, function() {
                var t4;
                return gt(this, function(e3) {
                  switch (e3.label) {
                    case 0:
                      return [4, this.checkModelLoaded()];
                    case 1:
                      return e3.sent(), [4, this.execute()];
                    case 2:
                      return t4 = e3.sent(), this.isExecuted = true, [2, t4];
                  }
                });
              });
            }, t3.prototype.checkModelLoaded = function() {
              return vt(this, void 0, void 0, function() {
                return gt(this, function(t4) {
                  switch (t4.label) {
                    case 0:
                      return 0 !== this.weightMap.length ? [3, 2] : (console.info("It's better to preheat the model before running."), [4, this.load()]);
                    case 1:
                      t4.sent(), this.genFeedData(), this.genGraph(), this.genOpData(), this.isExecuted = false, t4.label = 2;
                    case 2:
                      return [2];
                  }
                });
              });
            }, t3.prototype.predict = function(t4, e3) {
              return vt(this, void 0, void 0, function() {
                var r3, n2, i2;
                return gt(this, function(s2) {
                  switch (s2.label) {
                    case 0:
                      return this.isPaused || !this.mediaProcessor ? [2] : (r3 = [], r3 = this.runnerConfig.webglFeedProcess ? [t4] : this.mediaProcessor.process(t4, this.runnerConfig, this.feedShape), n2 = [], "wasm" !== p.get("backend") ? [3, 3] : [4, b.backendInstance.predict(r3[0].data, this.model.index)]);
                    case 1:
                      return s2.sent(), [4, this.read()];
                    case 2:
                      return i2 = s2.sent(), n2 = this.postProcess(i2), [3, 5];
                    case 3:
                      return this.updateFeedData(r3), [4, this.execute()];
                    case 4:
                      n2 = s2.sent(), s2.label = 5;
                    case 5:
                      return this.isExecuted = true, [2, e3 ? e3(n2) : n2];
                  }
                });
              });
            }, t3.prototype.predictWithFeed = function(t4, e3, r3) {
              var n2;
              return vt(this, void 0, void 0, function() {
                var i2, s2, a2, o2, u2, h2, c2, f2, l2, d2, v2, g2;
                return gt(this, function(m2) {
                  switch (m2.label) {
                    case 0:
                      return i2 = this.feedShape, s2 = i2.fc, a2 = void 0 === s2 ? 3 : s2, o2 = i2.fw, u2 = i2.fh, Array.isArray(t4) ? (null === (n2 = t4[0]) || void 0 === n2 ? void 0 : n2.data) ? ((d2 = t4[0].data) instanceof Float32Array || (t4[0].data = new Float32Array(d2)), h2 = t4) : h2 = [{ data: new Float32Array(t4), shape: r3 || [1, a2, u2, o2], name: "image", persistable: true }] : (f2 = (c2 = t4).width, l2 = c2.height, d2 = c2.data, h2 = [{ data: new Float32Array(d2), shape: r3 || [1, a2, l2 || u2, f2 || o2], name: "image", persistable: true }]), v2 = [], "wasm" !== p.get("backend") ? [3, 3] : [4, b.backendInstance.predict(h2[0].data, this.model.index)];
                    case 1:
                      return m2.sent(), [4, this.read()];
                    case 2:
                      return g2 = m2.sent(), v2 = this.postProcess(g2), [3, 5];
                    case 3:
                      return this.updateFeedData(h2), [4, this.execute()];
                    case 4:
                      v2 = m2.sent(), m2.label = 5;
                    case 5:
                      return this.isExecuted = true, [2, e3 ? e3(v2) : v2];
                  }
                });
              });
            }, t3.prototype.genFeedData = function() {
              var t4, e3 = this.runnerConfig, r3 = e3.type, n2 = e3.feedShape, i2 = e3.webglFeedProcess;
              this.feedShape = this.model.feedShape || n2;
              var s2, a2 = this.feedShape, h2 = a2.fc, c2 = void 0 === h2 ? 3 : h2, f2 = a2.fh, l2 = a2.fw, d2 = this.model.vars;
              if (r3 === y.MultipleInput) {
                var v2 = this.model.ops && this.model.ops[0] && (null === (t4 = this.model.ops[0].inputs) || void 0 === t4 ? void 0 : t4.X);
                v2.length > 1 && (s2 = v2.map(function(t5) {
                  var e4 = o(d2, t5), r4 = e4.shape.reverse(), n3 = r4[0], i3 = r4[1], s3 = r4[2], a3 = r4[3], u2 = void 0 === a3 ? 1 : a3;
                  return e4.data = new Float32Array(u2 * s3 * i3 * n3), e4;
                }));
              } else {
                var g2 = "wasm" !== p.get("backend") && i2 ? 4 : c2;
                s2 = o(d2, "image");
                var m2 = { name: "image", shape: [1, g2, f2, l2] };
                s2 = Object.assign(m2, s2, { data: new Float32Array(g2 * f2 * l2).fill(1), persistable: true });
              }
              u(d2, s2);
            }, t3.prototype.updateFeedData = function(t4) {
              var e3 = t4[0], r3 = this.weightMap.find(function(t5) {
                return t5.opData ? t5.opData.inputTensors.find(function(t6) {
                  return t6.tensorId.endsWith("_image");
                }) : null;
              }), n2 = r3.opData.inputTensors.find(function(t5) {
                return t5.tensorId.endsWith("_image");
              });
              n2.data = e3.data;
              var i2 = this.runnerConfig, s2 = i2.webglFeedProcess, a2 = void 0 !== s2 && s2, o2 = i2.keepRatio, u2 = void 0 === o2 || o2;
              if (a2 || p.get("webgl_gpu_pipeline")) {
                var h2 = e3.shape || [1, 1, e3.height, e3.width], c2 = new Uint8Array(e3.data || []);
                if (e3.width && e3.height && !e3.data) {
                  var f2 = e3.naturalWidth || e3.width;
                  h2 = [1, 1, e3.naturalHeight || e3.height, f2], c2 = e3;
                }
                var l2 = n2.opts;
                l2.shape = h2;
                var d2 = r3.opData, v2 = new it(l2);
                v2.data = c2, d2.inputTensors = [v2];
                var g2 = h2.slice(-2), m2 = g2[0], y2 = g2[1], b2 = d2.outputTensors[0].shape.slice(-2), w2 = b2[0], _2 = b2[1], A2 = this.mediaProcessor.cover(y2, m2, _2, w2);
                r3.uniform.u_scale.value = A2, r3.uniform.u_keep_ratio.value = +u2;
              }
            }, t3.prototype.execute = function() {
              return vt(this, void 0, void 0, function() {
                var t4, e3;
                return gt(this, function(r3) {
                  switch (r3.label) {
                    case 0:
                      return t4 = this.graphGenerator.getFeedExecutor(), this.executeOp(t4), [4, this.read()];
                    case 1:
                      return e3 = r3.sent(), [2, this.postProcess(e3)];
                  }
                });
              });
            }, t3.prototype.postProcess = function(t4) {
              var e3 = "wasm" === p.get("backend");
              if (p.get("debug")) return t4;
              var r3 = t4, n2 = this.model, i2 = n2.multiOutputs, s2 = n2.postOps;
              if (i2) if (e3) r3 = i2.map(function(e4, r4) {
                var n3;
                return (n3 = {})[e4.name] = t4[r4], n3;
              });
              else {
                var a2 = 0;
                r3 = i2.map(function(e4) {
                  var r4, n3 = e4.shape.reduce(function(t5, e5) {
                    return t5 * e5;
                  }), i3 = t4.slice(a2, n3 + a2);
                  return a2 += n3, (r4 = {})[e4.name] = i3, r4;
                });
              }
              if (i2 && s2 && s2.length) for (var o2 = function(t5, e4) {
                var n3 = s2[t5], i3 = n3.type, a3 = n3.attrs, o3 = n3.inputs, u3 = dt[i3];
                if (!u3) return { value: void 0 };
                var h3 = function() {
                  for (var t6 = 0, e5 = 0, r4 = arguments.length; e5 < r4; e5++) t6 += arguments[e5].length;
                  var n4 = Array(t6), i4 = 0;
                  for (e5 = 0; e5 < r4; e5++) for (var s3 = arguments[e5], a4 = 0, o4 = s3.length; a4 < o4; a4++, i4++) n4[i4] = s3[a4];
                  return n4;
                }(r3), c3 = Object.keys(o3).map(function(t6) {
                  var e5 = o3[t6], r4 = e5.name, n4 = e5.shape, i4 = h3.filter(function(t7) {
                    return t7[r4];
                  });
                  return i4 && i4[0] && i4[0][r4] ? { name: t6, tensorId: r4, data: i4[0][r4], shape: n4 } : (console.error("\u672A\u83B7\u53D6\u5230" + r4 + "\u7684\u6570\u636E"), null);
                });
                r3 = u3(c3, a3);
              }, u2 = 0, h2 = s2.length; u2 < h2; u2++) {
                var c2 = o2(u2);
                if ("object" == typeof c2) return c2.value;
              }
              return r3;
            }, t3.prototype.executeOp = function(t4) {
              var e3;
              if ("fetch" !== t4.type) {
                if ("feed" !== t4.type && t4.execute(this.isExecuted), p.get("debug") && (null === (e3 = t4.opData) || void 0 === e3 ? void 0 : e3.outputTensors) && t4.opData.outputTensors[t4.opData.outputTensors.length - 1] && t4.opData.outputTensors[t4.opData.outputTensors.length - 1].tensorId === this.modelName + "_" + (p.get("ns").layerName || p.get("layerName"))) console.info(t4.opData.name + "_" + t4.opData.iLayer, "runner op");
                else if (t4.next) {
                  var r3 = t4.next, n2 = this.graphGenerator.getExecutorById(r3);
                  this.executeOp(n2);
                }
              }
            }, t3.prototype.read = function() {
              return vt(this, void 0, void 0, function() {
                var t4, e3, r3;
                return gt(this, function(n2) {
                  switch (n2.label) {
                    case 0:
                      return t4 = this.graphGenerator.getFetchExecutor(), e3 = o(this.model.vars, t4.inputs.X[0]), r3 = { name: e3.name, shape: t4.attrs.origin_shape || e3.shape, index: this.model.index }, [4, b.backendInstance.read(r3)];
                    case 1:
                      return [2, n2.sent()];
                  }
                });
              });
            }, t3.prototype.stopPredict = function() {
              this.isPaused = true;
            }, t3;
          }(), yt = function() {
          };
        }, 993: () => {
        } }, e = {};
        function r(n) {
          if (e[n]) return e[n].exports;
          var i = e[n] = { exports: {} };
          return t[n](i, i.exports, r), i.exports;
        }
        return r.d = (t2, e2) => {
          for (var n in e2) r.o(e2, n) && !r.o(t2, n) && Object.defineProperty(t2, n, { enumerable: true, get: e2[n] });
        }, r.g = function() {
          if ("object" == typeof globalThis) return globalThis;
          try {
            return this || new Function("return this")();
          } catch (t2) {
            if ("object" == typeof window) return window;
          }
        }(), r.o = (t2, e2) => Object.prototype.hasOwnProperty.call(t2, e2), r.r = (t2) => {
          "undefined" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(t2, Symbol.toStringTag, { value: "Module" }), Object.defineProperty(t2, "__esModule", { value: true });
        }, r(994);
      })();
    });
  }
});

// node_modules/@paddlejs/paddlejs-backend-webgl/lib/index.js
var require_lib2 = __commonJS({
  "node_modules/@paddlejs/paddlejs-backend-webgl/lib/index.js"(exports2, module2) {
    !function(n, e) {
      "object" == typeof exports2 && "object" == typeof module2 ? module2.exports = e() : "function" == typeof define && define.amd ? define([], e) : "object" == typeof exports2 ? exports2.paddlejs = e() : (n.paddlejs = n.paddlejs || {}, n.paddlejs.webglBackend = e());
    }(exports2, function() {
      return (() => {
        "use strict";
        var n = { 400: (n2, e2, o2) => {
          o2.r(e2), o2.d(e2, { GLHelper: () => F, glInstance: () => En, ops: () => yn, webgl_types: () => t });
          var t = {};
          o2.r(t), o2.d(t, { UniformType: () => c });
          var r = {};
          o2.r(r), o2.d(r, { exp_func: () => j, hardSigmoid: () => B, leakyRelu: () => S, pow_func: () => D, prelu: () => C, relu6: () => R, scale: () => I, scaleWidthBias: () => L, sigmoid: () => k, sqrt: () => M, tanh_func: () => U, transferFromNHWCtoNCHW: () => O });
          var i = {};
          function s() {
            var n3;
            if ("undefined" != typeof window) n3 = window;
            else if (void 0 !== o2.g) n3 = o2.g;
            else {
              if ("undefined" == typeof self) throw new Error("Could not find a global object");
              n3 = self;
            }
            return n3;
          }
          function a(n3, e3) {
            var o3 = s();
            return o3[n3] || (o3[n3] = e3), o3[n3];
          }
          o2.r(i), o2.d(i, { getPixelsFromTexturePos: () => H, getSamplerCode: () => z, getTensorPosFromArrayIndex: () => G, getValueFromTensorPos: () => N, getValueFromTensorPosPacking: () => X, moveTexture2PosToReal: () => W });
          var u = { opRegistry: { ops: {} }, backend: "", backendInstance: null };
          u = a("GLOBALS", u);
          var l = s();
          l.ImageBitmap || (l.ImageBitmap = function() {
          });
          const f = a("env", new (function() {
            function n3() {
              this.ENV = {};
            }
            return n3.prototype.set = function(n4, e3) {
              this.ENV[n4] = e3;
            }, n3.prototype.get = function(n4) {
              return this.ENV[n4];
            }, n3;
          }())());
          var c;
          !function(n3) {
            n3.uniform1f = "1f", n3.uniform1fv = "1fv", n3.uniform1i = "1i", n3.uniform1iv = "1iv", n3.uniform2f = "2f", n3.uniform2fv = "2fv", n3.uniform2i = "2i", n3.uniform2iv = "2iv", n3.uniform3f = "3f", n3.uniform3fv = "3fv", n3.uniform3i = "3i", n3.uniform3iv = "3iv", n3.uniform4f = "4f", n3.uniform4fv = "4fv", n3.uniform4i = "4i", n3.uniform4iv = "4iv";
          }(c || (c = {}));
          var _;
          function g(n3) {
            for (var e3 = n3.length, o3 = function() {
              for (var n4 = 0, e4 = 0, o4 = arguments.length; e4 < o4; e4++) n4 += arguments[e4].length;
              var t3 = Array(n4), r2 = 0;
              for (e4 = 0; e4 < o4; e4++) for (var i2 = arguments[e4], s2 = 0, a2 = i2.length; s2 < a2; s2++, r2++) t3[r2] = i2[s2];
              return t3;
            }(n3), t2 = []; e3 > 1; ) o3.splice(0, 1), t2.push(o3.reduce(function(n4, e4) {
              return n4 * e4;
            })), e3--;
            return t2;
          }
          function h(n3, e3) {
            if (1 === n3.length) return "float " + e3 + " = float(" + n3[0] + ");";
            for (var o3 = n3.length, t2 = "\n        vec" + o3 + " " + e3 + " = vec" + o3 + "(\n    ", r2 = 0; r2 < o3; r2++) t2 += "float(" + n3[r2] + "),";
            return t2.slice(0, -1) + ");";
          }
          function d(n3, e3, o3) {
            if (0 === n3.length) return "";
            if (2 === f.get("webglVersion")) return n3.reduce(function(e4, t3, r2) {
              return e4 + (r2 < n3.length - 1 ? o3 + "(" + t3 + "), " : o3 + "(" + t3 + "));");
            }, o3 + " " + e3 + "[] = " + o3 + "[](");
            var t2 = n3.reduce(function(n4, t3, r2) {
              return n4 + "\n            " + e3 + "[" + r2 + "] = " + o3 + "(" + t3 + ");";
            }, "");
            return "\n        " + o3 + " " + e3 + "[" + n3.length + "];\n        " + t2 + "\n    ";
          }
          function p(n3, e3, o3) {
            if (0 === n3.length) return "";
            var t2 = n3.reduce(function(n4, e4, t3) {
              return n4 + (0 === t3 ? "\n            " + o3 + " res = " + o3 + "(0);\n            if (index == " + t3 + ") {\n                res = arr[" + t3 + "];\n            }" : "\n            else if (index == " + t3 + ") {\n                res = arr[" + t3 + "];\n            }");
            }, "");
            return "\n    " + o3 + " getValueFromArrByIndex_" + e3 + "(" + o3 + "[" + n3.length + "] arr, int index) {\n        " + (2 === f.get("webglVersion") ? o3 + " res = arr[index];" : t2) + "\n        return res;\n    }\n    ";
          }
          !function(n3) {
            n3.INT_TYPE = "int", n3.FLOAT_TYPE = "float";
          }(_ || (_ = {}));
          var m, P;
          !function(n3) {
            n3[n3.VS_SHADER = 0] = "VS_SHADER", n3[n3.FS_SHADER = 1] = "FS_SHADER";
          }(m || (m = {})), function(n3) {
            n3[n3.FLOAT_VEC2 = 35664] = "FLOAT_VEC2", n3[n3.FLOAT_VEC3 = 35665] = "FLOAT_VEC3", n3[n3.FLOAT_VEC4 = 35666] = "FLOAT_VEC4", n3[n3.INT_VEC2 = 35667] = "INT_VEC2", n3[n3.INT_VEC3 = 35668] = "INT_VEC3", n3[n3.INT_VEC4 = 35669] = "INT_VEC4", n3[n3.BOOL = 35670] = "BOOL", n3[n3.BOOL_VEC2 = 35671] = "BOOL_VEC2", n3[n3.BOOL_VEC3 = 35672] = "BOOL_VEC3", n3[n3.BOOL_VEC4 = 35673] = "BOOL_VEC4", n3[n3.FLOAT_MAT2 = 35674] = "FLOAT_MAT2", n3[n3.FLOAT_MAT3 = 35675] = "FLOAT_MAT3", n3[n3.FLOAT_MAT4 = 35676] = "FLOAT_MAT4", n3[n3.SAMPLER_2D = 35677] = "SAMPLER_2D", n3[n3.SAMPLER_CUBE = 35678] = "SAMPLER_CUBE", n3[n3.FLOAT = 5126] = "FLOAT", n3[n3.INT = 5124] = "INT";
          }(P || (P = {}));
          var v, x = function(n3, e3, o3) {
            this.size = n3, this.type = e3, this.location = o3;
          }, T = function(n3, e3, o3) {
            this.size = n3, this.type = e3, this.location = o3;
          }, F = function() {
            function n3() {
            }
            return n3.getWebglVersion = function() {
              return f.get("webglVersion");
            }, n3.createCanvas = function() {
              return f.get("canvas") || document && document.createElement("canvas");
            }, n3.setWebglVersion = function(n4) {
              f.set("webglVersion", n4);
            }, n3.setWebGLRenderingContext = function(n4) {
              return this.gl = n4, n4;
            }, n3.getWebGLRenderingContext = function() {
              return this.gl ? this.gl : this.createWebGLRenderingContext();
            }, n3.createWebGLRenderingContext = function() {
              if (this.gl) return this.gl;
              var n4 = this.createCanvas();
              if (!n4) return null;
              n4.addEventListener && n4.addEventListener("webglcontextlost", function(n5) {
                throw n5.preventDefault(), Error("webgl context is lost~");
              }, false);
              var e3 = n4.getContext("webgl2", this.WEBGL_ATTRIBUTES);
              return e3 ? f.set("webglVersion", 2) : (f.set("webglVersion", 1), e3 = n4.getContext("webgl", this.WEBGL_ATTRIBUTES) || n4.getContext("experimental-webgl", this.WEBGL_ATTRIBUTES)), e3;
            }, n3.printStates = function(n4) {
              console.log("1. isBlendEnable = " + n4.isEnabled(n4.BLEND)), console.log("2. isCullFaceEnable = " + n4.isEnabled(n4.CULL_FACE)), console.log("3. isDepthTestEnable = " + n4.isEnabled(n4.DEPTH_TEST)), console.log("4. isDitherEnable = " + n4.isEnabled(n4.DITHER)), console.log("5. isPolygonOffsetFillEnable = " + n4.isEnabled(n4.POLYGON_OFFSET_FILL)), console.log("6. isSampleAlphtToCoverageEnable = " + n4.isEnabled(n4.SAMPLE_ALPHA_TO_COVERAGE)), console.log("7. isSampleCoverageEnable = " + n4.isEnabled(n4.SAMPLE_COVERAGE)), console.log("8. isScissorTestEnable = " + n4.isEnabled(n4.SCISSOR_TEST)), console.log("9. isStencilTestEnable = " + n4.isEnabled(n4.STENCIL_TEST));
            }, n3.printWebGLInfo = function(n4) {
              console.log("renderer = " + n4.getParameter(n4.RENDERER)), console.log("version = " + n4.getParameter(n4.VERSION)), console.log("vendor = " + n4.getParameter(n4.VENDOR)), console.log("glsl version = " + n4.getParameter(n4.SHADING_LANGUAGE_VERSION));
            }, n3.printWebGLTextureInfo = function(n4) {
              console.log("MAX_COMBINED_TEXTURE_IMAGE_UNITS = ", n4.getParameter(n4.MAX_COMBINED_TEXTURE_IMAGE_UNITS)), console.log("MAX_TEXTURE_IMAGE_UNITS = ", n4.getParameter(n4.MAX_TEXTURE_IMAGE_UNITS)), console.log("MAX_TEXTURE_SIZE = ", n4.getParameter(n4.MAX_TEXTURE_SIZE)), console.log("MAX_CUBE_MAP_TEXTURE_SIZE = ", n4.getParameter(n4.MAX_CUBE_MAP_TEXTURE_SIZE));
            }, n3.triggerContextLostEvent = function(n4) {
              var e3 = n4.getExtension("WEBGL_lose_context");
              null !== e3 && e3.loseContext();
            }, n3.checkGLError = function(n4) {
              var e3 = n4.getError();
              return 0 !== e3 && (console.log("WebGL Error NO: ", e3), true);
            }, n3.setDefaultState = function(n4) {
              n4.clearColor(0, 0, 0, 0), n4.clearDepth(1), n4.enable(n4.DEPTH_TEST), n4.enable(n4.CULL_FACE), n4.enable(n4.SCISSOR_TEST);
            }, n3.setViewport = function(n4, e3) {
              n4.viewport(e3[0], e3[1], e3[2], e3[3]);
            }, n3.initShader = function(n4, e3, o3) {
              var t2 = this.createShader(n4, e3);
              return this.compileShader(n4, o3, t2), t2;
            }, n3.createShader = function(n4, e3) {
              var o3;
              if (null === (o3 = e3 === m.VS_SHADER ? n4.createShader(n4.VERTEX_SHADER) : n4.createShader(n4.FRAGMENT_SHADER))) throw new Error("WebGLShader\u521B\u5EFA\u5931\u8D25\uFF01");
              return o3;
            }, n3.compileShader = function(n4, e3, o3) {
              return n4.shaderSource(o3, e3), n4.compileShader(o3), false !== n4.getShaderParameter(o3, n4.COMPILE_STATUS) || (console.error(n4.getShaderInfoLog(o3)), n4.deleteShader(o3), false);
            }, n3.createProgram = function(n4) {
              var e3 = n4.createProgram();
              if (null === e3) throw new Error("WebGLProgram\u521B\u5EFA\u5931\u8D25\uFF01");
              return e3;
            }, n3.linkProgram = function(n4, e3, o3, t2, r2, i2) {
              return void 0 === r2 && (r2 = null), void 0 === i2 && (i2 = null), n4.attachShader(e3, o3), n4.attachShader(e3, t2), null !== r2 && r2(n4, e3), n4.linkProgram(e3), false === n4.getProgramParameter(e3, n4.LINK_STATUS) ? (console.error(n4.getProgramInfoLog(e3)), n4.deleteShader(o3), n4.deleteShader(t2), n4.deleteProgram(e3), false) : (n4.validateProgram(e3), false === n4.getProgramParameter(e3, n4.VALIDATE_STATUS) ? (console.error(n4.getProgramInfoLog(e3)), n4.deleteShader(o3), n4.deleteShader(t2), n4.deleteProgram(e3), false) : (null !== i2 && i2(n4, e3), true));
            }, n3.getProgramActiveAttribs = function(n4, e3, o3) {
              for (var t2 = n4.getProgramParameter(e3, n4.ACTIVE_ATTRIBUTES), r2 = 0; r2 < t2; r2++) {
                var i2 = n4.getActiveAttrib(e3, r2);
                i2 && (o3[i2.name] = new T(i2.size, i2.type, n4.getAttribLocation(e3, i2.name)));
              }
            }, n3.getProgramAtciveUniforms = function(n4, e3, o3) {
              for (var t2 = n4.getProgramParameter(e3, n4.ACTIVE_UNIFORMS), r2 = 0; r2 < t2; r2++) {
                var i2 = n4.getActiveUniform(e3, r2);
                if (i2) {
                  var s2 = n4.getUniformLocation(e3, i2.name);
                  null !== s2 && (o3[i2.name] = new x(i2.size, i2.type, s2));
                }
              }
            }, n3.createBuffer = function(n4) {
              var e3 = n4.createBuffer();
              if (null === e3) throw new Error("WebGLBuffer\u521B\u5EFA\u5931\u8D25\uFF01");
              return e3;
            }, n3.getColorBufferData = function(n4) {
              var e3 = new Uint8Array(n4.drawingBufferWidth * n4.drawingBufferHeight * 4);
              return n4.readPixels(0, 0, n4.drawingBufferWidth, n4.drawingBufferHeight, n4.RGBA, n4.UNSIGNED_BYTE, e3), e3;
            }, n3.setUniformParam = function(n4, e3, o3, t2) {
              switch (o3) {
                case c.uniform1f:
                  n4.uniform1f(e3, t2);
                  break;
                case c.uniform1fv:
                  n4.uniform1fv(e3, t2);
                  break;
                case c.uniform1i:
                  n4.uniform1i(e3, t2);
                  break;
                case c.uniform1iv:
                  n4.uniform1iv(e3, t2);
                  break;
                case c.uniform2f:
                  n4.uniform2f(e3, t2[0], t2[1]);
                  break;
                case c.uniform2fv:
                  n4.uniform2fv(e3, t2);
                  break;
                case c.uniform2i:
                  n4.uniform2i(e3, t2[0], t2[1]);
                  break;
                case c.uniform2iv:
                  n4.uniform2iv(e3, t2);
                  break;
                case c.uniform3f:
                  n4.uniform3f(e3, t2[0], t2[1], t2[2]);
                  break;
                case c.uniform3fv:
                  n4.uniform3fv(e3, t2);
                  break;
                case c.uniform3i:
                  n4.uniform3i(e3, t2[0], t2[1], t2[2]);
                  break;
                case c.uniform3iv:
                  n4.uniform3iv(e3, t2);
                  break;
                case c.uniform4f:
                  n4.uniform4f(e3, t2[0], t2[1], t2[2], t2[3]);
                  break;
                case c.uniform4fv:
                  n4.uniform4fv(e3, t2);
                  break;
                case c.uniform4i:
                  n4.uniform4i(e3, t2[0], t2[1], t2[2], t2[3]);
                  break;
                case c.uniform4iv:
                  n4.uniform4iv(e3, t2);
                  break;
                default:
                  console.error("[" + o3 + "]: unknown uniform type");
              }
            }, n3.genTextureInfoFromTensorShape = function(n4, e3) {
              var o3 = n4 || 4096, t2 = e3.shape, r2 = void 0 === t2 ? [] : t2, i2 = r2[0], s2 = r2[1], a2 = r2[2], u2 = r2[3];
              if (i2 * a2 <= o3 && s2 * u2 <= o3) e3.shape_texture = [i2 * a2, s2 * u2];
              else {
                var l2 = function() {
                  for (var n5 = 0, e4 = 0, o4 = arguments.length; e4 < o4; e4++) n5 += arguments[e4].length;
                  var t3 = Array(n5), r3 = 0;
                  for (e4 = 0; e4 < o4; e4++) for (var i3 = arguments[e4], s3 = 0, a3 = i3.length; s3 < a3; s3++, r3++) t3[r3] = i3[s3];
                  return t3;
                }(r2).sort(function(n5, e4) {
                  return n5 - e4;
                }), c2 = l2[0], _2 = l2[1], g2 = l2[2], h2 = c2 * l2[3], d2 = _2 * g2;
                if (h2 > o3 || d2 > o3) {
                  var p2 = [h2, d2].sort(function(n5, e4) {
                    return n5 - e4;
                  }), m2 = p2[0], P2 = p2[1], v2 = function(n5, e4) {
                    var o4 = e4;
                    if (n5 % o4 == 0) return o4;
                    for (; o4 < n5 && n5 % o4 != 0; ) o4++;
                    return o4;
                  }(P2, Math.ceil(P2 / o3));
                  if (h2 = m2 * v2, d2 = Math.ceil(P2 / v2), f.get("debug") && console.error("\u5927\u5C0F\u8D85\u9650", r2, [d2, h2]), h2 > o3 || d2 > o3) throw new Error("Requested texture size [" + h2 + "x" + d2 + "] greater than WebGL maximum on this browser / GPU [" + o3 + "x" + o3 + "].");
                }
                e3.shape_texture = [d2, h2];
              }
            }, n3.WEBGL_ATTRIBUTES = { alpha: false, antialias: false, premultipliedAlpha: false, preserveDrawingBuffer: false, depth: false, stencil: false, failIfMajorPerformanceCaveat: true, powerPreference: "high-performance" }, n3.gl = null, n3;
          }();
          !function(n3) {
            n3[n3.GL_REPEAT = 0] = "GL_REPEAT", n3[n3.GL_MIRRORED_REPEAT = 1] = "GL_MIRRORED_REPEAT", n3[n3.GL_CLAMP_TO_EDGE = 2] = "GL_CLAMP_TO_EDGE";
          }(v || (v = {}));
          var b = function() {
            function n3() {
            }
            return n3.getTextureConfig = function(n4) {
              var e3, o3, t2, r2, i2, s2, a2, u2, l2 = n4, c2 = true, _2 = true;
              return 2 === f.get("webglVersion") ? (e3 = l2.getExtension("EXT_color_buffer_float"), t2 = l2.HALF_FLOAT, r2 = l2.R32F, i2 = l2.RGBA32F, s2 = l2.R16F, a2 = l2.RGBA16F, o3 = l2.RED, u2 = l2.RGBA32F) : (r2 = l2.RGBA, s2 = l2.RGBA, a2 = l2.RGBA, i2 = l2.RGBA, o3 = l2.RGBA, u2 = l2.RGBA, e3 = l2.getExtension("OES_texture_float"), t2 = l2.getExtension("OES_texture_half_float").HALF_FLOAT_OES, c2 = this.isDownloadFloatTextureEnabled(l2, u2), _2 = this.isFloatTextureReadPixelsEnabledMethod(l2, 1, c2)), { textureFloat: e3, textureHalfFloat: t2, internalFormat: r2, internalFormatPacked: i2, internalFormatHalfFloat: s2, internalFormatPackedHalfFloat: a2, textureFormat: o3, downloadInternalFormat: u2, frameBufferSupportFloat: c2, isFloatTextureReadPixelsEnabled: _2 };
            }, n3.isFloatTextureReadPixelsEnabledMethod = function(n4, e3, o3) {
              var t2 = n4;
              if (0 === e3) return false;
              if (1 === e3) {
                if (null == t2.getExtension("OES_texture_float")) return false;
              } else if (null == t2.getExtension("EXT_color_buffer_float") || null == t2.getExtension("EXT_color_buffer_half_float")) return false;
              var r2 = t2.createFramebuffer(), i2 = t2.createTexture();
              t2.bindTexture(t2.TEXTURE_2D, i2);
              var s2 = 2 === e3 ? t2.RGBA32F : t2.RGBA;
              t2.texImage2D(t2.TEXTURE_2D, 0, s2, 1, 1, 0, t2.RGBA, o3 ? t2.FLOAT : t2.getExtension("OES_texture_half_float").HALF_FLOAT_OES, null), t2.bindFramebuffer(t2.FRAMEBUFFER, r2), t2.framebufferTexture2D(t2.FRAMEBUFFER, t2.COLOR_ATTACHMENT0, t2.TEXTURE_2D, i2, 0);
              var a2 = t2.checkFramebufferStatus(t2.FRAMEBUFFER) === t2.FRAMEBUFFER_COMPLETE;
              t2.readPixels(0, 0, 1, 1, t2.RGBA, t2.FLOAT, new Float32Array(4));
              var u2 = t2.getError() === t2.NO_ERROR;
              return a2 && u2;
            }, n3.isDownloadFloatTextureEnabled = function(n4, e3) {
              var o3 = n4.createTexture();
              n4.bindTexture(n4.TEXTURE_2D, o3), n4.texImage2D(n4.TEXTURE_2D, 0, e3, 1, 1, 0, n4.RGBA, n4.FLOAT, null);
              var t2 = n4.createFramebuffer();
              n4.bindFramebuffer(n4.FRAMEBUFFER, t2), n4.framebufferTexture2D(n4.FRAMEBUFFER, n4.COLOR_ATTACHMENT0, n4.TEXTURE_2D, o3, 0);
              var r2 = n4.checkFramebufferStatus(n4.FRAMEBUFFER) === n4.FRAMEBUFFER_COMPLETE;
              return n4.bindTexture(n4.TEXTURE_2D, null), n4.bindFramebuffer(n4.FRAMEBUFFER, null), n4.deleteTexture(o3), n4.deleteFramebuffer(t2), r2;
            }, n3.uploadDataToTexture = function(n4, e3, o3, t2) {
              n4.texParameteri(n4.TEXTURE_2D, n4.TEXTURE_MAG_FILTER, n4.NEAREST), n4.texParameteri(n4.TEXTURE_2D, n4.TEXTURE_MIN_FILTER, n4.NEAREST), n4.texParameteri(n4.TEXTURE_2D, n4.TEXTURE_WRAP_S, n4.CLAMP_TO_EDGE), n4.texParameteri(n4.TEXTURE_2D, n4.TEXTURE_WRAP_T, n4.CLAMP_TO_EDGE);
              var r2 = o3.width_texture, i2 = o3.height_texture, s2 = o3.data, a2 = n4.RGBA, u2 = n4.RGBA, l2 = n4.FLOAT, c2 = s2;
              if (s2 instanceof Uint8Array || s2 instanceof Uint8ClampedArray) l2 = n4.UNSIGNED_BYTE;
              else {
                if (!(s2 instanceof Float32Array || s2 instanceof Array)) return void n4.texImage2D(n4.TEXTURE_2D, 0, n4.RGBA, n4.RGBA, n4.UNSIGNED_BYTE, s2);
                if (2 === f.get("webglVersion")) {
                  var _2 = f.get("webgl_force_half_float_texture");
                  a2 = t2 ? _2 ? e3.internalFormatPackedHalfFloat : e3.internalFormatPacked : _2 ? e3.internalFormatHalfFloat : e3.internalFormat, u2 = t2 ? n4.RGBA : e3.textureFormat;
                } else {
                  for (var g2 = new Float32Array(r2 * i2 * 4), h2 = 0; h2 < s2.length; h2++) t2 ? g2[h2] = s2[h2] : (g2[4 * h2] = s2[h2], g2[4 * h2 + 1] = 0, g2[4 * h2 + 2] = 0, g2[4 * h2 + 3] = 0);
                  c2 = g2;
                }
              }
              n4.texImage2D(n4.TEXTURE_2D, 0, a2, r2, i2, 0, u2, l2, c2);
            }, n3.genOutputTexture = function(n4, e3, o3, t2) {
              var r2 = o3.interpType, i2 = o3.width_texture, s2 = o3.height_texture, a2 = n4.createTexture();
              n4.bindTexture(n4.TEXTURE_2D, a2), n4.texParameteri(n4.TEXTURE_2D, n4.TEXTURE_MAG_FILTER, "LINEAR" === r2 ? n4.LINEAR : n4.NEAREST), n4.texParameteri(n4.TEXTURE_2D, n4.TEXTURE_MIN_FILTER, "LINEAR" === r2 ? n4.LINEAR : n4.NEAREST), n4.texParameteri(n4.TEXTURE_2D, n4.TEXTURE_WRAP_S, n4.CLAMP_TO_EDGE), n4.texParameteri(n4.TEXTURE_2D, n4.TEXTURE_WRAP_T, n4.CLAMP_TO_EDGE);
              var u2 = f.get("webgl_force_half_float_texture"), l2 = u2 ? e3.internalFormatPackedHalfFloat : e3.internalFormatPacked, c2 = 2 === f.get("webglVersion") ? u2 ? n4.HALF_FLOAT : n4.FLOAT : e3.frameBufferSupportFloat ? n4.FLOAT : e3.textureHalfFloat, _2 = t2 ? e3.isFloatTextureReadPixelsEnabled ? c2 : n4.UNSIGNED_BYTE : null;
              return n4.texImage2D(n4.TEXTURE_2D, 0, l2, i2, s2, 0, n4.RGBA, t2 ? _2 : c2, null), n4.bindTexture(n4.TEXTURE_2D, null), a2;
            }, n3;
          }(), y = ["\n    precision highp float;\n    precision highp int;\n\n    attribute vec4 position;\n    varying vec2 vCoord;\n\n    void main() {\n        vCoord.x = (position.x + 1.0) / 2.0;\n        vCoord.y = (position.y + 1.0) / 2.0;\n        gl_Position = position;\n    }\n    ", "#version 300 es\n    in vec4 position;\n    out vec2 vCoord;\n\n    void main() {\n        vCoord.x = (position.x + 1.0) / 2.0;\n        vCoord.y = (position.y + 1.0) / 2.0;\n        gl_Position = position;\n    }\n    "], E = new Float32Array([-1, 1, -1, -1, 1, 1, 1, -1]), w = ["length_shape", "length_unformatted_shape", "width_shape", "height_shape", "width_texture", "height_texture", "offset_x", "offset_y", "channel", "total_shape", "numbers_shape"], V = { float: ["multi_value", "bias_value"], bool: ["fuse_relu"] };
          function A() {
            return "\n    " + (f.get("useModAdaptor") ? "\n            int calMod(int a, int b) {\n                float modV = mod(float(a), float(b));\n                if (modV == float(b)) {\n                    modV = 0.0;\n                }\n                return int(modV);\n            }\n        " : "\n            int calMod(int a, int b) {\n                return a - a / b * b;\n            }\n        ") + "\n    " + (f.get("useDivisionAdaptor") ? "\n            int calDivision(int a, int b) {\n                return int(float(a) / (float(b) - 0.0001));\n            }\n        " : "\n            int calDivision(int a, int b) {\n                return a / b;\n            }\n        ") + "\n    \n    float tanh_calc(float num) {\n        float res = (exp(2.0 * num) - 1.0) / (exp(2.0 * num) + 1.0);\n        return res;\n    }\n    \n    ";
          }
          const O = "\nivec4 transferFromNHWCtoNCHW(\n    int sumVal,\n    const int channel,\n    const int width_shape,\n    const int height_shape,\n    const int total_shape) {\n\n    int n_origin = int(total_shape/(channel * width_shape * height_shape));\n    int new_a = calMod(sumVal, width_shape);\n    sumVal = int((sumVal - new_a) / width_shape);\n    int new_b = calMod(sumVal, height_shape);\n    sumVal = int((sumVal - new_b) / height_shape);\n    int new_g = calMod(sumVal, channel);\n    sumVal = int((sumVal - new_g) / channel);\n    int new_r = calMod(sumVal, n_origin);\n    return ivec4(new_r,new_g,new_b,new_a);\n}\n";
          var C = "\nfloat prelu(float x, float p, float b) {\n    float result = x;\n    if (x < 0.0) {\n        result = x * p;\n    }\n\n    return result;\n}", R = "\nfloat relu6(float x, float threshold, float b) {\n    float result = min(max(0.0, x), threshold);\n    return result;\n}", S = "\nfloat leakyRelu(float x, float p, float b) {\n    float result = max(x, x * p);\n    return result;\n}", I = "\nfloat scale(float x, float p, float b) {\n    float result = p * x + b;\n    return result;\n}", L = "\nfloat scaleWidthBias(float x, float p, float b) {\n    float result = p * (x + b);\n    return result;\n}", k = "\nfloat sigmoid(float x, float y, float z) {\n    float result = 1.0 / (1.0 + exp(-x));\n    return result;\n}", B = "\n    float hardSigmoid(float x, float slope, float offset) {\n        float result = max(0.0, min(1.0, slope * x + offset));\n        return result;\n    }\n", M = "\n    float sqrt(float x, float slope, float offset) {\n        return sqrt(x);\n    }\n", D = "\n    float pow_func(float x, float factor, float offset) {\n        return pow(x, factor);\n    }\n", U = "\nfloat tanh_func(float x, float y, float z) {\n    return tanh_calc(x);\n}", j = "\nfloat exp_func(float x, float y, float z) {\n    float result = exp(x);\n    return result;\n}";
          function N(n3, e3) {
            var o3 = e3.width_shape, t2 = e3.height_shape, r2 = e3.channel, i2 = e3.width_texture;
            return "\n    float getValueFromTensorPos_" + n3 + "(int n, int c, int h, int w) {\n        int index = n * " + o3 * t2 * r2 + " + c * " + o3 * t2 + " + h * " + o3 + " + w;\n        // 0.01 hack: \u5728 PC/WISE \u673A\u5668\u4E0A\uFF0C\u51FA\u73B0\u67D0\u4E2A\u503C\uFF08\u6BD4\u5982 index \u4E3A 3520\uFF09 float(index) \u548C float(3520) \u8FD4\u56DE\u503C\u4E0D\u540C\u7684\u60C5\u51B5\uFF0C\u76EE\u524D +0.01 hack\n        int pos_w = int(mod(float(index) + 0.01, float(" + i2 + ")));\n        int pos_h = index / int(" + i2 + ");\n        vec4 pixels = TEXTURE2D(texture_" + n3 + ",\n            vec2(\n                (float(pos_w)  + 0.5) / float(" + i2 + "),\n                (float(pos_h) + 0.5) / float(" + e3.height_texture + ")\n            )\n        );\n        return pixels.r;\n    }";
          }
          function X(n3, e3) {
            var o3 = e3.channel, t2 = e3.height_shape, r2 = e3.width_texture, i2 = e3.height_texture, s2 = e3.width_shape;
            return "\n    vec4 getValueFromTensorPosPacking_" + n3 + "(int n, int c, int h, int w) {\n        int index = n * " + s2 * t2 * o3 + " + c * " + s2 * t2 + " + h * " + s2 + " + w;\n        // 0.01 hack: \u5728 PC/WISE \u8BBE\u5907\u4E0A\uFF0C\u51FA\u73B0\u67D0\u4E2A\u503C\uFF08\u6BD4\u5982 index \u4E3A 3520\uFF09 float(index) \u548C float(3520) \u8FD4\u56DE\u503C\u4E0D\u540C\u7684\u60C5\u51B5\uFF0C\u76EE\u524D +0.01 hack\n        int pos_w = int(mod(float(index) + 0.01, float(" + r2 + ")));\n        int pos_h = index / int(" + r2 + ");\n        vec4 pixels = TEXTURE2D(texture_" + n3 + ",\n            vec2(\n                (float(pos_w)  + 0.5) / float(" + r2 + "),\n                (float(pos_h) + 0.5) / float(" + i2 + ")\n            )\n        );\n        return pixels;\n    }";
          }
          function G(n3, e3) {
            var o3 = e3.numbers_shape, t2 = e3.length_shape;
            if (1 === t2) return "\n            int getTensorPosFromArrayIndex_" + n3 + "(int n) {\n                return calMod(n, " + o3[0] + ");\n            }\n        ";
            for (var r2 = "ivec" + t2 + "(" + o3.join(", ") + ")", i2 = "pos[0] = n / " + o3[0] + ";", s2 = 1; s2 < t2; s2++) i2 += "\n            n = calMod(n, " + o3[s2 - 1] + ");\n            pos[" + s2 + "] = calDivision(n, " + o3[s2] + ");\n        ";
            return "\n    ivec" + t2 + " shapeVec_" + n3 + " = " + r2 + ";\n    ivec" + t2 + " getTensorPosFromArrayIndex_" + n3 + "(int n) {\n        ivec" + t2 + " pos;\n        " + i2 + "\n        return pos;\n    }\n    ";
          }
          function H(n3) {
            return "\n    #define getPixelsFromTexturePos_" + n3 + "(pos) TEXTURE2D(texture_" + n3 + ", pos)\n    ";
          }
          function W(n3, e3) {
            return "\n    vec2 moveTexture2PosToReal_" + n3 + "(vec2 v) {\n        vec2 v2;\n        v2.x = v.x * float(" + e3.width_texture + ");\n        v2.y = v.y * float(" + e3.height_texture + ");\n        return v2;\n    }\n    ";
          }
          function z(n3) {
            return "uniform sampler2D texture_" + n3 + ";";
          }
          function Y(n3, e3, o3, t2, s2) {
            var a2, u2, l2 = "", c2 = e3.name, _2 = e3.mainFunc, g2 = e3.textureFuncConf, h2 = void 0 === g2 ? {} : g2, d2 = e3.commonFuncConf;
            try {
              var p2 = function(n4, e4, o4) {
                for (var t3 = {}, r2 = Object.assign({}, e4), i2 = [], s3 = 0, a3 = n4; s3 < a3.length; s3++) {
                  for (var u3 = a3[s3], l3 = u3.name, f2 = {}, c3 = 0, _3 = w; c3 < _3.length; c3++) void 0 !== u3[P3 = _3[c3]] && (f2[P3] = u3[P3]);
                  t3[l3] = f2, i2.push(l3);
                }
                for (var g3 = 0, h3 = Object.keys(V); g3 < h3.length; g3++) for (var d3 = h3[g3], p3 = 0, m3 = V[d3]; p3 < m3.length; p3++) {
                  var P3;
                  void 0 !== e4[P3 = m3[p3]] && (r2[P3] = d3 + "(" + e4[P3] + ")");
                }
                return e4.active_function && (r2.active_function = e4.active_function), r2.runtime = o4, { textureParams: t3, opParams: r2, active_function: e4.active_function };
              }(o3, t2, s2), m2 = p2.textureParams, P2 = p2.opParams, v2 = p2.active_function, x2 = 2 === f.get("webglVersion") ? " #version 300 es\n            #ifdef GL_FRAGMENT_PRECISION_HIGH\n            precision highp float;\n            precision highp int;\n        #else\n            precision mediump float;\n            precision mediump int;\n        #endif      \n        " : " #ifdef GL_FRAGMENT_PRECISION_HIGH\n            precision highp float;\n            precision highp int;\n        #else\n            precision highp float;\n            precision highp int;\n        #endif\n        ", T2 = function(n4) {
                var e4 = n4.frameBufferSupportFloat, o4 = n4.isFinalOp, t3 = n4.isFloatTextureReadPixelsEnabled;
                return 2 === f.get("webglVersion") ? "\n        // \u9876\u70B9shader\u900F\u4F20\u7684\u6750\u8D28\u5750\u6807\n        in vec2 vCoord;\n        out vec4 outColor;\n        void setOutput(float result) {\n            result = fuse_op(result);\n            outColor.r = result;\n        }\n        void setPackedOutput(vec4 result) {\n            outColor = result;\n        }\n        int calCeil(int a, int b) {\n            return int(ceil(float(a) / float(b)));\n        }\n        " + A() + "\n    " : e4 ? "\n            varying vec2 vCoord;\n            varying vec4 outColor;\n            void setOutput(float result) {\n                result = fuse_op(result);\n                gl_FragColor.r = result;\n            }\n            void setPackedOutput(vec4 result) {\n                gl_FragColor = result;\n            }\n            int calCeil(int a, int b) {\n                return int(ceil(float(a) / float(b)));\n            }\n            " + A() + "\n    " : o4 && !t3 ? "\n        varying vec2 vCoord;\n        varying vec4 outColor;\n\n        const float FLOAT_MAX = 1.70141184e38;\n        const float FLOAT_MIN = 1.17549435e-38;\n\n        #define isnan(value) isnan_custom(value)\n        bool isnan_custom(float val) {\n            return (val > 0. || val < 1. || val == 0.) ? false : true;\n        }\n\n        " + A() + "\n\n        int calCeil(int a, int b) {\n            return int(ceil(float(a) / float(b)));\n        }\n\n        lowp vec4 encode_float(highp float v) {\n            if (isnan(v)) {\n            return vec4(255, 255, 255, 255);\n            }\n\n            highp float av = abs(v);\n\n            if(av < FLOAT_MIN) {\n            return vec4(0.0, 0.0, 0.0, 0.0);\n            } else if(v > FLOAT_MAX) {\n            return vec4(0.0, 0.0, 128.0, 127.0) / 255.0;\n            } else if(v < -FLOAT_MAX) {\n            return vec4(0.0, 0.0,  128.0, 255.0) / 255.0;\n            }\n\n            highp vec4 c = vec4(0,0,0,0);\n\n            highp float e = floor(log2(av));\n            highp float m = exp2(fract(log2(av))) - 1.0;\n\n            c[2] = floor(128.0 * m);\n            m -= c[2] / 128.0;\n            c[1] = floor(32768.0 * m);\n            m -= c[1] / 32768.0;\n            c[0] = floor(8388608.0 * m);\n\n            highp float ebias = e + 127.0;\n            c[3] = floor(ebias / 2.0);\n            ebias -= c[3] * 2.0;\n            c[2] += floor(ebias) * 128.0;\n\n            c[3] += 128.0 * step(0.0, -v);\n\n            return c / 255.0;\n        }\n\n        void setOutput(float result) {\n                result = fuse_op(result);\n                gl_FragColor = encode_float(result);\n        }\n        " : "\n            #define isnan(value) isnan_custom(value)\n            bool isnan_custom(float val) {\n                return (val > 0. || val < 1. || val == 0.) ? false : true;\n            }\n\n            varying vec2 vCoord;\n            varying vec4 outColor;\n            void setOutput(float result) {\n                result = fuse_op(result);\n                if(isnan(result)) {\n                    gl_FragColor.r = 0.0;\n                }else {\n                    gl_FragColor.r = result;\n                }\n            }\n\n            void setPackedOutput(vec4 result) {\n                gl_FragColor = result;\n            }\n\n            " + A() + "\n\n            int calCeil(int a, int b) {\n                return int(ceil(float(a) / float(b)));\n            }\n        ";
              }(n3), F2 = function(n4) {
                var e4 = "", o4 = "";
                if (n4.fuse_opt) for (var t3 in n4.fuse_opt) {
                  var i2 = t3, s3 = 0, a3 = 0;
                  switch (t3) {
                    case "scale":
                      var u3 = n4.fuse_opt.scale.bias_after_scale;
                      s3 = void 0 !== (f2 = n4.fuse_opt.scale.scale) ? f2 : 1, a3 = n4.fuse_opt.scale.bias || 0, false === u3 && void 0 !== u3 && (i2 = "scaleWidthBias");
                      break;
                    case "relu":
                      i2 = "prelu";
                      break;
                    case "relu6":
                      s3 = n4.fuse_opt[t3].threshold;
                      break;
                    case "hard_sigmoid":
                      i2 = "hardSigmoid", s3 = n4.fuse_opt[t3].slope || 0.2, a3 = n4.fuse_opt[t3].offset || 0.5;
                      break;
                    case "leakyRelu":
                      s3 = n4.fuse_opt[t3].alpha;
                      break;
                    case "pow":
                      i2 = "pow_func", s3 = n4.fuse_opt[t3].factor || 2;
                      break;
                    case "tanh":
                      i2 = "tanh_func";
                      break;
                    case "exp":
                      i2 = "exp_func";
                  }
                  if ("hard_swish" === t3) {
                    var l3 = void 0 !== n4.fuse_opt.hard_swish.offset ? n4.fuse_opt.hard_swish.offset : 3, f2 = void 0 !== n4.fuse_opt.hard_swish.scale ? n4.fuse_opt.hard_swish.scale : 6;
                    o4 += "res = res * min(max(0.0, res + float(" + l3 + ")), float(" + (void 0 !== n4.fuse_opt.hard_swish.threshold ? n4.fuse_opt.hard_swish.threshold : 6) + ")) / float(" + f2 + ");";
                  } else "dropout" === t3 ? o4 += "\n                if (" + ("downgrade_in_infer" === n4.fuse_opt.dropout.dropout_implementation) + ") {\n                    res = res * (1.0 - float(" + n4.fuse_opt.dropout.dropout_prob + "));\n                }" : (e4 += r[i2], o4 += "res = " + i2 + "(res, float(" + s3 + "), float(" + a3 + "));");
                }
                return "\n        " + e4 + "\n        \n        float fuse_op(float x) {\n            float res = x;\n            " + o4 + "\n            return res;\n        }\n    ";
              }(P2), b2 = function(n4, e4, o4, t3) {
                if (!n4) return "";
                var r2 = Object.assign({}, n4);
                r2["@all"] && function(n5, e5) {
                  var o5 = e5.filter(function(n6) {
                    return "out" !== n6.name;
                  }), t4 = n5["@all"];
                  o5.forEach(function(e6) {
                    var o6 = e6.name;
                    n5[o6] ? n5[o6].concat(t4) : n5[o6] = t4;
                  }), delete n5["@all"];
                }(r2, t3);
                for (var s3 = "", a3 = "", u3 = 0, l3 = Object.keys(r2); u3 < l3.length; u3++) {
                  var f2 = l3[u3];
                  if (e4[f2]) {
                    a3 += z(f2);
                    for (var c3 = 0, _3 = r2[f2]; c3 < _3.length; c3++) {
                      var g3 = _3[c3];
                      if (i[g3]) try {
                        s3 += i[g3](f2, e4[f2], o4);
                      } catch (n5) {
                        console.error(n5);
                      }
                    }
                  }
                }
                return "\n    " + a3 + "\n    " + s3 + "\n    ";
              }(h2, m2, P2, o3), y2 = function(n4) {
                return void 0 === n4 ? "" : "\n        int layer_run_time = " + n4 + ";\n    ";
              }(s2), E2 = function(n4) {
                var e4, o4, t3, r2, i2;
                return "\n        \n    vec2 _2d_shape_texture_out = vec2(float(" + n4.width_texture + "), float(" + n4.height_texture + "));\n    \n        " + (o4 = (e4 = n4).height_shape, t3 = e4.width_shape, "\n    ivec4 getOutputTensorPos() {\n        vec2 outCoord = vCoord.xy * (_2d_shape_texture_out);\n        int index = int(outCoord.x) + int(outCoord.y) * int(" + e4.width_texture + ");\n\n        int n1 = int(index / " + (r2 = t3 * o4 * e4.channel) + ");\n        int c1 = int(calMod(index, " + r2 + ") / " + (i2 = t3 * o4) + ");\n        int h1 = int(calMod(index, " + i2 + ") / " + t3 + ");\n        int w1 = calMod(index, " + t3 + ");\n        return ivec4(n1, c1, h1, w1);\n    }\n    \n    ");
              }(m2.out), O2 = function(n4) {
                if (!n4) return "";
                for (var e4 = "", o4 = 0, t3 = n4; o4 < t3.length; o4++) {
                  var i2 = t3[o4];
                  r[i2] && (e4 += r[i2]);
                }
                return e4;
              }(d2);
              a2 = l2 = " " + x2 + "\n            " + F2 + "\n            " + T2 + "\n            " + O2 + "\n            " + (v2 ? r[v2] : "") + "\n            " + b2 + "\n            " + y2 + "\n            " + E2 + "\n            " + _2(m2, P2) + "\n        ", u2 = 1 === f.get("webglVersion") ? "texture2D" : "texture", l2 = a2.replace(/\bTEXTURE2D\b/g, u2);
            } catch (n4) {
              console.error("[" + c2 + "]: " + n4);
            }
            return l2;
          }
          const q = function() {
            function n3(n4, e3, o3, t2) {
              var r2 = n4;
              this.vShader = e3;
              try {
                this.fShader = this.initShader(r2, o3, "fragment"), this.shape = t2 && t2.shape;
                var i2 = this.program = r2.createProgram();
                r2.attachShader(i2, this.vShader), r2.attachShader(i2, this.fShader), r2.linkProgram(i2);
              } catch (n5) {
                throw new Error(n5);
              }
            }
            return n3.prototype.initShader = function(n4, e3, o3) {
              void 0 === o3 && (o3 = "vertex");
              var t2, r2 = "vertex" === o3 ? n4.VERTEX_SHADER : n4.FRAGMENT_SHADER;
              if ("vertex" === o3 && this.vShader) t2 = this.vShader;
              else if (t2 = n4.createShader(r2), "vertex" === o3 && (this.vShader = t2), n4.shaderSource(t2, e3), n4.compileShader(t2), !n4.getShaderParameter(t2, n4.COMPILE_STATUS)) throw new Error("compile: " + n4.getShaderInfoLog(t2));
              return t2;
            }, n3.prototype.setProgram = function(n4, e3, o3) {
              n4.useProgram(this.program), o3 || this.runVertexShader(n4, e3);
            }, n3.prototype.runVertexShader = function(n4, e3) {
              var o3 = n4.getAttribLocation(this.program, "position");
              n4.enableVertexAttribArray(o3), n4.bindBuffer(n4.ARRAY_BUFFER, e3), n4.vertexAttribPointer(o3, 2, n4.FLOAT, false, 0, 0);
            }, n3.Sampler = "uSampler", n3;
          }();
          var Z, K = (Z = function(n3, e3) {
            return (Z = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(n4, e4) {
              n4.__proto__ = e4;
            } || function(n4, e4) {
              for (var o3 in e4) Object.prototype.hasOwnProperty.call(e4, o3) && (n4[o3] = e4[o3]);
            })(n3, e3);
          }, function(n3, e3) {
            function o3() {
              this.constructor = n3;
            }
            Z(n3, e3), n3.prototype = null === e3 ? Object.create(e3) : (o3.prototype = e3.prototype, new o3());
          }), Q = function(n3, e3, o3, t2) {
            return new (o3 || (o3 = Promise))(function(r2, i2) {
              function s2(n4) {
                try {
                  u2(t2.next(n4));
                } catch (n5) {
                  i2(n5);
                }
              }
              function a2(n4) {
                try {
                  u2(t2.throw(n4));
                } catch (n5) {
                  i2(n5);
                }
              }
              function u2(n4) {
                var e4;
                n4.done ? r2(n4.value) : (e4 = n4.value, e4 instanceof o3 ? e4 : new o3(function(n5) {
                  n5(e4);
                })).then(s2, a2);
              }
              u2((t2 = t2.apply(n3, e3 || [])).next());
            });
          }, J = function(n3, e3) {
            var o3, t2, r2, i2, s2 = { label: 0, sent: function() {
              if (1 & r2[0]) throw r2[1];
              return r2[1];
            }, trys: [], ops: [] };
            return i2 = { next: a2(0), throw: a2(1), return: a2(2) }, "function" == typeof Symbol && (i2[Symbol.iterator] = function() {
              return this;
            }), i2;
            function a2(i3) {
              return function(a3) {
                return function(i4) {
                  if (o3) throw new TypeError("Generator is already executing.");
                  for (; s2; ) try {
                    if (o3 = 1, t2 && (r2 = 2 & i4[0] ? t2.return : i4[0] ? t2.throw || ((r2 = t2.return) && r2.call(t2), 0) : t2.next) && !(r2 = r2.call(t2, i4[1])).done) return r2;
                    switch (t2 = 0, r2 && (i4 = [2 & i4[0], r2.value]), i4[0]) {
                      case 0:
                      case 1:
                        r2 = i4;
                        break;
                      case 4:
                        return s2.label++, { value: i4[1], done: false };
                      case 5:
                        s2.label++, t2 = i4[1], i4 = [0];
                        continue;
                      case 7:
                        i4 = s2.ops.pop(), s2.trys.pop();
                        continue;
                      default:
                        if (!((r2 = (r2 = s2.trys).length > 0 && r2[r2.length - 1]) || 6 !== i4[0] && 2 !== i4[0])) {
                          s2 = 0;
                          continue;
                        }
                        if (3 === i4[0] && (!r2 || i4[1] > r2[0] && i4[1] < r2[3])) {
                          s2.label = i4[1];
                          break;
                        }
                        if (6 === i4[0] && s2.label < r2[1]) {
                          s2.label = r2[1], r2 = i4;
                          break;
                        }
                        if (r2 && s2.label < r2[2]) {
                          s2.label = r2[2], s2.ops.push(i4);
                          break;
                        }
                        r2[2] && s2.ops.pop(), s2.trys.pop();
                        continue;
                    }
                    i4 = e3.call(n3, s2);
                  } catch (n4) {
                    i4 = [6, n4], t2 = 0;
                  } finally {
                    o3 = r2 = 0;
                  }
                  if (5 & i4[0]) throw i4[1];
                  return { value: i4[0] ? i4[1] : void 0, done: true };
                }([i3, a3]);
              };
            }
          };
          const $ = function(n3) {
            function e3() {
              var e4 = n3.call(this) || this;
              return e4.cacheTextures = {}, e4.uniformLocations = {}, e4.texturesMap = {}, e4.queryList = [], e4.currentTexture = null, e4.width_shape_out = 1, e4.height_shape_out = 1, e4.width_texture_out = 1, e4.height_texture_out = 1, e4.channel = 0, e4.total_shape = 0, e4;
            }
            return K(e3, n3), e3.prototype.init = function() {
              return Q(this, void 0, void 0, function() {
                var n4;
                return J(this, function(e4) {
                  return n4 = this.gl = F.createWebGLRenderingContext(), this.gl ? (this.glVersion = F.getWebglVersion(), this.textureConf = b.getTextureConfig(n4), this.MAX_TEXTURE_SIZE = f.get("MAX_TEXTURE_SIZE") || n4.getParameter(n4.MAX_TEXTURE_SIZE), n4.disable(n4.DEPTH_TEST), n4.disable(n4.STENCIL_TEST), n4.disable(n4.BLEND), n4.disable(n4.DITHER), n4.disable(n4.POLYGON_OFFSET_FILL), n4.disable(n4.SAMPLE_COVERAGE), n4.enable(n4.SCISSOR_TEST), n4.enable(n4.CULL_FACE), n4.cullFace(n4.BACK), this.vertexBuffer = n4.createBuffer(), n4.bindBuffer(n4.ARRAY_BUFFER, this.vertexBuffer), n4.bufferData(n4.ARRAY_BUFFER, E, n4.STATIC_DRAW), this.vShader = F.initShader(n4, m.VS_SHADER, y[this.glVersion - 1]), this.frameBuffer = n4.createFramebuffer(), n4.bindFramebuffer(n4.FRAMEBUFFER, this.frameBuffer), this.pbo = n4.createBuffer(), [2]) : [2];
                });
              });
            }, e3.prototype.createProgram = function(n4) {
              var e4 = this, o3 = n4.op, t2 = n4.outTensor, r2 = n4.inputTensors, i2 = n4.shaderParams, s2 = n4.runtime, a2 = n4.isFinalOp, u2 = null;
              try {
                var l2 = function() {
                  for (var n5 = 0, e5 = 0, o4 = arguments.length; e5 < o4; e5++) n5 += arguments[e5].length;
                  var t3 = Array(n5), r3 = 0;
                  for (e5 = 0; e5 < o4; e5++) for (var i3 = arguments[e5], s3 = 0, a3 = i3.length; s3 < a3; s3++, r3++) t3[r3] = i3[s3];
                  return t3;
                }([t2], r2);
                l2.forEach(function(n5) {
                  return F.genTextureInfoFromTensorShape(e4.MAX_TEXTURE_SIZE, n5);
                });
                var f2 = Y(this.textureConf, o3, l2, i2, s2);
                (u2 = new q(this.gl, this.vShader, f2, t2)).fsCode = f2;
                var c2 = b.genOutputTexture(this.gl, this.textureConf, t2, a2);
                this.texturesMap[t2.tensorId] = c2, this.program = u2;
              } catch (n5) {
                console.error("webgl createProgram: " + o3.name + " -- " + n5);
              }
              return u2;
            }, e3.prototype.runProgram = function(n4, e4) {
              var o3 = this, t2 = function(n5, e5) {
                if (2 === e5 && f.get("performance")) {
                  var o4 = n5.getExtension("EXT_disjoint_timer_query_webgl2");
                  if (!o4) return;
                  var t3 = n5.createQuery();
                  return n5.beginQuery(o4.TIME_ELAPSED_EXT, t3), t3;
                }
                return null;
              }(this.gl, this.glVersion), r2 = n4.isPackedOp;
              n4.program.forEach(function(t3, i2) {
                var s2 = n4.outputTensors[i2], a2 = s2.tensorId;
                o3.setOutProps(s2), "frameBuffer" === n4.bufferType ? o3.attachFrameBuffer(a2) : o3.attachColorBuffer(), t3.setProgram(o3.gl, o3.vertexBuffer, e4), o3.program = t3, o3.render(n4, e4, i2, r2);
              }), n4.tensorData = null, t2 && (this.queryList.push({ name: n4.name, query: t2, count: 1 }), t2 = function(n5, e5, o4) {
                if (2 === e5 && f.get("performance")) {
                  var t3 = n5.getExtension("EXT_disjoint_timer_query_webgl2");
                  if (!t3) return;
                  n5.endQuery(t3.TIME_ELAPSED_EXT);
                }
                return o4;
              }(this.gl, this.glVersion, t2));
            }, e3.prototype.read = function(n4) {
              return Q(this, void 0, void 0, function() {
                var e4, o3, t2;
                return J(this, function(r2) {
                  switch (r2.label) {
                    case 0:
                      return f.get("webgl_gpu_pipeline") ? (e4 = this.gl, this.frameBuffer = e4.createFramebuffer(), e4.bindFramebuffer(e4.FRAMEBUFFER, this.frameBuffer), [2, []]) : (o3 = this.createPBO(), [4, this.createAndWaitForFence()]);
                    case 1:
                      return r2.sent(), t2 = n4 ? n4.shape : [], [2, this.downloadFloat32TensorFromBuffer(o3, t2)];
                  }
                });
              });
            }, e3.prototype.createPBO = function() {
              var n4, e4 = this.textureConf;
              if (2 === this.glVersion) {
                var o3 = this.gl, t2 = this.pbo;
                o3.bindBuffer(o3.PIXEL_PACK_BUFFER, t2);
                var r2 = 16 * this.width_texture_out * this.height_texture_out;
                return o3.bufferData(o3.PIXEL_PACK_BUFFER, r2, o3.STREAM_READ), o3.readPixels(0, 0, this.width_texture_out, this.height_texture_out, o3.RGBA, o3.FLOAT, 0), o3.bindBuffer(o3.PIXEL_PACK_BUFFER, null), t2;
              }
              var i2 = this.gl, s2 = i2.FLOAT;
              return e4.isFloatTextureReadPixelsEnabled ? n4 = new Float32Array(this.width_texture_out * this.height_texture_out * 4) : (n4 = new Uint8Array(this.width_texture_out * this.height_texture_out * 4), s2 = i2.UNSIGNED_BYTE), i2.readPixels(0, 0, this.width_texture_out, this.height_texture_out, i2.RGBA, s2, n4), e4.isFloatTextureReadPixelsEnabled ? n4 : new Float32Array(n4.buffer);
            }, e3.prototype.createAndWaitForFence = function() {
              return Q(this, void 0, void 0, function() {
                var n4, e4, o3, t2, r2 = this;
                return J(this, function(i2) {
                  return n4 = this.gl, e4 = null != n4.fenceSync, o3 = function() {
                    return true;
                  }, e4 && (t2 = n4.fenceSync(n4.SYNC_GPU_COMMANDS_COMPLETE, 0), n4.flush(), o3 = function() {
                    var e5 = n4.clientWaitSync(t2, 0, 0);
                    return e5 === n4.ALREADY_SIGNALED || e5 === n4.CONDITION_SATISFIED;
                  }), [2, new Promise(function(n5) {
                    r2.pollItem(o3, n5);
                  })];
                });
              });
            }, e3.prototype.pollItem = function(n4, e4) {
              var o3 = function() {
                n4() ? e4() : setTimeout(o3, 1);
              };
              o3();
            }, e3.prototype.downloadFloat32TensorFromBuffer = function(n4, e4) {
              var o3 = 4 * this.width_texture_out * this.height_texture_out;
              if (2 === this.glVersion) {
                var t2 = this.gl, r2 = new Float32Array(o3);
                t2.bindBuffer(t2.PIXEL_PACK_BUFFER, n4), t2.getBufferSubData(t2.PIXEL_PACK_BUFFER, 0, r2), t2.bindBuffer(t2.PIXEL_PACK_BUFFER, null);
                var i2 = [];
                if (f.get("webgl_pack_output")) return Array.from(r2).slice(0, function(n5) {
                  return n5.reduce(function(n6, e5) {
                    return n6 * e5;
                  }, 1);
                }(e4));
                for (var s2 = 0; s2 < this.width_texture_out * this.height_texture_out; s2++) i2.push(r2[4 * s2]);
                return i2;
              }
              var a2 = n4, u2 = [];
              for (s2 = 0; s2 < this.width_texture_out * this.height_texture_out; s2++) {
                var l2 = this.textureConf.isFloatTextureReadPixelsEnabled ? 4 * s2 : s2;
                u2.push(a2[l2]);
              }
              return u2;
            }, e3.prototype.setOutProps = function(n4) {
              var e4 = n4.width_shape, o3 = void 0 === e4 ? 1 : e4, t2 = n4.height_shape, r2 = void 0 === t2 ? 1 : t2, i2 = n4.width_texture, s2 = void 0 === i2 ? 1 : i2, a2 = n4.height_texture, u2 = void 0 === a2 ? 1 : a2, l2 = n4.channel, f2 = void 0 === l2 ? 0 : l2, c2 = n4.total_shape, _2 = void 0 === c2 ? 0 : c2;
              this.width_shape_out = o3, this.height_shape_out = r2, this.width_texture_out = s2, this.height_texture_out = u2, this.channel = f2, this.total_shape = _2;
            }, e3.prototype.attachColorBuffer = function() {
              var n4 = this.gl;
              n4.bindFramebuffer(n4.FRAMEBUFFER, null), n4.canvas.width = this.width_shape_out, n4.canvas.height = this.height_shape_out, n4.viewport(0, 0, n4.canvas.width, n4.canvas.height), n4.scissor(0, 0, n4.canvas.width, n4.canvas.height);
            }, e3.prototype.attachFrameBuffer = function(n4) {
              this.currentTexture = this.texturesMap[n4];
              var e4 = this.gl;
              e4.framebufferTexture2D(e4.FRAMEBUFFER, e4.COLOR_ATTACHMENT0, e4.TEXTURE_2D, this.currentTexture, 0), e4.viewport(0, 0, this.width_texture_out, this.height_texture_out), e4.scissor(0, 0, this.width_texture_out, this.height_texture_out);
            }, e3.prototype.render = function(n4, e4, o3, t2) {
              var r2 = this;
              void 0 === e4 && (e4 = false), void 0 === t2 && (t2 = false);
              var i2 = n4.inputTensors, s2 = void 0 === i2 ? [] : i2, a2 = n4.uniform, u2 = void 0 === a2 ? null : a2, l2 = n4.iLayer, f2 = void 0 === l2 ? 0 : l2, c2 = n4.modelName, _2 = this.gl, g2 = 0;
              s2.forEach(function(n5) {
                r2.initTexture(g2, n5, t2);
                var i3 = r2.getUniformLoc("texture_" + n5.name, f2, e4, o3, c2);
                i3 && _2.uniform1i(i3, g2++);
              }), u2 && this.setUniform(u2, f2, e4, o3, c2), _2.drawArrays(_2.TRIANGLE_STRIP, 0, 4);
            }, e3.prototype.initTexture = function(n4, e4, o3) {
              var t2, r2 = this.gl, i2 = this.textureConf, s2 = e4.tensorId, a2 = o3 || e4.isPacked, u2 = e4.data;
              if (e4.persistable) {
                this.cacheTextures = this.cacheTextures || {};
                var l2 = this.cacheTextures[s2];
                l2 ? (t2 = l2, u2 && F.genTextureInfoFromTensorShape(this.MAX_TEXTURE_SIZE, e4)) : (t2 = r2.createTexture(), this.cacheTextures[s2] = t2);
              } else t2 = this.texturesMap[s2];
              r2.activeTexture(r2["TEXTURE" + n4]), r2.bindTexture(r2.TEXTURE_2D, t2), u2 && (b.uploadDataToTexture(r2, i2, e4, a2), e4.data = null);
            }, e3.prototype.setUniform = function(n4, e4, o3, t2, r2) {
              var i2 = this, s2 = Object.keys(n4), a2 = this.gl;
              s2.forEach(function(s3) {
                var u2 = n4[s3].type, l2 = n4[s3].value, f2 = i2.getUniformLoc(s3, e4, o3, t2, r2);
                F.setUniformParam(a2, f2, u2, l2);
              });
            }, e3.prototype.getUniformLoc = function(n4, e4, o3, t2, r2) {
              var i2 = r2 + "_";
              if (o3) return this.uniformLocations[i2 + e4][n4 + t2];
              var s2 = this.gl.getUniformLocation(this.program.program, n4);
              return this.uniformLocations[i2 + e4] = this.uniformLocations[i2 + e4] || {}, this.uniformLocations[i2 + e4][n4 + t2] = s2, s2;
            }, e3.prototype.dispose = function() {
            }, e3;
          }(function() {
          }), nn = { mainFunc: function(n3, e3) {
            var o3 = n3.origin, t2 = n3.filter, r2 = n3.out, i2 = n3.bias, s2 = e3.groups, a2 = void 0 === s2 ? 1 : s2, u2 = e3.strides, l2 = void 0 === u2 ? [] : u2, f2 = e3.paddings, c2 = void 0 === f2 ? [] : f2, _2 = e3.dilations, g2 = void 0 === _2 ? [] : _2, h2 = e3.fuse_relu, d2 = e3.filter_nearest_vec4, p2 = e3.filter_remainder_vec4, m2 = e3.act_type, P2 = void 0 === m2 ? "" : m2, v2 = e3.padding_algorithm, x2 = void 0 === v2 ? "" : v2, T2 = e3.hard_swish_offset, F2 = void 0 === T2 ? 3 : T2, b2 = e3.hard_swish_scale, y2 = void 0 === b2 ? 6 : b2, E2 = e3.hard_swish_threshold, w2 = void 0 === E2 ? 6 : E2, V2 = l2[0], A2 = void 0 === V2 ? 1 : V2, O2 = l2[1], C2 = void 0 === O2 ? 1 : O2, R2 = c2[0], S2 = void 0 === R2 ? 0 : R2, I2 = c2[1], L2 = void 0 === I2 ? 0 : I2, k2 = g2[0], B2 = void 0 === k2 ? 1 : k2, M2 = g2[1], D2 = void 0 === M2 ? 1 : M2;
            return "SAME" === x2 && Math.ceil((o3.width_shape - t2.width_shape) / A2) + 1 !== r2.width_shape && (S2 = 1, L2 = 1), "\n    // start\u51FD\u6570\n    void main(void) {\n        ivec4 oPos = getOutputTensorPos();\n        int x = oPos.a;\n        int c = oPos.g;\n        int y = oPos.b;\n        int b = oPos.r;\n        float res = 0.0;\n\n        // \u83B7\u53D6output\u7684\u5750\u6807\n        int oTensorChannel = (c / (" + r2.channel + " / " + a2 + ")) * " + t2.channel + ";\n        int oy = y * " + A2 + " - " + S2 + ";\n        for (int fy = 0; fy < " + t2.height_shape + "; fy++) {\n            if (oy >= " + o3.height_shape + ") {\n                break;\n            }\n            if (oy < 0) {\n                oy += " + B2 + ";\n                continue;\n            }\n            int ox = x * " + C2 + " - " + L2 + ";\n            for (int fx = 0; fx < " + t2.width_shape + "; fx++) {\n                if (ox >= " + o3.width_shape + ") {\n                    break;\n                }\n                if (ox < 0) {\n                    ox += " + D2 + ";\n                    continue;\n                }\n                // channel\u8BA1\u7B97\n                for (int j = 0; j < " + d2 + "; j += 4) {\n                    vec4 fValues = vec4(\n                        getValueFromTensorPos_filter(c, j, fy, fx),\n                        getValueFromTensorPos_filter(c, j + 1, fy, fx),\n                        getValueFromTensorPos_filter(c, j + 2, fy, fx),\n                        getValueFromTensorPos_filter(c, j + 3, fy, fx)\n                    );\n\n                    vec4 oValues = vec4(\n                        getValueFromTensorPos_origin(b, oTensorChannel + j, oy, ox),\n                        getValueFromTensorPos_origin(b, oTensorChannel + j + 1, oy, ox),\n                        getValueFromTensorPos_origin(b, oTensorChannel + j + 2, oy, ox),\n                        getValueFromTensorPos_origin(b, oTensorChannel + j + 3, oy, ox)\n                      );\n\n                    res += dot(fValues, oValues);\n                }\n\n                if (" + p2 + " == 1) {\n                    res += dot(\n                        getValueFromTensorPos_filter(c, " + d2 + ", fy, fx),\n                        getValueFromTensorPos_origin(b, oTensorChannel + " + d2 + ", oy, ox));\n                } else if (" + p2 + " == 2) {\n                    vec2 fValues = vec2(\n                        getValueFromTensorPos_filter(c, " + d2 + ", fy, fx),\n                        getValueFromTensorPos_filter(c, " + d2 + " + 1, fy, fx)\n                    );\n                    vec2 oValues = vec2(\n                        getValueFromTensorPos_origin(b, oTensorChannel + " + d2 + ", oy, ox),\n                        getValueFromTensorPos_origin(b, oTensorChannel + " + d2 + " + 1, oy, ox)\n                      );\n                    res += dot(fValues, oValues);\n                } else if (" + p2 + " == 3) {\n                    vec3 fValues = vec3(\n                        getValueFromTensorPos_filter(c, " + d2 + ", fy, fx),\n                        getValueFromTensorPos_filter(c, " + d2 + " + 1, fy, fx),\n                        getValueFromTensorPos_filter(c, " + d2 + " + 2, fy, fx)\n                    );\n                    vec3 oValues = vec3(\n                        getValueFromTensorPos_origin(b, oTensorChannel + " + d2 + ", oy, ox),\n                        getValueFromTensorPos_origin(b, oTensorChannel + " + d2 + " + 1, oy, ox),\n                        getValueFromTensorPos_origin(b, oTensorChannel + " + d2 + " + 2, oy, ox)\n                    );\n                    res += dot(fValues, oValues);\n                }\n\n                ox += " + D2 + ";\n            }\n            oy += " + B2 + ";\n        }\n\n        " + (i2 ? "res += getValueFromTensorPos_bias(0, 0, 0, c);" : "") + "\n\n        if (" + h2 + ") {\n            res = max(0.0, res);\n        }\n        else if (" + ("relu6" === P2) + ") {\n            res = min(max(0.0, res), 6.0);\n        }\n        else if (" + ("hard_swish" === P2) + ") {\n            res = res * min(\n                max(0.0, res + float(" + F2 + ")),\n                float(" + w2 + ")\n            ) / float(" + y2 + ");\n        }\n\n        setOutput(res);\n    }\n    ";
          }, textureFuncConf: { filter: ["getValueFromTensorPos"], origin: ["getValueFromTensorPos"], bias: ["getValueFromTensorPos"] }, behaviors: ["adaptPaddings", "isApplySeparableConv", "batchComputeConv2d", "processBias"] };
          function en(n3, e3) {
            var o3 = n3[0], t2 = n3[1], r2 = n3[2], i2 = n3[3];
            if (1 === o3 && 1 === t2) return [[1, 1, r2], 3, [i2], 1, [r2, i2]];
            var s2 = n3.slice(0, e3), a2 = n3.slice(e3);
            return [s2, s2.length, a2, a2.length, [s2.reduce(function(n4, e4) {
              return n4 * e4;
            }), a2.reduce(function(n4, e4) {
              return n4 * e4;
            })]];
          }
          function on(n3, e3, o3) {
            if (1 === o3) return "\n            int getTensorPosFromArrayIndex_" + n3 + "(int n) {\n                return calMod(n, " + e3[0] + ");\n            }\n        ";
            var t2 = g(e3);
            return t2.push(1), "\n    ivec" + o3 + " shapeVec_" + n3 + " = ivec" + o3 + "(" + t2.join(", ") + ");\n    ivec" + o3 + " getTensorPosFromArrayIndex_" + n3 + "(int n) {\n        ivec" + o3 + " pos;\n        pos[0] = n / shapeVec_" + n3 + "[0];\n        for (int i = 1; i < " + o3 + "; i++) {\n            n = calMod(n, shapeVec_" + n3 + "[i - 1]);\n            pos[i] = n / shapeVec_" + n3 + "[i];\n        }\n        return pos;\n    }\n    ";
          }
          function tn(n3) {
            return 1 === n3 ? "int" : "ivec" + n3;
          }
          function rn(n3) {
            var e3 = n3.total_shape, o3 = n3.channel, t2 = n3.height_shape, r2 = n3.width_shape;
            return [e3 / o3 / t2 / r2, o3, t2, r2];
          }
          const sn = { mainFunc: function(n3, e3) {
            var o3 = n3.origin, t2 = e3.transpose_X, r2 = void 0 !== t2 && t2, i2 = e3.transpose_Y, s2 = void 0 !== i2 && i2, a2 = e3.trans_x, u2 = void 0 !== a2 && a2, l2 = e3.trans_y, f2 = r2 || u2, c2 = s2 || void 0 !== l2 && l2;
            return "\n    void main() {\n        float res = 0.0;\n        // \u83B7\u53D6output\u7684\u5750\u6807\n        ivec4 out_pos = getOutputTensorPos();\n        ivec4 origin_pos = out_pos;\n        if (" + f2 + ") {\n            origin_pos[3] = origin_pos[2];\n        }\n        ivec4 counter_pos = out_pos;\n        if (" + c2 + ") {\n            counter_pos[2] = counter_pos[3];\n        }\n\n        for (int j = 0; j < " + (f2 ? o3.height_shape : o3.width_shape) + "; j++) {\n            if (" + f2 + ") {\n                origin_pos[2] = j;\n            }\n            else {\n                origin_pos[3] = j;\n            }\n            if (" + c2 + ") {\n                counter_pos[3] = j;\n            }\n            else {\n                counter_pos[2] = j;\n            }\n            float o = getValueFromTensorPos_origin(origin_pos[0], origin_pos[1], origin_pos[2], origin_pos[3]);\n            float c = getValueFromTensorPos_counter(counter_pos[0], counter_pos[1], counter_pos[2], counter_pos[3]);\n            \n            res += c * o;\n        }\n        setOutput(res);\n    }\n    ";
          }, textureFuncConf: { counter: ["getValueFromTensorPos"], origin: ["getValueFromTensorPos"] } };
          function an(n3, e3) {
            var o3 = n3[0], t2 = n3[1], r2 = n3[2], i2 = n3[3];
            if (1 === o3 && 1 === t2) return [[1, 1, r2], 3, [i2], 1, [r2, i2]];
            var s2 = n3.slice(0, e3), a2 = n3.slice(e3);
            return [s2, s2.length, a2, a2.length, [s2.reduce(function(n4, e4) {
              return n4 * e4;
            }), a2.reduce(function(n4, e4) {
              return n4 * e4;
            })]];
          }
          function un(n3, e3, o3) {
            if (1 === o3) return "\n            int getTensorPosFromArrayIndex_" + n3 + "(int n) {\n                return calMod(n, " + e3[0] + ");\n            }\n        ";
            var t2 = g(e3);
            return t2.push(1), "\n    ivec" + o3 + " shapeVec_" + n3 + " = ivec" + o3 + "(" + t2.join(", ") + ");\n    ivec" + o3 + " getTensorPosFromArrayIndex_" + n3 + "(int n) {\n        ivec" + o3 + " pos;\n        pos[0] = n / shapeVec_" + n3 + "[0];\n        for (int i = 1; i < " + o3 + "; i++) {\n            n = calMod(n, shapeVec_" + n3 + "[i - 1]);\n            pos[i] = n / shapeVec_" + n3 + "[i];\n        }\n        return pos;\n    }\n    ";
          }
          function ln(n3) {
            return 1 === n3 ? "int" : "ivec" + n3;
          }
          function fn(n3) {
            var e3 = n3.total_shape, o3 = n3.channel, t2 = n3.height_shape, r2 = n3.width_shape;
            return [e3 / o3 / t2 / r2, o3, t2, r2];
          }
          const cn = { mainFunc: function(n3, e3) {
            return "\n    // start\u51FD\u6570\n    void main(void) {\n        vec2 outCoord = vCoord.xy * (_2d_shape_texture_out);\n        int index = int(outCoord.x) + int(outCoord.y) * int(" + n3.out.width_texture + ");\n        ivec4 originPos = getTensorPosFromArrayIndex_origin(index);\n        float res = getValueFromTensorPos_origin(originPos[0], originPos[1], originPos[2], originPos[3]);\n        setOutput(res);\n    }\n    ";
          }, textureFuncConf: { origin: ["getTensorPosFromArrayIndex", "getValueFromTensorPos"] } }, _n = { mainFunc: function(n3, e3) {
            var o3 = n3.out, t2 = n3.origin, r2 = e3.align_mode, i2 = void 0 === r2 ? 1 : r2, s2 = e3.align_corners, a2 = void 0 === s2 || s2;
            return "\n    // start\u51FD\u6570\n\n    vec4 getData(float n, float scale, bool align_flag, int in_len) {\n        float m = align_flag ? ((n + 0.5) / scale - 0.5) : (n / scale);\n        int a1 = int(floor(m));\n        a1 = a1 > 0 ? a1 : 0;\n        int a2 = (a1 + 1) < (in_len - 1) ? (a1 + 1) : (in_len - 1);\n\n        float idx_src = (n + 0.5) / scale - 0.5;\n        idx_src = idx_src > 0.0 ? idx_src : 0.0;\n        float b1 = align_flag ? (idx_src - float(a1)) : (n / scale - float(a1));\n        float b2 = 1.0 - b1;\n        return vec4(float(a1), float(a2), b1, b2);\n    }\n\n    void main(void) {\n        // \u8F93\u51FA\u6570\u636E\n        ivec4 oPos = getOutputTensorPos();\n\n        bool align_flag = " + i2 + " == 0 && !" + a2 + ";\n\n        float scale_x = 0.0;\n        float scale_y = 0.0;\n        if (" + a2 + ") {\n            scale_x = float(" + o3.width_shape + " - 1) / float(" + t2.width_shape + " - 1);\n            scale_y = float(" + o3.height_shape + " - 1) / float(" + t2.height_shape + " - 1);\n        }\n        else {\n            scale_x = float(" + o3.width_shape + ") / float(" + t2.width_shape + ");\n            scale_y = float(" + o3.height_shape + ") / float(" + t2.height_shape + ");\n        }\n\n        vec4 vx = getData(float(oPos.a), scale_x, align_flag, " + t2.width_shape + ");\n        vec4 vy = getData(float(oPos.b), scale_y, align_flag, " + t2.height_shape + ");\n\n        int x1 = int(vx.r);\n        int x2 = int(vx.g);\n        float x3 = vx.b;\n        float x4 = vx.a;\n        int y1 = int(vy.r);\n        int y2 = int(vy.g);\n        float y3 = vy.b;\n        float y4 = vy.a;\n\n        float value11 = getValueFromTensorPos_origin(oPos.r, oPos.g, y1, x1);\n        float value12 = getValueFromTensorPos_origin(oPos.r, oPos.g, y2, x1);\n        float value21 = getValueFromTensorPos_origin(oPos.r, oPos.g, y1, x2);\n        float value22 = getValueFromTensorPos_origin(oPos.r, oPos.g, y2, x2);\n        float value = x4 * y4 * value11 + x4 * y3 * value12 + x3 * y4 * value21 + x3 * y3 * value22;\n        setOutput(float(value));\n    }\n    ";
          }, textureFuncConf: { origin: ["getValueFromTensorPos"] } }, gn = _n;
          var hn = { relu: ["transToPrelu"], relu6: ["transToRelu6"], leaky_relu: ["transToLeakyrelu"], transToLeakyrelu: ["transToLeakyrelu"], scale: ["transToScale"], sigmoid: ["transToSigmoid"], hard_sigmoid: ["transToHardSigmoid"], pow: ["transToPow"], exp: ["transToExp"], sqrt: ["transToSqrt"], tanh: ["transToTanh"] };
          function dn(n3, e3) {
            var o3 = e3.multi_value, t2 = void 0 === o3 ? 1 : o3, r2 = e3.bias_value, i2 = void 0 === r2 ? 0 : r2;
            return "\n    // start\u51FD\u6570\n    void main(void) {\n        // \u8F93\u51FA\u6570\u636E\n        float o = getPixelsFromTexturePos_origin(vCoord).r;\n        float res = " + e3.active_function + "(o, float(" + t2 + "), float(" + i2 + "));\n        setOutput(res);\n    }\n    ";
          }
          function pn(n3) {
            return { mainFunc: dn, textureFuncConf: { origin: ["getPixelsFromTexturePos"] }, behaviors: hn[n3] };
          }
          const mn = { mainFunc: function(n3, e3) {
            var o3 = e3.axes, t2 = Array.isArray(o3) ? o3 : [o3], r2 = [0, 1, 2, 3].filter(function(n4) {
              return n4 >= t2.length;
            });
            return "\n    // start\u51FD\u6570\n    void main(void) {\n        ivec4 oPos = getOutputTensorPos();\n        // \u8F93\u51FA\u5750\u6807\u8F6C\u6362\u4E3A\u8F93\u5165\u5750\u6807\n        float o = 0.0;\n        o = getValueFromTensorPos_origin(" + [0, 1, 2, 3].map(function(n4) {
              return t2.indexOf(n4) > -1 ? 0 : "oPos[" + r2.splice(0, 1) + "]";
            }).join(",") + ");\n        setOutput(float(o));\n    }\n    ";
          }, textureFuncConf: { origin: ["getValueFromTensorPos"] } }, Pn = { mainFunc: function(n3, e3) {
            var o3 = n3.origin, t2 = n3.out, r2 = e3.align_corners;
            return "\n    // start\u51FD\u6570\n    int getData(float n, float scale, bool align_corners) {\n        float m = align_corners ? (n / scale + 0.5) : (n / scale);\n        return int(floor(m));\n    }\n\n    void main(void) {\n        // \u8F93\u51FA\u6570\u636E\n        ivec4 oPos = getOutputTensorPos();\n        \n        float scale_x = 0.0;\n        float scale_y = 0.0;\n        if (" + r2 + ") {\n            scale_x = float(" + t2.width_shape + " -1) / float(" + o3.width_shape + " - 1);\n            scale_y = float(" + t2.height_shape + " - 1) / float(" + o3.height_shape + " - 1);\n        }\n        else {\n            scale_x = float(" + t2.width_shape + ") / float(" + o3.width_shape + ");\n            scale_y = float(" + t2.height_shape + ") / float(" + o3.height_shape + ");\n        }\n    \n        int vx = getData(float(oPos.a), scale_x, " + r2 + ");\n        int vy = getData(float(oPos.b), scale_y, " + r2 + ");\n        \n        float o = getValueFromTensorPos_origin(oPos.r, oPos.g, vy, vx);\n        setOutput(float(o));\n}\n    ";
          }, textureFuncConf: { origin: ["getValueFromTensorPos"] }, commonFuncConf: ["transferFromNHWCtoNCHW"] };
          var vn = function() {
            for (var n3 = 0, e3 = 0, o3 = arguments.length; e3 < o3; e3++) n3 += arguments[e3].length;
            var t2 = Array(n3), r2 = 0;
            for (e3 = 0; e3 < o3; e3++) for (var i2 = arguments[e3], s2 = 0, a2 = i2.length; s2 < a2; s2++, r2++) t2[r2] = i2[s2];
            return t2;
          };
          const xn = { mainFunc: function(n3, e3) {
            var o3 = n3.origin, t2 = n3.image, r2 = n3.out, i2 = e3.variances, s2 = void 0 === i2 ? [0.1, 0.1, 0.2, 0.2] : i2, a2 = e3.fixed_sizes, u2 = e3.fixed_ratios, l2 = e3.densities, f2 = e3.flatten_to_2d, c2 = e3.clip, _2 = e3.step_w, d2 = void 0 === _2 ? 0 : _2, p2 = e3.step_h, m2 = void 0 === p2 ? 0 : p2, P2 = e3.offset, v2 = void 0 === P2 ? 0.5 : P2, x2 = e3.runtime, T2 = void 0 === x2 ? 0 : x2, F2 = t2.height_shape, b2 = t2.width_shape, y2 = o3.height_shape, E2 = o3.width_shape, w2 = r2.total_shape, V2 = r2.channel, A2 = r2.height_shape, O2 = r2.width_shape, C2 = w2 / V2 / A2 / O2, R2 = g([C2, V2, A2, O2]), S2 = d2, I2 = m2;
            0 !== d2 && 0 !== m2 || (S2 = b2 / E2, I2 = F2 / y2);
            var L2 = Math.round(0.5 * (S2 + I2)), k2 = u2.map(function(n4) {
              return Math.sqrt(n4);
            }), B2 = 1 === k2.length ? "sqrt_fixed_ratios" : "sqrt_fixed_ratios[r]", M2 = u2.length, D2 = A2, U2 = C2, j2 = V2;
            f2 && (U2 = y2, j2 = E2, D2 = A2 / y2 / E2);
            var N2 = g([U2, j2, D2, O2]), X2 = G("out1", { numbers_shape: vn(N2, [1]), length_shape: 4 }), H2 = l2.map(function(n4) {
              return n4 * n4 * M2;
            }), W2 = H2.length, z2 = function(n4) {
              var e4 = "ivec2 calRemain(int remain, int curAccIndex, int s) {", o4 = n4.length;
              if (1 === o4) e4 += "\n            int accIndex0 = density_acc_shape;\n\n            if (remain >= accIndex0) {\n                s++;\n                remain -= accIndex0;\n            }\n            else {\n                return ivec2(remain, s);\n            }\n            ";
              else for (var t3 = 0; t3 < o4; t3++) e4 += "\n            int accIndex" + t3 + " = density_acc_shape[" + t3 + "];\n\n            if (remain >= accIndex" + t3 + ") {\n                s++;\n                remain -= accIndex" + t3 + ";\n            }\n            else {\n                return ivec2(remain, s);\n            }\n            ";
              return e4 + "\n    }\n    ";
            }(H2), Y2 = c2 ? "v = min(max(v, 0.), 1.);" : "", q2 = 1 === W2 ? "density_acc_shape" : "density_acc_shape[0]", Z2 = "\n    float getFloat4TensorVal(vec4 tensor, int index) {\n        if (index == 0) {\n            return tensor[0];\n        }\n        else if (index == 1) {\n            return tensor[1];\n        }\n        else if (index == 2) {\n            return tensor[2];\n        }\n        else if (index == 3) {\n            return tensor[3];\n        }\n    }\n    float getFloat3TensorVal(vec3 tensor, int index) {\n        if (index == 0) {\n            return tensor[0];\n        }\n        else if (index == 1) {\n            return tensor[1];\n        }\n        else if (index == 2) {\n            return tensor[2];\n        }\n    }\n    float getFloat2TensorVal(vec2 tensor, int index) {\n        if (index == 0) {\n            return tensor[0];\n        }\n        else if (index == 1) {\n            return tensor[1];\n        }\n    }\n    float getFloat1TensorVal(float tensor, int index) {\n        return tensor;\n    }\n    int getInt4TensorVal(ivec4 tensor, int index) {\n        if (index == 0) {\n            return tensor[0];\n        }\n        else if (index == 1) {\n            return tensor[1];\n        }\n        else if (index == 2) {\n            return tensor[2];\n        }\n        else if (index == 3) {\n            return tensor[3];\n        }\n    }\n    int getInt3TensorVal(ivec3 tensor, int index) {\n        if (index == 0) {\n            return tensor[0];\n        }\n        else if (index == 1) {\n            return tensor[1];\n        }\n        else if (index == 2) {\n            return tensor[2];\n        }\n    }\n    int getInt2TensorVal(ivec2 tensor, int index) {\n        if (index == 0) {\n            return tensor[0];\n        }\n        else if (index == 1) {\n            return tensor[1];\n        }\n    }\n\n    int getInt1TensorVal(int tensor, int index) {\n       return tensor;\n    }\n\n    " + X2 + "\n    \n        " + h(l2, "densities") + "\n        " + h(a2, "fixed_sizes") + "\n        " + h(k2, "sqrt_fixed_ratios") + "\n        " + function(n4, e4) {
              if (1 === n4.length) return "int " + e4 + " = int(" + n4[0] + ");";
              for (var o4 = n4.length, t3 = "\n        ivec" + o4 + " " + e4 + " = ivec" + o4 + "(\n    ", r3 = 0; r3 < o4; r3++) t3 += n4[r3] + ",";
              return t3.slice(0, -1) + ");";
            }(H2, "density_acc_shape") + "\n    \n    " + z2 + "\n    // start\u51FD\u6570\n    void main(void) {\n        ivec4 oPos = getOutputTensorPos();\n        int rr = int(oPos.r);\n        int gg = int(oPos.g);\n        int bb = int(oPos.b);\n        int aa = int(oPos.a);\n\n        // \u8F93\u51FA\u5750\u6807\u8F6C\u6362\u4E3A\u8F93\u5165\u5750\u6807\n        int index = rr * " + R2[0] + " + gg * " + R2[1] + " + bb * " + R2[2] + " + aa;\n        ivec4 realOutPos = getTensorPosFromArrayIndex_out1(index);\n        int h = realOutPos.r;\n        int w = realOutPos.g;\n        int b = realOutPos.b;\n        int a = realOutPos.a;\n    ";
            return 1 === T2 ? "\n        " + h(s2, "variances") + "\n        " + Z2 + "\n        setOutput(getFloat4TensorVal(variances, aa));\n        }" : "\n            " + Z2 + "\n            // \u6C42idx \u5BF9\u5E94\u7684 s, r, di, dj\n            int s = 0;\n            int remain = b;\n            int curAccIndex = " + q2 + ";\n\n            ivec2 remainInfo = calRemain(remain, curAccIndex, s);\n            remain = remainInfo[0];\n            s = remainInfo[1];\n            int density = int(getFloat" + l2.length + "TensorVal(densities, s));\n            int r = int(floor(float(remain / density / density)));\n            remain -= r * density * density;\n\n            float di = floor(float(remain / density));\n            float dj = float(remain - int(di) * density);\n\n            float center_x = (float(w) + float(" + v2 + ")) * float(" + S2 + ");\n            float center_y = (float(h) + float(" + v2 + ")) * float(" + I2 + ");\n            float fixed_size = getFloat" + a2.length + "TensorVal(fixed_sizes, s);\n            float shift = float(" + L2 + ") / float(density);\n\n            float v = 0.0;\n            if (a == 0 || a == 2) {\n                float box_width_ratio = fixed_size * " + B2 + ";\n                float density_center_x = center_x - float(" + L2 + ") / 2. + shift / 2.;\n                float center_x_temp = density_center_x + dj * shift;\n                if (a == 0) {\n                    v = max((center_x_temp - box_width_ratio / 2.) / float(" + b2 + "), 0.);\n                }\n                else {\n                    v = min((center_x_temp + box_width_ratio / 2.) / float(" + b2 + "), 1.);\n                }\n            }\n            else {\n                float box_height_ratio = fixed_size / " + B2 + ";\n                float density_center_y = center_y - float(" + L2 + ") / 2. + shift / 2.;\n                float center_y_temp = density_center_y + di * shift;\n                if (a == 1) {\n                    v = max((center_y_temp - box_height_ratio / 2.) / float(" + F2 + "), 0.);\n                }\n                else {\n                    v = min((center_y_temp + box_height_ratio / 2.) / float(" + F2 + "), 1.);\n                }\n            }\n\n            " + Y2 + "\n\n            setOutput(v);\n        }\n        ";
          }, textureFuncConf: { image: ["getValueFromTensorPos"], origin: ["getValueFromTensorPos"] } }, Tn = { mainFunc: function(n3, e3) {
            var o3 = n3.origin, t2 = n3.image, r2 = n3.out, i2 = e3.variances, s2 = void 0 === i2 ? [0.1, 0.1, 0.2, 0.2] : i2, a2 = e3.flip, u2 = e3.clip, l2 = e3.step_w, f2 = void 0 === l2 ? 0 : l2, c2 = e3.step_h, g2 = void 0 === c2 ? 0 : c2, m2 = e3.offset, P2 = void 0 === m2 ? 0.5 : m2, v2 = e3.runtime, x2 = void 0 === v2 ? 0 : v2, T2 = e3.min_sizes, F2 = void 0 === T2 ? [] : T2, b2 = e3.max_sizes, y2 = void 0 === b2 ? [] : b2, E2 = e3.aspect_ratios, w2 = void 0 === E2 ? [] : E2, V2 = e3.min_max_aspect_ratios_order, A2 = void 0 !== V2 && V2, O2 = t2.height_shape, C2 = t2.width_shape, R2 = o3.height_shape, S2 = o3.width_shape, I2 = r2.channel, L2 = r2.height_shape, k2 = f2, B2 = g2;
            0 !== f2 && 0 !== g2 || (k2 = C2 / S2, B2 = O2 / R2);
            var M2 = [1];
            w2.forEach(function(n4) {
              1 !== n4 && (M2.push(Math.sqrt(n4)), a2 && M2.push(Math.sqrt(1 / n4)));
            });
            var D2 = M2.length, U2 = "\n        " + d(F2, "min_sizes", _.FLOAT_TYPE) + "\n        " + d(y2, "max_sizes", _.FLOAT_TYPE) + "\n        " + d(M2, "aspect_ratios", _.FLOAT_TYPE) + "\n    ", j2 = u2 ? "res = min(max(res, 0.), 1.);" : "", N2 = "\n    float getFloat4TensorVal(vec4 tensor, int index) {\n        if (index == 0) {\n            return tensor[0];\n        }\n        else if (index == 1) {\n            return tensor[1];\n        }\n        else if (index == 2) {\n            return tensor[2];\n        }\n        else if (index == 3) {\n            return tensor[3];\n        }\n    }\n\n    \n        " + p(F2, "min_sizes", _.FLOAT_TYPE) + "\n        " + p(y2, "max_sizes", _.FLOAT_TYPE) + "\n        " + p(M2, "aspect_ratios", _.FLOAT_TYPE) + "\n    \n\n    // start\u51FD\u6570\n    void main(void) {\n        ivec4 oPos = getOutputTensorPos();\n        int nn = int(oPos.r);\n        int cc = int(oPos.g);\n        int hh = int(oPos.b);\n        int ww = int(oPos.a);\n\n\n        " + U2 + "\n\n    ";
            return 1 === x2 ? "\n            " + h(s2, "variances") + "\n            " + N2 + "\n            float res = 0.0;\n            res = getFloat4TensorVal(variances, ww);\n            setOutput(float(res));\n        }" : "\n            " + N2 + "\n            int idx = nn * " + I2 * L2 + " + cc * " + L2 + " + hh;\n            int as_num = " + D2 + ";\n            float offset = " + P2 + ";\n            \n            int feature_width = " + S2 + ";\n            int num_priors = " + L2 + ";\n            float step_width = float(" + k2 + ");\n            float step_height = float(" + B2 + ");\n\n            float im_width = float(" + C2 + ");\n            float im_height = float(" + O2 + ");\n\n            bool min_max_aspect_ratios_order = " + A2 + ";\n\n            // \u6C42idx \u5BF9\u5E94\u7684 h w p m\n            int h = int(idx / (num_priors * feature_width));\n            int w = calMod(idx / num_priors, feature_width);\n            int p = calMod(idx, num_priors);\n            int m = " + (y2.length > 0) + " ? int(p / (as_num + 1)) : int(p / as_num);\n            float cx = (float(w) + offset) * step_width;\n            float cy = (float(h) + offset) * step_height;\n            float min_size = getValueFromArrByIndex_min_sizes(min_sizes, m);\n            float bw = 0.0;\n            float bh = 0.0;\n\n            " + (y2.length > 0 ? "\n            int s = calMod(p, as_num + 1);\n            if (" + !A2 + ") {\n                if (s < as_num) {\n                    float ar = getValueFromArrByIndex_aspect_ratios(aspect_ratios, s);\n                    bw = min_size * ar / 2.0;\n                    bh = min_size / ar / 2.0;\n                }\n                else {\n                    float max_size = getValueFromArrByIndex_max_sizes(max_sizes, m);\n                    bw = sqrt(min_size * max_size) / 2.0;\n                    bh = bw;\n                }\n            }\n            else {\n                if (s == 0) {\n                    bh = min_size / 2.0;\n                    bw = bh;\n                }\n                else if (s == 1) {\n                    float max_size = getValueFromArrByIndex_max_sizes(max_sizes, m);\n                    bw = sqrt(min_size * max_size) / 2.0;\n                    bh = bw;\n                }\n                else {\n                    float ar = getValueFromArrByIndex_aspect_ratios(aspect_ratios, s - 1);\n                    bw = min_size * sqrt(ar) / 2.0;\n                    bh = min_size / sqrt(ar) / 2.0;\n                }\n            }" : "\n            int s = calMod(p, as_num);\n            float ar = getValueFromArrByIndex_aspect_ratios(aspect_ratios, s);\n            bw = min_size * ar / 2.0;\n            bh = min_size / ar / 2.0;\n        ") + "\n            float res = 0.0;\n            if (ww == 0) {\n                res = (cx - bw) / im_width;\n            }\n            else if (ww == 1) {\n                res = (cy - bh) / im_height;\n            }\n            else if (ww == 2) {\n                res = (cx + bw) / im_width;\n            }\n            else {\n                res = (cy + bh) / im_height;\n            }\n\n            " + j2 + "\n\n            setOutput(float(res));\n        }\n        ";
          }, textureFuncConf: { image: ["getValueFromTensorPos"], origin: ["getValueFromTensorPos"] }, behaviors: [] };
          const Fn = { mainFunc: function(n3, e3) {
            for (var o3 = n3.out, t2 = function(n4, e4) {
              var o4 = {};
              for (var t3 in n4) Object.prototype.hasOwnProperty.call(n4, t3) && e4.indexOf(t3) < 0 && (o4[t3] = n4[t3]);
              if (null != n4 && "function" == typeof Object.getOwnPropertySymbols) {
                var r3 = 0;
                for (t3 = Object.getOwnPropertySymbols(n4); r3 < t3.length; r3++) e4.indexOf(t3[r3]) < 0 && Object.prototype.propertyIsEnumerable.call(n4, t3[r3]) && (o4[t3[r3]] = n4[t3[r3]]);
              }
              return o4;
            }(n3, ["out"]), r2 = t2.origin, i2 = r2.width_shape, s2 = r2.height_shape, a2 = r2.channel, u2 = r2.total_shape, l2 = r2.length_unformatted_shape, f2 = [u2 / (i2 * s2 * a2), a2, s2, i2].slice(4 - l2), c2 = Object.keys(t2).length, _2 = e3.axis < 0 ? e3.axis + f2.length + 1 : e3.axis, g2 = 1, h2 = 1, d2 = 0; d2 < _2; d2++) g2 *= f2[d2];
            for (d2 = _2; d2 < f2.length; d2++) h2 *= f2[d2];
            var p2 = o3.total_shape / g2, m2 = "";
            return m2 = Array.from(Array(c2).keys()).reduce(function(n4, e4) {
              return n4 + (0 === e4 ? "\n            if (i == 0) {\n                ivec4 co = getTensorPosFromArrayIndex_origin(j);\n                o = getValueFromTensorPos_origin(co.r, co.g, co.b, co.a);\n            }" : "\n            else if (i == " + e4 + ") {\n                ivec4 co = getTensorPosFromArrayIndex_origin_" + e4 + "(j);\n                o = getValueFromTensorPos_origin_" + e4 + "(co.r, co.g, co.b, co.a);\n            }");
            }, m2), "\n    // start\u51FD\u6570\n    void main(void) {\n        ivec4 oPos = getOutputTensorPos();\n        // \u8F93\u51FA\u5750\u6807\u8F6C\u6362\u4E3A\u8F93\u5165\u5750\u6807\n        int sumVal = oPos.a\n            + oPos.b * " + o3.width_shape + "\n            + oPos.g * " + o3.height_shape + " * " + o3.width_shape + "\n            + oPos.r * " + o3.channel + " * " + o3.width_shape + " * " + o3.height_shape + ";\n\n        int index = calMod(sumVal, " + p2 + ");\n\n        int layer = sumVal / " + p2 + ";\n\n        int i = index / " + h2 + ";\n        int j = calMod(index, " + h2 + ") + layer * " + h2 + ";\n\n        float o = 0.0;\n        " + m2 + "\n        setOutput(float(o));\n    }\n    ";
          }, textureFuncConf: { "@all": ["getValueFromTensorPos", "getTensorPosFromArrayIndex"] } }, bn = { mainFunc: function(n3, e3) {
            var o3 = n3.out, t2 = n3.origin, r2 = e3.axes, i2 = e3.starts, s2 = e3.ends, a2 = e3.decrease_axis;
            if (r2.length > 1 || i2.length > 1 || s2.length > 1 || a2 && 0 === a2.length) throw Error("[slice op feature]: current support one dim, support decrease_axis");
            var u2 = t2.width_shape, l2 = t2.height_shape, f2 = t2.channel, c2 = t2.total_shape, g2 = t2.length_unformatted_shape, h2 = [c2 / (u2 * l2 * f2), f2, l2, u2], m2 = r2[0];
            if (m2 < 0 && (m2 = m2 + g2 + 1), 4 !== (m2 = 4 - g2 + m2)) throw Error("[slice op feature]: unsupport axis value");
            for (var P2 = i2[0], v2 = s2[0], x2 = h2[0], T2 = h2[1], F2 = h2[2], b2 = h2[3], y2 = [], E2 = P2; E2 < v2; E2++) for (var w2 = 0; w2 < x2; w2++) for (var V2 = 0; V2 < T2; V2++) for (var A2 = 0; A2 < F2; A2++) y2.push(w2 * T2 * F2 * b2 + V2 * F2 * b2 + A2 * b2 + E2);
            var O2 = d(y2, "arr", _.INT_TYPE);
            return "\n    " + p(y2, "arr", _.INT_TYPE) + "\n\n    void main(void) {\n        ivec4 oPos = getOutputTensorPos();\n        " + O2 + "\n\n        // \u8F93\u51FA\u5750\u6807\u8F6C\u6362\u4E3A\u8F93\u5165\u5750\u6807\n        int sumVal = oPos.a\n            + oPos.b * " + o3.width_shape + "\n            + oPos.g * " + o3.height_shape + " * " + o3.width_shape + "\n            + oPos.r * " + o3.channel + " * " + o3.width_shape + " * " + o3.height_shape + ";\n\n        int index = getValueFromArrByIndex_arr(arr, sumVal);\n\n        float res = 0.0;\n        ivec4 co = getTensorPosFromArrayIndex_origin(index);\n        res = getValueFromTensorPos_origin(co.r, co.g, co.b, co.a);\n        setOutput(float(res));\n    }\n    ";
          }, textureFuncConf: { origin: ["getValueFromTensorPos", "getTensorPosFromArrayIndex"] } };
          var yn = { arg_max: { mainFunc: function(n3, e3) {
            var o3 = n3.origin, t2 = e3.axis, r2 = void 0 === t2 ? -1 : t2, i2 = e3.flatten, s2 = o3.total_shape, a2 = o3.height_shape, u2 = o3.width_shape, l2 = o3.channel, f2 = o3.length_unformatted_shape, c2 = s2 / (u2 * a2 * l2), _2 = r2 < 0 ? 3 : 4 - f2 + r2, g2 = [c2, l2, a2, u2][_2];
            return "\n\n    void main() {\n        ivec4 oPos = getOutputTensorPos();\n        float o = 0.0;\n        int pos = 0;\n        if (" + !i2 + ") {\n            if (" + _2 + " == 1) {\n                float tmp = getValueFromTensorPos_origin(oPos.g, 0, oPos.b, oPos.a);\n                for (int index = 0; index < " + g2 + "; index++) {\n                    o = getValueFromTensorPos_origin(oPos.g, index, oPos.b, oPos.a);\n                    if (o > tmp) {\n                        tmp = o;\n                        pos = index;\n                    }\n                }\n            }\n            else if (" + _2 + " == 2) {\n                float tmp = getValueFromTensorPos_origin(oPos.g, oPos.b, 0, oPos.a);\n                for (int index = 0; index < " + g2 + "; index++) {\n                    o = getValueFromTensorPos_origin(oPos.g, oPos.b, index, oPos.a);\n                    if (o > tmp) {\n                        tmp = o;\n                        pos = index;\n                    }\n                }\n            }\n            else if (" + _2 + " == 3) {\n                float tmp = getValueFromTensorPos_origin(oPos.g, oPos.b, oPos.a, 0);\n                for (int index = 0; index < " + g2 + "; index++) {\n                    o = getValueFromTensorPos_origin(oPos.g, oPos.b, oPos.a, index);\n                    if (o > tmp) {\n                        tmp = o;\n                        pos = index;\n                    }\n                }\n            }\n            else {\n                float tmp = getValueFromTensorPos_origin(0, oPos.g, oPos.b, oPos.a);\n                for (int index = 0; index < " + g2 + "; index++) {\n                    o = getValueFromTensorPos_origin(index, oPos.g, oPos.b, oPos.a);\n                    if (o > tmp) {\n                        tmp = o;\n                        pos = index;\n                    }\n                }\n            }\n        }\n        else {\n            int index = 0;\n            float tmp = getValueFromTensorPos_origin(0, 0, 0, 0);\n            for (int n = 0; n < " + c2 + "; n++) {\n                for (int c = 0; c < " + l2 + "; c++) {\n                    for (int h = 0; h < " + a2 + "; h++) {\n                        for (int w = 0; w < " + u2 + "; w++) {\n                            o = getValueFromTensorPos_origin(n, c, h, w);\n                            if (o > tmp) {\n                                tmp = o;\n                                pos = index;\n                            }\n                            index++;\n                        }\n                    }\n                }\n            }\n        }\n        setOutput(float(pos));\n    }";
          }, textureFuncConf: { origin: ["getValueFromTensorPos"] } }, arg_min: { mainFunc: function(n3, e3) {
            for (var o3 = n3.origin, t2 = e3.axis, r2 = void 0 === t2 ? -1 : t2, i2 = e3.flatten, s2 = o3.total_shape, a2 = o3.height_shape, u2 = o3.width_shape, l2 = o3.channel, f2 = s2 / (u2 * a2 * l2), c2 = [f2, l2, a2, u2], _2 = 0, g2 = 0; g2 < 4 && !(c2[g2] > 1); g2++) _2++;
            var h2 = r2 < 0 ? 4 - _2 + r2 : r2, d2 = c2[h2 = _2 + h2];
            return "\n    void main() {\n        ivec4 oPos = getOutputTensorPos();\n        float o = 0.0;\n        int pos = 0;\n        if (" + !i2 + ") {\n            if (" + h2 + " == 1) {\n                float tmp = getValueFromTensorPos_origin(oPos.g, 0, oPos.b, oPos.a);\n                for (int index = 0; index < " + d2 + "; index++) {\n                    o = getValueFromTensorPos_origin(oPos.g, index, oPos.b, oPos.a);\n                    if (o < tmp) {\n                        tmp = o;\n                        pos = index;\n                    }\n                }\n            }\n            else if (" + h2 + " == 2) {\n                float tmp = getValueFromTensorPos_origin(oPos.g, oPos.b, 0, oPos.a);\n                for (int index = 0; index < " + d2 + "; index++) {\n                    o = getValueFromTensorPos_origin(oPos.g, oPos.b, index, oPos.a);\n                    if (o < tmp) {\n                        tmp = o;\n                        pos = index;\n                    }\n                }\n            }\n            else if (" + h2 + " == 3) {\n                float tmp = getValueFromTensorPos_origin(oPos.g, oPos.b, oPos.a, 0);\n                for (int index = 0; index < " + d2 + "; index++) {\n                    o = getValueFromTensorPos_origin(oPos.g, oPos.b, oPos.a, index);\n                    if (o < tmp) {\n                        tmp = o;\n                        pos = index;\n                    }\n                }     \n            }\n            else {\n                float tmp = getValueFromTensorPos_origin(0, oPos.g, oPos.b, oPos.a);\n                for (int index = 0; index < " + d2 + "; index++) {\n                    o = getValueFromTensorPos_origin(index, oPos.g, oPos.b, oPos.a);\n                    if (o < tmp) {\n                        tmp = o;\n                        pos = index;\n                    }\n                }\n            }\n        }\n        else {\n            int index = 0;\n            float tmp = getValueFromTensorPos_origin(0, 0, 0, 0);\n            for (int n = 0; n < " + f2 + "; n++) {\n                for (int c = 0; c < " + l2 + "; c++) {\n                    for (int h = 0; h < " + a2 + "; h++) {\n                        for (int w = 0; w < " + u2 + "; w++) {\n                            o = getValueFromTensorPos_origin(n, c, h, w);\n                            if (o < tmp) {\n                                tmp = o;\n                                pos = index;\n                            }\n                            index++;\n                        }\n                    }\n                }\n            }\n        }\n        setOutput(float(pos));\n    }";
          }, textureFuncConf: { origin: ["getValueFromTensorPos"] } }, conv2d: nn, conv2d_packing: { mainFunc: function(n3, e3) {
            var o3 = n3.origin, t2 = n3.filter, r2 = n3.out, i2 = n3.bias, s2 = e3.groups, a2 = void 0 === s2 ? 1 : s2, u2 = e3.strides, l2 = void 0 === u2 ? [] : u2, f2 = e3.paddings, c2 = void 0 === f2 ? [] : f2, _2 = e3.dilations, g2 = void 0 === _2 ? [] : _2, h2 = e3.fuse_relu, d2 = e3.act_type, p2 = e3.hard_swish_offset, m2 = void 0 === p2 ? 3 : p2, P2 = e3.hard_swish_scale, v2 = void 0 === P2 ? 6 : P2, x2 = e3.hard_swish_threshold, T2 = void 0 === x2 ? 6 : x2, F2 = l2[0], b2 = void 0 === F2 ? 1 : F2, y2 = l2[1], E2 = void 0 === y2 ? 1 : y2, w2 = c2[0], V2 = void 0 === w2 ? 0 : w2, A2 = c2[1], O2 = void 0 === A2 ? 0 : A2, C2 = g2[0], R2 = void 0 === C2 ? 1 : C2, S2 = g2[1], I2 = void 0 === S2 ? 1 : S2;
            return "\n    void main() {\n        ivec4 oPos = getOutputTensorPos();\n        int x = oPos.a;\n        int c = oPos.g;\n        int y = oPos.b;\n        int b = oPos.r;\n        vec4 res = vec4(0.0, 0.0, 0.0, 0.0);\n\n        int oy = y * " + b2 + " - " + V2 + ";\n        for (int fy = 0; fy < " + t2.height_shape + "; fy++) {\n            if (oy >= " + o3.height_shape + ") {\n                break;\n            }\n            if (oy < 0) {\n                oy += " + R2 + ";\n                continue;\n            }\n            int ox = x * " + E2 + " - " + O2 + ";\n            for (int fx = 0; fx < " + t2.width_shape + "; fx++) {\n                if (ox >= " + o3.width_shape + ") {\n                    break;\n                }\n                if (ox < 0) {\n                    ox += " + I2 + ";\n                    continue;\n                }\n                // channel\u8BA1\u7B97\n                for (int j = 0; j < " + t2.channel + "; j += 1) {\n                    int c0 = (c / (" + r2.channel + " * 4 / " + a2 + ")) * " + t2.channel + " + j;\n                    vec4 fValue = getValueFromTensorPosPacking_filter(c * 4, j, fy, fx);\n                    vec4 oValue = getValueFromTensorPosPacking_origin(b, c0, oy, ox);\n\n                    for (int packed_index = 0; packed_index < 4; packed_index++) {\n                        if (packed_index == 0) {\n                            res.r += dot(fValue, oValue);\n                        } else if (packed_index == 1) {\n                            int c1 = ((c + 1) / (" + r2.channel + " * 4 / " + a2 + ")) * " + t2.channel + " + j;\n                            oValue = getValueFromTensorPosPacking_origin(b, c1, oy, ox);\n                            fValue = getValueFromTensorPosPacking_filter(c * 4 + 1, j, fy, fx);\n                            res.g += dot(fValue, oValue);\n                        } else if (packed_index == 2) {\n                            int c2 = ((c + 2) / (" + r2.channel + " * 4 / " + a2 + ")) * " + t2.channel + " + j;\n                            oValue = getValueFromTensorPosPacking_origin(b, c2, oy, ox);\n                            fValue = getValueFromTensorPosPacking_filter(c * 4 + 2, j, fy, fx);\n                            res.b += dot(fValue, oValue);\n                        } else if (packed_index == 3) {\n                            int c3 = ((c + 3) / (" + r2.channel + " * 4 / " + a2 + ")) * " + t2.channel + " + j;\n                            oValue = getValueFromTensorPosPacking_origin(b, c3, oy, ox);\n                            fValue = getValueFromTensorPosPacking_filter(c * 4 + 3, j, fy, fx);\n                            res.a += dot(fValue, oValue);\n                        }\n                    }\n                }\n                ox += " + I2 + ";\n            }\n            oy += " + R2 + ";\n        }\n\n        " + (i2 ? "res += getValueFromTensorPosPacking_bias(0, c, 0, 0);" : "") + "\n\n        if (" + h2 + ") {\n            res = max(vec4(0.0, 0.0, 0.0, 0.0), res);\n        }\n        else if (" + ("relu6" === d2) + ") {\n            res = min(max(vec4(0.0, 0.0, 0.0, 0.0), res), vec4(6.0, 6.0, 6.0, 6.0));\n        }\n        else if (" + ("hard_swish" === d2) + ") {\n            res = res * min(\n                max(vec4(0.0, 0.0, 0.0, 0.0), res + vec4(" + m2 + ")),\n                vec4(" + T2 + ")\n            ) / vec4(" + v2 + ");\n        }\n\n        setPackedOutput(res);\n    }\n    ";
          }, textureFuncConf: { filter: ["getValueFromTensorPosPacking"], origin: ["getValueFromTensorPosPacking"], bias: ["getValueFromTensorPosPacking"] }, behaviors: ["adaptPaddings", "isApplySeparableConv", "batchComputeConv2d", "processBias"] }, conv2d_transpose: { mainFunc: function(n3, e3) {
            var o3 = n3.origin, t2 = n3.filter, r2 = n3.out, i2 = n3.bias, s2 = e3.groups, a2 = void 0 === s2 ? 1 : s2, u2 = e3.strides, l2 = void 0 === u2 ? [] : u2, f2 = e3.paddings, c2 = void 0 === f2 ? [] : f2, _2 = e3.dilations, g2 = void 0 === _2 ? [] : _2, h2 = e3.fuse_relu, d2 = e3.act_type, p2 = l2[0], m2 = void 0 === p2 ? 1 : p2, P2 = l2[1], v2 = void 0 === P2 ? 1 : P2, x2 = c2[0], T2 = void 0 === x2 ? 0 : x2, F2 = c2[1], b2 = void 0 === F2 ? 0 : F2;
            b2 = t2.height_shape - b2 - 1, T2 = t2.width_shape - T2 - 1;
            var y2 = g2[0], E2 = void 0 === y2 ? 1 : y2, w2 = g2[1], V2 = void 0 === w2 ? 1 : w2;
            return "\n    // start\u51FD\u6570\n    void main(void) {\n        ivec4 oPos = getOutputTensorPos();\n        int x = oPos.a;\n        int c = oPos.g;\n        int y = oPos.b;\n        int b = oPos.r;\n        float res = 0.0;\n        int temp_x = 0;\n        int temp_y = 0;\n        float o = 0.0;\n        float f = 0.0;\n\n        // \u83B7\u53D6output\u7684\u5750\u6807\n        int oTensorChannel = int(c * " + a2 + " / " + r2.channel + ") * " + o3.channel + ";\n        int oy = y - " + b2 + ";\n        const int groupLen = int(" + o3.channel + " / " + a2 + ");\n        int groupIndex = int(c / groupLen);\n\n        for (int fy = 0; fy < " + t2.height_shape + "; fy++) {\n            if (oy < 0) {\n                oy += " + E2 + ";\n                continue;\n            }\n            int ox = x - " + T2 + ";\n            for (int fx = 0; fx < " + t2.width_shape + "; fx++) {\n\n                if (ox < 0) {\n                    ox += " + V2 + ";\n                    continue;\n                }\n                // channel\u8BA1\u7B97\n                for (int j = 0; j < groupLen; j++) {\n                    int curIndex = j + b * groupLen;\n                    if (calMod(ox, int(" + v2 + ")) == 0 && calMod(oy, int(" + m2 + ")) == 0) {\n                        temp_x = int(floor(float(ox) / float(" + v2 + ")));\n                        temp_y = int(floor(float(oy) / float(" + m2 + ")));\n                        if (temp_x < " + o3.width_shape + " && temp_y < " + o3.height_shape + ") {\n                            o = getValueFromTensorPos_origin(b, curIndex , temp_y, temp_x);\n                            f = getValueFromTensorPos_filter(\n                                curIndex,\n                                int(c / " + a2 + "),\n                                " + t2.height_shape + "-1-fy,\n                                " + t2.width_shape + "-1-fx\n                            );\n                            res += f * o;\n                        }\n                    }\n                }\n                ox += " + V2 + ";\n            }\n            oy += " + E2 + ";\n        }\n        \n        " + (i2 ? "res += getValueFromTensorPos_bias(0, 0, 0, c);" : "") + "\n        \n        if (" + h2 + ") {\n            res = max(0.0, res);\n        }\n        else if (" + ("relu6" === d2) + ") {\n            res = min(max(0.0, res), 6.0);\n        }\n        \n        setOutput(float(res));\n    }\n";
          }, textureFuncConf: { filter: ["getValueFromTensorPos"], origin: ["getValueFromTensorPos"], bias: ["getValueFromTensorPos"] }, behaviors: ["adaptPaddings", "isApplySeparableConv", "batchComputeConv2d", "processBias"] }, depthwise_conv2d: nn, conv2d_depthwise: nn, conv2d_elementwise_add: { mainFunc: function(n3, e3) {
            var o3 = n3.origin, t2 = n3.filter, r2 = n3.out, i2 = n3.counter, s2 = e3.active_function, a2 = e3.groups, u2 = void 0 === a2 ? 1 : a2, l2 = e3.axis, f2 = e3.strides, c2 = void 0 === f2 ? [] : f2, _2 = e3.paddings, g2 = void 0 === _2 ? [] : _2, h2 = e3.dilations, d2 = void 0 === h2 ? [] : h2, p2 = e3.multi_value, m2 = e3.bias_value, P2 = c2[0], v2 = void 0 === P2 ? 1 : P2, x2 = c2[1], T2 = void 0 === x2 ? 1 : x2, F2 = g2[0], b2 = void 0 === F2 ? 0 : F2, y2 = g2[1], E2 = void 0 === y2 ? 0 : y2, w2 = d2[0], V2 = void 0 === w2 ? 1 : w2, A2 = d2[1], O2 = void 0 === A2 ? 1 : A2;
            return "\n    // start\u51FD\u6570\n\n    float getValueFromCounter(int index) {\n        float xPos = float(index) / float(" + i2.width_shape + ");\n        vec4 pixels = TEXTURE2D(texture_counter, vec2(xPos, 0.5));\n        return pixels.r;\n    }\n    void main(void) {\n        ivec4 oPos = getOutputTensorPos();\n\n        int x = oPos.a;\n        int c = oPos.g;\n        int y = oPos.b;\n        int b = oPos.r;\n        int addAxis = oPos[" + l2 + "];\n        float res = getValueFromCounter(addAxis);\n\n        // \u83B7\u53D6output\u7684\u5750\u6807\n        int oTensorChannel = (c / (" + r2.channel + " / " + u2 + ")) * " + t2.channel + ";\n        int oy = y * " + v2 + " - " + b2 + ";\n        for (int fy = 0; fy < " + t2.height_shape + "; fy++) {\n            if (oy >= " + o3.height_shape + ") {\n                break;\n            }\n            if (oy < 0) {\n                oy += " + V2 + ";\n                continue;\n            }\n            int ox = x * " + T2 + " - " + E2 + ";\n            for (int fx = 0; fx < " + t2.width_shape + "; fx++) {\n                if (ox >= " + o3.width_shape + ") {\n                    break;\n                }\n                if (ox < 0) {\n                    ox += " + O2 + ";\n                    continue;\n                }\n                // channel\u8BA1\u7B97\n                for (int j = 0; j < " + t2.channel + "; j++) {\n                    float f = getValueFromTensorPos_filter(c, j, fy, fx);\n                    float o = getValueFromTensorPos_origin(b, oTensorChannel + j, oy, ox);\n                    res += f * o;\n                }\n                ox += " + O2 + ";\n            }\n            oy += " + V2 + ";\n        }\n        setOutput(" + s2 + "(res,  " + p2 + ",  " + m2 + "));\n    }\n";
          }, textureFuncConf: { filter: ["getValueFromTensorPos"], origin: ["getValueFromTensorPos"], counter: ["getValueFromTensorPos"] }, behaviors: ["mergeAttrs", "checkIsMerge", "setActiveFunc"] }, pool2d: { mainFunc: function(n3, e3) {
            var o3 = n3.origin, t2 = e3.strides, r2 = void 0 === t2 ? [] : t2, i2 = e3.paddings, s2 = void 0 === i2 ? [] : i2, a2 = e3.pooling_type, u2 = e3.ksize, l2 = r2[0], f2 = void 0 === l2 ? 1 : l2, c2 = r2[1], _2 = void 0 === c2 ? 1 : c2, g2 = s2[0], h2 = void 0 === g2 ? 0 : g2, d2 = s2[1], p2 = void 0 === d2 ? 0 : d2, m2 = u2[0], P2 = u2[1];
            return "\n    // start\u51FD\u6570\n    void main(void) {\n        float res = 0.0;\n        if (" + a2 + " == 1) {\n            res = -1.70141184e38;\n        }\n        // \u83B7\u53D6output\u7684\u5750\u6807\n        ivec4 out_pos = getOutputTensorPos();\n        // X\u3001Y\u65B9\u5411\u7684\u79FB\u52A8\u6B65\u957F\n        int count_pool = 0;\n        int oy_base = out_pos[2] * " + f2 + " - " + h2 + ";\n        int ox_base = out_pos[3] * " + _2 + " - " + p2 + ";\n        for (int fy = 0; fy < " + m2 + "; fy++) {\n            int oy = oy_base + fy;\n            if (oy >= " + o3.height_shape + ") {\n                break;\n            }\n            if (oy < 0) {\n                continue;\n            }\n            for (int fx = 0; fx < " + P2 + "; fx++) {\n                int ox = ox_base + fx;\n                if (ox >= " + o3.width_shape + ") {\n                    break;\n                }\n                if (ox < 0) {\n                    continue;\n                }\n                // origin\u6570\u636E\n                float curr = getValueFromTensorPos_origin(out_pos[0], out_pos[1], oy, ox);\n                if (" + a2 + " == 1) {\n                    if (curr > res) {\n                        res = curr;\n                    }\n                } else {\n                    res += curr;\n                    // \u5728\u5E73\u5747\u6C60\u5316\u6A21\u5F0F\u5FFD\u7565\u586B\u5145\u503C(exclusive\u9ED8\u8BA4\u4E3Atrue\uFF09\n                    count_pool++;\n                }\n            }\n        }\n        if (" + a2 + " != 1) {\n            res = res / float(count_pool);\n        }\n        setOutput(res);\n    }\n    ";
          }, textureFuncConf: { origin: ["getValueFromTensorPos"] }, behaviors: ["isMax", "setPacked", "setAdaptive", "isGlobalPooling"] }, pool2d_max: { mainFunc: function(n3, e3) {
            var o3 = n3.origin, t2 = e3.strides, r2 = void 0 === t2 ? [] : t2, i2 = e3.paddings, s2 = void 0 === i2 ? [] : i2, a2 = e3.ksize, u2 = e3.global_pooling, l2 = e3.runtime, f2 = r2[0], c2 = void 0 === f2 ? 1 : f2, _2 = r2[1], g2 = void 0 === _2 ? 1 : _2, h2 = s2[0], d2 = void 0 === h2 ? 0 : h2, p2 = s2[1], m2 = void 0 === p2 ? 0 : p2, P2 = a2[0], v2 = a2[1], x2 = function(n4) {
              var e4 = n4.total_shape, o4 = n4.channel, t3 = n4.height_shape, r3 = n4.width_shape;
              return [e4 / o4 / t3 / r3, o4, t3, r3];
            }(o3), T2 = "", F2 = "setOutput(float(res));";
            return 0 === l2 && true === u2 && (T2 = "\n            if (curr > res) {\n                index = " + x2[2] * x2[3] + " * out_pos[1] + " + x2[3] + " * oy + ox;\n            }\n        ", F2 = "setOutput(float(index));"), "\n    // start\u51FD\u6570\n    void main(void) {\n        float res = -1.70141184e38;\n        int index = 0;\n        // \u83B7\u53D6output\u7684\u5750\u6807\n        ivec4 out_pos = getOutputTensorPos();\n        int b = out_pos[0];\n        int c = out_pos[1];\n        int y = out_pos[2];\n        int x = out_pos[3];\n        // X\u3001Y\u65B9\u5411\u7684\u79FB\u52A8\u6B65\u957F\n        int oy_base = out_pos[2] * " + c2 + " - " + d2 + ";\n        int ox_base = out_pos[3] * " + g2 + " - " + m2 + ";\n        for (int fy = 0; fy < " + P2 + "; fy++) {\n            int oy = oy_base + fy;\n            if (oy >= " + o3.height_shape + ") {\n                break;\n            }\n            if (oy < 0) {\n                continue;\n            }\n            for (int fx = 0; fx < " + v2 + "; fx++) {\n                int ox = ox_base + fx;\n                if (ox >= " + o3.width_shape + ") {\n                    break;\n                }\n                if (ox < 0) {\n                    continue;\n                }\n                // origin\u6570\u636E\n                float curr = getValueFromTensorPos_origin(out_pos[0], out_pos[1], oy, ox);\n                " + T2 + "\n                res = max(res, curr);\n            }\n        }\n        " + F2 + "\n    }\n    ";
          }, textureFuncConf: { origin: ["getValueFromTensorPos"] }, behaviors: ["isMax", "setPacked", "setAdaptive", "isGlobalPooling"] }, pool2d_winograd: { mainFunc: function(n3, e3) {
            var o3 = n3.origin, t2 = n3.pool, r2 = e3.strides, i2 = void 0 === r2 ? [] : r2, s2 = e3.paddings, a2 = void 0 === s2 ? [] : s2, u2 = e3.type_pool, l2 = i2[0], f2 = void 0 === l2 ? 1 : l2, c2 = i2[1], _2 = void 0 === c2 ? 1 : c2, g2 = a2[0], h2 = void 0 === g2 ? 0 : g2, d2 = a2[1], p2 = void 0 === d2 ? 0 : d2, m2 = o3.height_shape, P2 = o3.width_texture, v2 = o3.height_texture;
            return "\n\n    float getValueFromTensorPosPacked_origin(int r, int g, int b, int a) {\n        int y = b / 2;\n        int yOffset = calMod(b, 2);\n        int x = a / 2;\n        int xOffset = calMod(a, 2);\n        int height = " + m2 + " + " + o3.offset_y + ";\n        vec4 pixels = TEXTURE2D(\n            texture_origin,\n            vec2((float(x) + 0.5) / float(" + P2 + "),\n            (float(g * height / 2 + y) + 0.5) / float(" + v2 + "))\n        );\n        int index = 0;\n        if (xOffset == 0 && yOffset == 0) {\n            return pixels[0];\n        }\n        else if (xOffset == 1 && yOffset == 0) {\n            return pixels[1];\n        }\n        else if (xOffset == 0 && yOffset == 1) {\n            return pixels[2];\n        }\n        return pixels[3];\n    }\n\n    // start\u51FD\u6570\n    void main(void) {\n        float res = (-1.0 / exp(-20.0));\n        // \u83B7\u53D6output\u7684\u5750\u6807\n        ivec4 out_pos = getOutputTensorPos();\n        // int b = out_pos[0];\n        // int c = out_pos[1];\n        // int y = out_pos[2];\n        // int x = out_pos[3];\n        // X\u3001Y\u65B9\u5411\u7684\u79FB\u52A8\u6B65\u957F\n        int count_pool = 0;\n        int oy_base = out_pos[2] * " + f2 + " - " + h2 + ";\n        int ox_base = out_pos[3] * " + _2 + " - " + p2 + ";\n\n        for (int fy = 0; fy < " + t2.height_shape + "; fy++) {\n            int oy = oy_base + fy;\n            if (oy >= " + o3.height_shape + ") {\n                break;\n            }\n            if (oy < 0) {\n                continue;\n            }\n            for (int fx = 0; fx < " + t2.width_shape + "; fx++) {\n                int ox = ox_base + fx;\n                if (ox >= " + o3.width_shape + ") {\n                    break;\n                }\n                if (ox < 0) {\n                    continue;\n                }\n                // origin\u6570\u636E\n                float curr = getValueFromTensorPosPacked_origin(out_pos[0], out_pos[1], oy, ox);\n                if (" + u2 + " == 1) {\n                    if (curr > res) {\n                        res = curr;\n                    }\n                } else {\n                    res += curr;\n                    // \u5728\u5E73\u5747\u6C60\u5316\u6A21\u5F0F\u5FFD\u7565\u586B\u5145\u503C(exclusive\u9ED8\u8BA4\u4E3Atrue\uFF09\n                    count_pool++;\n                }\n            }\n        }\n        if (" + u2 + " != 1) {\n            res = res / float(count_pool);\n        }\n        setOutput(res);\n    }\n    ";
          }, behaviors: ["isMax", "setPacked", "setAdaptive", "isGlobalPooling"] }, elementwise_add: { mainFunc: function(n3, e3) {
            var o3 = e3.counterPos, t2 = e3.Scale_y, r2 = void 0 === t2 ? 1 : t2, i2 = e3.Scale_x, s2 = void 0 === i2 ? 1 : i2, a2 = e3.Scale_out, u2 = void 0 === a2 ? 1 : a2;
            return "\n    void main(void) {\n        // \u8F93\u51FA\u6570\u636E\n        ivec4 oPos = getOutputTensorPos();\n        float o = getValueFromTensorPos_origin(oPos.r, oPos.g, oPos.b, oPos.a);\n\n        float c = getValueFromTensorPos_counter(" + o3 + ");\n        float res = float(" + u2 / r2 + ") * c + float(" + u2 / s2 + ") * o;\n        setOutput(float(res));\n    }\n    ";
          }, textureFuncConf: { counter: ["getValueFromTensorPos"], origin: ["getValueFromTensorPos"] }, behaviors: ["processElementwiseAxis", "genElementwiseCounterPos"] }, elementwise_mul: { mainFunc: function(n3, e3) {
            var o3 = n3.counter, t2 = e3.counterPos, r2 = e3.Scale_y, i2 = void 0 === r2 ? 1 : r2, s2 = e3.Scale_x, a2 = void 0 === s2 ? 1 : s2, u2 = e3.Scale_out, l2 = void 0 === u2 ? 1 : u2;
            return "\n    ivec4 formatNCHW(int n, int c, int h, int w) {\n        int newN = n;\n        int newC = c;\n        int newH = h;\n        int newW = w;\n\n        if (n >= " + o3.height_texture / o3.height_shape + ") {\n            newN = int(" + o3.height_texture / o3.height_shape + ");\n        }\n        if (c >= " + o3.channel + ") {\n            newC = int(" + (o3.channel - 1) + ");\n        }\n        if (h >= " + o3.height_shape + ") {\n            newH = " + (o3.height_shape - 1) + ";\n        }\n        if (w >= " + o3.width_shape + ") {\n            newW = " + (o3.width_shape - 1) + ";\n        }\n        return ivec4(newN, newC, newH, newW);\n    }\n\n    // start\u51FD\u6570\n    void main() {\n        // \u8F93\u51FA\u6570\u636E\n        ivec4 oPos1 = getOutputTensorPos();\n        float o = getValueFromTensorPos_origin(oPos1.r, oPos1.g, oPos1.b, oPos1.a);\n        ivec4 oPos = formatNCHW(oPos1.r, oPos1.g, oPos1.b, oPos1.a);\n\n        float c = getValueFromTensorPos_counter(" + t2 + ");\n        float res = float(" + l2 / a2 + ") * o * float(" + 1 / i2 + ") * c;\n        setOutput(float(res));\n    }\n\n    ";
          }, textureFuncConf: { counter: ["getValueFromTensorPos"], origin: ["getValueFromTensorPos"] }, behaviors: ["processElementwiseAxis", "genElementwiseCounterPos"] }, elementwise_div: { mainFunc: function(n3, e3) {
            var o3 = n3.counter, t2 = e3.counterPos, r2 = e3.Scale_y, i2 = void 0 === r2 ? 1 : r2, s2 = e3.Scale_x, a2 = void 0 === s2 ? 1 : s2, u2 = e3.Scale_out, l2 = void 0 === u2 ? 1 : u2;
            return "\n    ivec4 formatNCHW(int n, int c, int h, int w) {\n        int newN = n;\n        int newC = c;\n        int newH = h;\n        int newW = w;\n\n        if (n >= " + o3.height_texture / o3.height_shape + ") {\n            newN = int(" + o3.height_texture / o3.height_shape + ");\n        }\n        if (c >= " + o3.channel + ") {\n            newC = int(" + (o3.channel - 1) + ");\n        }\n        if (h >= " + o3.height_shape + ") {\n            newH = " + (o3.height_shape - 1) + ";\n        }\n        if (w >= " + o3.width_shape + ") {\n            newW = " + (o3.width_shape - 1) + ";\n        }\n        return ivec4(newN, newC, newH, newW);\n    }\n\n    // start\u51FD\u6570\n    void main() {\n        // \u8F93\u51FA\u6570\u636E\n        ivec4 oPos1 = getOutputTensorPos();\n        float o = getValueFromTensorPos_origin(oPos1.r, oPos1.g, oPos1.b, oPos1.a);\n        ivec4 oPos = formatNCHW(oPos1.r, oPos1.g, oPos1.b, oPos1.a);\n\n        float c = getValueFromTensorPos_counter(" + t2 + ");\n        float res = float(" + l2 + ") * (float(" + 1 / a2 + ") * o / (float(" + 1 / i2 + ") * c));\n        setOutput(float(res));\n    }\n\n    ";
          }, textureFuncConf: { counter: ["getValueFromTensorPos"], origin: ["getValueFromTensorPos"] }, behaviors: ["processElementwiseAxis", "genElementwiseCounterPos"] }, elementwise_pow: { mainFunc: function(n3, e3) {
            var o3 = e3.counterPos, t2 = e3.Scale_y, r2 = void 0 === t2 ? 1 : t2, i2 = e3.Scale_x, s2 = void 0 === i2 ? 1 : i2, a2 = e3.Scale_out, u2 = void 0 === a2 ? 1 : a2;
            return "\n    void main(void) {\n        // \u8F93\u51FA\u6570\u636E\n        ivec4 oPos = getOutputTensorPos();\n        float o = getValueFromTensorPos_origin(oPos.r, oPos.g, oPos.b, oPos.a);\n\n        float c = getValueFromTensorPos_counter(" + o3 + ");\n        float res = pow(float(" + u2 / s2 + ") * o, float(" + u2 / r2 + ") * c);\n        setOutput(float(res));\n    }\n    ";
          }, textureFuncConf: { counter: ["getValueFromTensorPos"], origin: ["getValueFromTensorPos"] }, behaviors: ["processElementwiseAxis", "genElementwiseCounterPos"] }, elementwise_sub: { mainFunc: function(n3, e3) {
            var o3 = e3.counterPos, t2 = e3.Scale_y, r2 = void 0 === t2 ? 1 : t2, i2 = e3.Scale_x, s2 = void 0 === i2 ? 1 : i2, a2 = e3.Scale_out, u2 = void 0 === a2 ? 1 : a2;
            return "\n    void main(void) {\n        // \u8F93\u51FA\u6570\u636E\n        ivec4 oPos = getOutputTensorPos();\n        float o = getValueFromTensorPos_origin(oPos.r, oPos.g, oPos.b, oPos.a);\n\n        float c = getValueFromTensorPos_counter(" + o3 + ");\n        float res = float(" + u2 / s2 + ") * o - float(" + u2 / r2 + ") * c;\n        setOutput(float(res));\n    }\n    ";
          }, textureFuncConf: { counter: ["getValueFromTensorPos"], origin: ["getValueFromTensorPos"] }, behaviors: ["processElementwiseAxis", "genElementwiseCounterPos"] }, mul: { mainFunc: function(n3, e3) {
            var o3 = n3.origin, t2 = n3.counter, r2 = e3.x_num_col_dims, i2 = e3.y_num_col_dims, s2 = rn(o3), a2 = rn(t2), u2 = en(s2, r2), l2 = u2[0], f2 = u2[1], c2 = u2[2], _2 = u2[3], g2 = u2[4], h2 = en(a2, i2), d2 = h2[0], p2 = h2[1], m2 = h2[2], P2 = h2[3];
            return "\n    " + on("x1", l2, f2) + "\n    " + on("x2", c2, _2) + "\n    " + on("y1", d2, p2) + "\n    " + on("y2", m2, P2) + "\n\n    // start\u51FD\u6570\n    void main(void) {\n        float res = 0.0;\n        // \u83B7\u53D6output\u7684\u5750\u6807\n        ivec4 opos = getOutputTensorPos();\n        float temp = 0.0;\n\n        // output is 2D\n        int b = opos.b;\n        int a = opos.a;\n\n        " + tn(f2) + " x1 = getTensorPosFromArrayIndex_x1(b);\n        " + tn(P2) + " y2 = getTensorPosFromArrayIndex_y2(a);\n\n        for (int j = 0; j < " + g2[1] + "; j++) {\n            " + tn(_2) + " x2 = getTensorPosFromArrayIndex_x2(j);\n            " + tn(p2) + " y1 = getTensorPosFromArrayIndex_y1(j);\n\n            ivec4 xPos = ivec4(" + tn(f2) + "(x1), " + tn(_2) + "(x2));\n            ivec4 yPos = ivec4(" + tn(p2) + "(y1), " + tn(P2) + "(y2));\n\n            float o = getValueFromTensorPos_origin(xPos.r, xPos.g, xPos.b, xPos.a);\n            float c = getValueFromTensorPos_counter(yPos.r, yPos.g, yPos.b, yPos.a);\n            res += c * o;\n        }\n\n        setOutput(res);\n    }\n    ";
          }, textureFuncConf: { counter: ["getValueFromTensorPos"], origin: ["getValueFromTensorPos"] } }, matmul: sn, matmul_v2: sn, fc: { mainFunc: function(n3, e3) {
            var o3 = n3.origin, t2 = n3.weight, r2 = e3.x_num_col_dims, i2 = e3.y_num_col_dims, s2 = fn(o3), a2 = fn(t2), u2 = an(s2, r2), l2 = u2[0], f2 = u2[1], c2 = u2[2], _2 = u2[3], g2 = u2[4], h2 = an(a2, i2), d2 = h2[0], p2 = h2[1], m2 = h2[2], P2 = h2[3];
            return "\n    " + un("x1", l2, f2) + "\n    " + un("x2", c2, _2) + "\n    " + un("y1", d2, p2) + "\n    " + un("y2", m2, P2) + "\n\n    // start\u51FD\u6570\n    void main(void) {\n        float res = 0.0;\n        // \u83B7\u53D6output\u7684\u5750\u6807\n        ivec4 opos = getOutputTensorPos();\n        float bias = getValueFromTensorPos_bias(opos.r, opos.g, opos.b, opos.a);\n        float temp = 0.0;\n\n        // output is 2D\n        int b = opos.b;\n        int a = opos.a;\n\n        " + ln(f2) + " x1 = getTensorPosFromArrayIndex_x1(b);\n        " + ln(P2) + " y2 = getTensorPosFromArrayIndex_y2(a);\n\n        for (int j = 0; j < " + g2[1] + "; j++) {\n            " + ln(_2) + " x2 = getTensorPosFromArrayIndex_x2(j);\n            " + ln(p2) + " y1 = getTensorPosFromArrayIndex_y1(j);\n\n            ivec4 xPos = ivec4(" + ln(f2) + "(x1), " + ln(_2) + "(x2));\n            ivec4 yPos = ivec4(" + ln(p2) + "(y1), " + ln(P2) + "(y2));\n\n            float o = getValueFromTensorPos_origin(xPos.r, xPos.g, xPos.b, xPos.a);\n            float c = getValueFromTensorPos_weight(yPos.r, yPos.g, yPos.b, yPos.a);\n            res += c * o;\n        }\n\n        res = res + bias;\n        setOutput(res);\n    }\n    ";
          }, textureFuncConf: { weight: ["getValueFromTensorPos"], origin: ["getValueFromTensorPos"], bias: ["getValueFromTensorPos"] } }, dropout: { mainFunc: function(n3, e3) {
            return "\n    // start\u51FD\u6570\n    void main(void) {\n        ivec4 oPos = getOutputTensorPos();\n        // \u8F93\u51FA\u5750\u6807\u8F6C\u6362\u4E3A\u8F93\u5165\u5750\u6807\n        float o = 0.0;\n        o = getValueFromTensorPos_origin(oPos.r, oPos.g, oPos.b, oPos.a);\n        if (" + ("downgrade_in_infer" === e3.dropout_implementation) + ") {\n            o = o * (1.0 - float(" + e3.dropout_prob + "));\n        }\n        setOutput(float(o));\n    }\n    ";
          }, textureFuncConf: { origin: ["getValueFromTensorPos"] } }, concat: { mainFunc: function(n3, e3) {
            var o3 = e3.dim, t2 = Object.keys(n3).filter(function(n4) {
              return "out" !== n4;
            }).map(function(e4) {
              return n3[e4];
            }).map(function(n4) {
              var e4 = n4.width_shape, t3 = n4.height_shape, r3 = n4.channel;
              return [n4.total_shape / (e4 * t3 * r3), r3, t3, e4][o3];
            }), r2 = t2.map(function(n4, e4) {
              return t2.slice(0, e4 + 1).reduce(function(n5, e5) {
                return n5 + e5;
              }, 0);
            }), i2 = "";
            return r2.forEach(function(n4, e4) {
              i2 += 0 === e4 ? "\n            if (oPos[" + o3 + "] < " + n4 + ") {\n                o = getValueFromTensorPos_origin(oPos.r, oPos.g, oPos.b, oPos.a);\n            }\n            " : "\n            else if (oPos[" + o3 + "] < " + n4 + ") {\n                oPos[" + o3 + "] = oPos[" + o3 + "] - " + r2[e4 - 1] + ";\n                o = getValueFromTensorPos_origin_" + e4 + "(oPos.r, oPos.g, oPos.b, oPos.a);\n            }\n            ";
            }), "\n    // start\u51FD\u6570\n    void main(void) {\n        ivec4 oPos = getOutputTensorPos();\n        // \u8F93\u51FA\u5750\u6807\u8F6C\u6362\u4E3A\u8F93\u5165\u5750\u6807\n        float o = 0.0;\n        " + i2 + "\n        setOutput(float(o));\n    }\n    ";
          }, textureFuncConf: { "@all": ["getValueFromTensorPos"] }, behaviors: ["normalizeDim"] }, concat_mul: { mainFunc: function(n3, e3) {
            var o3 = e3.dim, t2 = Object.keys(n3).filter(function(n4) {
              return "out" !== n4;
            }).map(function(e4) {
              return n3[e4];
            }).map(function(n4) {
              var e4 = n4.width_shape, t3 = n4.height_shape, r3 = n4.channel;
              return [n4.total_shape / (e4 * t3 * r3), r3, t3, e4][o3];
            }), r2 = t2.map(function(n4, e4) {
              return t2.slice(0, e4 + 1).reduce(function(n5, e5) {
                return n5 + e5;
              }, 0);
            }), i2 = "";
            return r2.forEach(function(n4, e4) {
              i2 += 0 === e4 ? "\n            if (oPos[" + o3 + "] < " + n4 + ") {\n                o = getValueFromTensorPos_origin(oPos.r, oPos.g, oPos.b, oPos.a);\n            }" : "\n            else if (oPos[" + o3 + "] < " + n4 + ") {\n                oPos[" + o3 + "] = oPos[" + o3 + "] - " + r2[e4 - 1] + ";\n                o = getValueFromTensorPos_origin_" + e4 + "(oPos.r, oPos.g, oPos.b, oPos.a);\n            }\n            ";
            }), "\n    // start\u51FD\u6570\n    void main(void) {\n        ivec4 oPos = getOutputTensorPos();\n        // \u8F93\u51FA\u5750\u6807\u8F6C\u6362\u4E3A\u8F93\u5165\u5750\u6807\n        float o = 0.0;\n        " + i2 + "\n        setOutput(float(o));\n    }\n    ";
          }, textureFuncConf: { "@all": ["getValueFromTensorPos"] }, behaviors: ["normalizeDim"] }, split: { mainFunc: function(n3, e3) {
            var o3 = e3.target_length, t2 = e3.num, r2 = e3.dim, i2 = e3.sections;
            return "\n    // start\u51FD\u6570\n    void main(void) {\n        int length = int(" + (i2 && i2.length > 1 ? i2[0] : o3 / t2) + ");\n        ivec4 oPos = getOutputTensorPos();\n        // \u8F93\u51FA\u5750\u6807\u8F6C\u6362\u4E3A\u8F93\u5165\u5750\u6807\n        oPos[" + r2 + "] = oPos[" + r2 + "] + layer_run_time * length;\n        float o = getValueFromTensorPos_origin(oPos.r, oPos.g, oPos.b, oPos.a);\n        setOutput(float(o));\n    }\n    ";
          }, textureFuncConf: { origin: ["getValueFromTensorPos"] }, behaviors: ["normalizeDim"] }, softmax: { mainFunc: function(n3, e3) {
            var o3 = n3.origin, t2 = e3.axis, r2 = t2;
            return (!t2 || t2 < 0) && (r2 = (t2 || -1) + 4), "\n    // start\u51FD\u6570\n    void main(void) {\n        ivec4 oPos = getOutputTensorPos();\n        const int n = int(" + o3.total_shape + "/" + o3.channel + "/" + o3.height_shape + "/" + o3.width_shape + ");\n        float o = getValueFromTensorPos_origin(oPos[0], oPos[1], oPos[2], oPos[3]);\n        // \u8F93\u51FA\u5750\u6807\u8F6C\u6362\u4E3A\u8F93\u5165\u5750\u6807\n        float total = 0.0;\n        float res = 0.0;\n        if (" + r2 + " == 0) {\n            for (int i = 0; i < n; i++){\n            float temp = getValueFromTensorPos_origin(i, oPos[1], oPos[2], oPos[3]);\n            total += exp(temp);\n            }\n            res = exp(o) / total;\n        }\n        else if (" + r2 + " == 1) {\n            for (int i = 0; i < " + o3.channel + "; i++){\n            float temp = getValueFromTensorPos_origin(oPos[0], i, oPos[2], oPos[3]);\n            total += exp(temp);\n            }\n            res = exp(o) / total;\n        }\n        else {\n            for (int i = 0; i < " + o3.width_shape + "; i++){\n            float temp = getValueFromTensorPos_origin(oPos[0], oPos[1], oPos[2], i);\n            total += exp(temp);\n            }\n            res = exp(o) / total;\n        }\n        setOutput(res);\n    }\n    ";
          }, textureFuncConf: { origin: ["getValueFromTensorPos"] } }, batchnorm: { mainFunc: function(n3, e3) {
            var o3 = n3.bias, t2 = n3.scale, r2 = n3.mean, i2 = n3.variance, s2 = e3.epsilon;
            return "\n    // start\u51FD\u6570\n    void main(void) {\n        // \u8F93\u51FA\u6570\u636E\n        ivec4 oPos = getOutputTensorPos();\n        float o = getValueFromTensorPos_origin(oPos.r, oPos.g, oPos.b, oPos.a);\n\n        // \u5F52\u4E00\u5316\u6570\u636E\n        vec4 scale = getPixelsFromTexturePos_scale(vec2( float(oPos.g) / float(" + t2.width_texture + ") + 0.00001, 0.0));\n        vec4 bias = getPixelsFromTexturePos_bias(vec2( float(oPos.g) / float(" + o3.width_texture + ") + 0.00001, 0.0));\n        vec4 mean = getPixelsFromTexturePos_mean(vec2((float(oPos.g)) / float(" + r2.width_texture + ")  + 0.00001, 0.0));\n        vec4 variance = getPixelsFromTexturePos_variance(\n            vec2((float(oPos.g)) / float(" + i2.width_texture + ") + 0.00001,\n            0.0)\n        );\n\n        float x = (o - mean[0]) / sqrt(variance[0] + " + s2 + ");\n        float res = scale[0] * x + bias[0];\n        setOutput(res);\n    }\n    ";
          }, textureFuncConf: { origin: ["getValueFromTensorPos"], scale: ["getPixelsFromTexturePos"], bias: ["getPixelsFromTexturePos"], mean: ["getPixelsFromTexturePos"], variance: ["getPixelsFromTexturePos"] } }, reshape: cn, reshape2: cn, bilinear_interp: _n, transpose2: { mainFunc: function(n3, e3) {
            var o3 = e3.perm_arr, t2 = e3.perm_size, r2 = o3[0], i2 = o3[1], s2 = o3[2];
            return "\n    // start\u51FD\u6570\n    void main(void) {\n        // \u8F93\u51FA\u6570\u636E\n        ivec4 oPos = getOutputTensorPos();\n\n        // \u8F6C\u7F6E \u5750\u6807\u53D8\u6362\n        float o = 0.0;\n        if (" + t2 + " == 1) {\n            o = getValueFromTensorPos_origin(oPos[0], oPos[1], oPos[2], oPos[3]);\n        }\n        else if (" + t2 + " == 2) {\n            o = getValueFromTensorPos_origin(\n                oPos[0], oPos[1],\n                oPos[(2 + " + r2 + ") > 3 ? 3 : (2 + " + r2 + ")],\n                oPos[(2 + " + i2 + ") > 3 ? 3 : (2 + " + i2 + ")]\n            );\n        }\n        else if (" + t2 + " == 3) {\n            o = getValueFromTensorPos_origin(\n                oPos[0],\n                oPos[(1 + " + r2 + ") > 3 ? 3 : (1 + " + r2 + ")],\n                oPos[(1 + " + i2 + ") > 3 ? 3 : (1 + " + i2 + ")],\n                oPos[(1 + " + s2 + ") > 3 ? 3 : (1 + " + s2 + ")]\n            );\n        }\n        else if (" + t2 + " == 4) {\n            o = getValueFromTensorPos_origin(\n                oPos[" + r2 + "],\n                oPos[" + i2 + "],\n                oPos[" + s2 + "],\n                oPos[" + o3[3] + "]\n            );\n        }\n\n        setOutput(float(o));\n    }\n    ";
          }, textureFuncConf: { origin: ["getValueFromTensorPos"] }, behaviors: ["normalizePerm"] }, unpacked_2_packed: { mainFunc: function(n3, e3) {
            return "\n    // start\u51FD\u6570\n    void main() {\n        ivec4 oPos = getOutputTensorPos();\n        vec4 out4;\n        for (int i = 0; i < 4; i++) {\n            vec4 o = getValueFromTensorPosPacking_origin(oPos[0], oPos[1] * 4 + i, oPos[2], oPos[3]);\n            out4[i] = o[0];\n        }\n        setPackedOutput(out4);\n    }\n    ";
          }, textureFuncConf: { origin: ["getValueFromTensorPosPacking"] } }, packed_2_unpacked: { mainFunc: function(n3, e3) {
            return "\n    // start\u51FD\u6570\n    void main() {\n        ivec4 oPos = getOutputTensorPos();\n        float res = 0.0;\n        int c1 = calMod(oPos[1], 4);\n        vec4 o = getValueFromTensorPosPacking_origin(oPos[0], oPos[1] / 4, oPos[2], oPos[3]);\n\n        if (c1 == 0) {\n            res = o.r;\n        } else if (c1 == 1) {\n            res = o.g;\n        } else if (c1 == 2) {\n            res = o.b;\n        } else if (c1 == 3) {\n            res = o.a;\n        }\n        setOutput(res);\n    }\n    ";
          }, textureFuncConf: { origin: ["getValueFromTensorPosPacking"] } }, unsqueeze2: { mainFunc: function(n3, e3) {
            var o3 = n3.origin, t2 = e3.axes, r2 = o3.length_unformatted_shape, i2 = Array.isArray(t2) ? t2 : [t2], s2 = 4 - r2 - i2.length, a2 = i2.map(function(n4) {
              return n4 + s2;
            }), u2 = [0, 1, 2, 3].filter(function(n4) {
              return -1 === a2.indexOf(n4);
            }).map(function(n4) {
              return "oPos[" + n4 + "]";
            }), l2 = Array.from(new Array(a2.length), function() {
              return "0";
            });
            return u2.splice.apply(u2, function() {
              for (var n4 = 0, e4 = 0, o4 = arguments.length; e4 < o4; e4++) n4 += arguments[e4].length;
              var t3 = Array(n4), r3 = 0;
              for (e4 = 0; e4 < o4; e4++) for (var i3 = arguments[e4], s3 = 0, a3 = i3.length; s3 < a3; s3++, r3++) t3[r3] = i3[s3];
              return t3;
            }([0, 0], l2)), "\n    void main() {\n        ivec4 oPos = getOutputTensorPos();\n        float o = 0.0;\n        o = getValueFromTensorPos_origin(" + u2.join(",") + ");\n        setOutput(float(o));\n    }\n    ";
          }, textureFuncConf: { origin: ["getValueFromTensorPos"] } }, flatten_contiguous_range: { mainFunc: function(n3, e3) {
            var o3 = n3.origin, t2 = n3.out;
            return "\n    void main() {\n        ivec4 oPos = getOutputTensorPos();\n        // \u8F93\u51FA\u5750\u6807\u8F6C\u6362\u4E3A\u8F93\u5165\u5750\u6807\n        int sumVal = oPos.a\n            + oPos.b * " + t2.width_shape + "\n            + oPos.g * " + t2.height_shape + " * " + t2.width_shape + "\n            + oPos.r * " + t2.channel + " * " + t2.width_shape + " * " + t2.height_shape + ";\n        ivec4 new_oPos = transferFromNHWCtoNCHW(\n            sumVal,\n            " + o3.channel + ",\n            " + o3.width_shape + ",\n            " + o3.height_shape + ",\n            " + o3.total_shape + "\n        );\n        float o = getValueFromTensorPos_origin(new_oPos.r, new_oPos.g, new_oPos.b, new_oPos.a);\n        setOutput(float(o));\n    }\n    ";
          }, textureFuncConf: { origin: ["getValueFromTensorPos"] }, commonFuncConf: ["transferFromNHWCtoNCHW"] }, flatten2: cn, greater_than: { mainFunc: function(n3, e3) {
            return "\n    // start\u51FD\u6570\n    void main(void) {\n        ivec4 oPos = getOutputTensorPos();\n        // \u8F93\u51FA\u5750\u6807\u8F6C\u6362\u4E3A\u8F93\u5165\u5750\u6807\n        float x = getValueFromTensorPos_input(oPos.r, oPos.g, oPos.b, oPos.a);\n        float y = getValueFromTensorPos_counter(oPos.r, oPos.g, oPos.b, oPos.a);\n\n        setOutput(bool(x >= y));\n    }\n    ";
          }, textureFuncConf: { origin: ["getValueFromTensorPos"], counter: ["getValueFromTensorPos"] } }, reduce_sum: { mainFunc: function(n3, e3) {
            return "\n    // start\u51FD\u6570\n    void main(void) {\n        ivec4 oPos = getOutputTensorPos();\n        // \u8F93\u51FA\u5750\u6807\u8F6C\u6362\u4E3A\u8F93\u5165\u5750\u6807\n        float o = 0.0;\n        for (int i = 0; i < " + e3.inputs_dim + "; i++) {\n            oPos[" + e3.dim + "] = i;\n            o += getValueFromTensorPos_origin(oPos.r, oPos.g, oPos.b, oPos.a);;\n        }\n        setOutput(float(o));\n    }\n    ";
          }, textureFuncConf: { origin: ["getValueFromTensorPos"] }, behaviors: ["normalizeDim"] }, where: { mainFunc: function(n3, e3) {
            return "\n    // start\u51FD\u6570\n    void main(void) {\n        ivec4 oPos = getOutputTensorPos();\n        // \u8F93\u51FA\u5750\u6807\u8F6C\u6362\u4E3A\u8F93\u5165\u5750\u6807\n        float x = getValueFromTensorPos_input(oPos.r, oPos.g, oPos.b, oPos.a);\n        float y = getValueFromTensorPos_counter(oPos.r, oPos.g, oPos.b, oPos.a);\n        float condition = getValueFromTensorPos_condition(oPos.r, oPos.g, oPos.b, oPos.a);\n        float o = 0.0;\n\n        if (bool(condition)) {\n            o = x;\n        }\n        else {\n            o = y;\n        }\n        setOutput(o);\n    }\n    ";
          }, textureFuncConf: { origin: ["getValueFromTensorPos"], counter: ["getValueFromTensorPos"], condition: ["getValueFromTensorPos"] } }, connect: { mainFunc: function(n3, e3) {
            var o3 = n3.out, t2 = o3.total_shape, r2 = o3.width_shape, i2 = o3.height_shape, s2 = o3.channel, a2 = g([t2 / (r2 * i2 * s2), s2, i2, r2]), u2 = Object.keys(n3).filter(function(n4) {
              return "out" !== n4;
            }).map(function(e4) {
              return n3[e4].total_shape;
            }), l2 = u2.map(function(n4, e4) {
              return u2.slice(0, e4 + 1).reduce(function(n5, e5) {
                return n5 + e5;
              }, 0);
            }), f2 = "";
            return l2.forEach(function(n4, e4) {
              f2 += 0 === e4 ? "\n            if (sumVal < " + n4 + ") {\n                co = getTensorPosFromArrayIndex_origin(sumVal);\n                o = getValueFromTensorPos_origin(co.r, co.g, co.b, co.a);\n            }" : "\n            else if (sumVal < " + n4 + ") {\n                co = getTensorPosFromArrayIndex_origin_" + e4 + "(sumVal - " + l2[e4 - 1] + ");\n                o = getValueFromTensorPos_origin_" + e4 + "(co.r, co.g, co.b, co.a);\n            }\n            ";
            }), "\n    // start\u51FD\u6570\n    void main(void) {\n        ivec4 oPos = getOutputTensorPos();\n        float o = 0.0;\n        ivec4 co;\n        int sumVal = oPos.b * " + a2[2] + " + oPos.a;\n        " + f2 + "\n        setOutput(float(o));\n    }\n    ";
          }, textureFuncConf: { "@all": ["getValueFromTensorPos", "getTensorPosFromArrayIndex"] } }, reduce_mean: { mainFunc: function(n3, e3) {
            var o3 = e3.inputs_dim;
            return "\n    // start\u51FD\u6570\n    void main(void) {\n        ivec4 oPos = getOutputTensorPos();\n        // \u8F93\u51FA\u5750\u6807\u8F6C\u6362\u4E3A\u8F93\u5165\u5750\u6807\n        float o = 0.0;\n        for (int i = 0; i < " + o3 + "; i++) {\n            oPos[" + e3.dim + "] = i;\n            o += getValueFromTensorPos_origin(oPos.r, oPos.g, oPos.b, oPos.a);\n        }\n        o = o / float(" + o3 + ");\n        setOutput(o);\n    }\n    ";
          }, textureFuncConf: { origin: ["getValueFromTensorPos"] }, behaviors: ["normalizeDim"] }, hard_swish: { mainFunc: function(n3, e3) {
            var o3 = e3.offset, t2 = void 0 === o3 ? 3 : o3, r2 = e3.scale, i2 = void 0 === r2 ? 6 : r2, s2 = e3.threshold;
            return "\n    void main(void) {\n        // \u8F93\u51FA\u6570\u636E\n        ivec4 oPos = getOutputTensorPos();\n        float o = getValueFromTensorPos_origin(oPos.r, oPos.g, oPos.b, oPos.a);\n        float res = o * min(max(0.0, o + float(" + t2 + ")), float(" + (void 0 === s2 ? 6 : s2) + ")) / float(" + i2 + ");\n        setOutput(res);\n    }\n    ";
          }, textureFuncConf: { origin: ["getValueFromTensorPos"] } }, nearest_interp: Pn, nearest_interp_v2: Pn, cast: { mainFunc: function(n3, e3) {
            var o3 = "";
            switch (e3.out_dtype) {
              case 0:
                o3 = "\n            float res_bool = 0.0;\n            if (o != 0.0) {\n                res_bool = 1.0;\n            }\n            setOutput(res_bool);";
                break;
              case 1:
              case 2:
              case 3:
                o3 = "\n            int res_int = int(o);\n            setOutput(float(res_int));";
                break;
              default:
                o3 = "       \n            float res_float = o;\n            setOutput(res_float);";
            }
            return "\n    void main() {\n       // \u8F93\u51FA\u6570\u636E\n        ivec4 oPos = getOutputTensorPos();\n        float o = getValueFromTensorPos_origin(oPos.r, oPos.g, oPos.b, oPos.a);\n        " + o3 + "\n    }\n    ";
          }, textureFuncConf: { origin: ["getValueFromTensorPos"] } }, fill_constant_batch_size_like: { mainFunc: function(n3, e3) {
            return "\n    // start\u51FD\u6570\n    void main(void) {\n        float res = float(" + e3.value + ");\n        setOutput(res);\n    }\n";
          } }, rnn_matmul: { mainFunc: function(n3, e3) {
            var o3 = n3.weightlist_0, t2 = e3.input_axis, r2 = e3.state_axis, i2 = e3.batch, s2 = e3.reverse, a2 = void 0 !== s2 && s2 ? i2 - t2 - 1 : t2;
            return "\n    void main() {\n         float res = 0.0;\n        // \u83B7\u53D6output\u7684\u5750\u6807\n        ivec4 out_pos = getOutputTensorPos();\n        \n        if (" + (0 === t2) + ") {\n            res = getValueFromTensorPos_origin(out_pos[0], " + a2 + ", out_pos[2], out_pos[3]);\n            setOutput(res);\n            return;\n        }\n        \n        ivec4 origin_pos = out_pos;\n        ivec4 weight_pos = out_pos;\n\n        weight_pos[1] = 0;\n        weight_pos[2] = weight_pos[3];\n\n        float o = 0.0;\n        float w_hh = 0.0;\n        float prestate_h = 0.0;\n        res = getValueFromTensorPos_origin(out_pos[0], " + a2 + ", out_pos[2], out_pos[3]);\n        for (int j = 0; j < " + o3.width_shape + "; j++) {\n            prestate_h = getValueFromTensorPos_prestate(origin_pos[0], origin_pos[1], origin_pos[2], j);\n            w_hh = getValueFromTensorPos_weightlist_0(out_pos[0], " + r2 + ", out_pos[3], j);\n            o += w_hh * prestate_h;\n        }\n        res += o;\n\n        setOutput(res);\n    }\n    ";
          }, textureFuncConf: { origin: ["getValueFromTensorPos"], prestate: ["getValueFromTensorPos"], weightlist_0: ["getValueFromTensorPos"] } }, rnn_hidden: { mainFunc: function(n3, e3) {
            var o3 = e3.state_axis, t2 = e3.hidden_size;
            return "\n    // start\u51FD\u6570\n    void main(void) {\n        ivec4 oPos = getOutputTensorPos();\n        float origin = getValueFromTensorPos_origin(oPos.r, oPos.g, oPos.b, oPos.a);\n        float cell = getValueFromTensorPos_origin(oPos.r, oPos.g, oPos.b, oPos.a + " + t2 + ");\n        float appender = getValueFromTensorPos_origin(oPos.r, oPos.g, oPos.b, oPos.a + " + 2 * t2 + ");\n        float fourth = getValueFromTensorPos_origin(oPos.r, oPos.g, oPos.b, oPos.a + " + 3 * t2 + ");\n        float counter  = getValueFromTensorPos_counter(oPos.r, " + o3 + ", oPos.b, oPos.a);\n        float i = 1.0 / (1.0 + exp(-origin));\n        float f = 1.0 / (1.0 + exp(-cell));\n        float o = 1.0 / (1.0 + exp(-fourth));\n        float c = f * counter + i * tanh_calc(appender);\n        float h = o * tanh_calc(c);\n        \n        setOutput(h);\n    }\n    ";
          }, textureFuncConf: { origin: ["getValueFromTensorPos"], counter: ["getValueFromTensorPos"] } }, rnn_cell: { mainFunc: function(n3, e3) {
            var o3 = e3.state_axis, t2 = e3.hidden_size;
            return "\n    // start\u51FD\u6570\n    void main(void) {\n        ivec4 oPos = getOutputTensorPos();\n        float origin = getValueFromTensorPos_origin(oPos.r, oPos.g, oPos.b, oPos.a);\n        float cell = getValueFromTensorPos_origin(oPos.r, oPos.g, oPos.b, oPos.a + " + t2 + ");\n        float appender = getValueFromTensorPos_origin(oPos.r, oPos.g, oPos.b, oPos.a + " + 2 * t2 + ");\n        float fourth = getValueFromTensorPos_origin(oPos.r, oPos.g, oPos.b, oPos.a + " + 3 * t2 + ");\n        float counter  = getValueFromTensorPos_counter(oPos.r, " + o3 + ", oPos.b, oPos.a);\n        float i = 1.0 / (1.0 + exp(-origin));\n        float f = 1.0 / (1.0 + exp(-cell));\n        float c = f * counter + i * tanh_calc(appender);\n        \n        setOutput(c);\n    }\n    ";
          }, textureFuncConf: { origin: ["getValueFromTensorPos"], counter: ["getValueFromTensorPos"] } }, rnn_origin: { mainFunc: function(n3, e3) {
            var o3 = n3.weightlist_0, t2 = n3.weightlist_1, r2 = e3.state_axis;
            return "\n    void main() {\n        float res = 0.0;\n        // \u83B7\u53D6output\u7684\u5750\u6807\n        ivec4 out_pos = getOutputTensorPos();\n        ivec4 origin_pos = out_pos;\n        ivec4 weight_pos = out_pos;\n      \n        weight_pos[1] = 0;\n        weight_pos[2] = weight_pos[3];\n\n        float b_ih = getValueFromTensorPos_weightlist_2(0, 0, 0, out_pos[3]);\n        float b_hh = getValueFromTensorPos_weightlist_3(0, 0, 0, out_pos[3]);\n        \n        for (int j = 0; j < " + o3.width_shape + "; j++) {\n            float o = getValueFromTensorPos_origin(origin_pos[0], origin_pos[1], 0, j);\n            float w_ih = getValueFromTensorPos_weightlist_0(0, 0, out_pos[3], j);\n            res += w_ih * o;\n        }\n        res += b_ih;\n\n        for (int j = 0; j < " + t2.width_shape + "; j++) {\n                float prestate = getValueFromTensorPos_prestate(0, 0, 0, j);\n                float w_hh = getValueFromTensorPos_weightlist_1(0, " + r2 + ", out_pos[3], j);\n                res += w_hh * prestate;\n        }\n        res += b_hh;\n \n        setOutput(res);\n    }\n    ";
          }, textureFuncConf: { origin: ["getValueFromTensorPos"], prestate: ["getValueFromTensorPos"], weightlist_0: ["getValueFromTensorPos"], weightlist_1: ["getValueFromTensorPos"], weightlist_2: ["getValueFromTensorPos"], weightlist_3: ["getValueFromTensorPos"] } }, pool2d_avg: { mainFunc: function(n3, e3) {
            var o3 = n3.origin, t2 = e3.strides, r2 = void 0 === t2 ? [] : t2, i2 = e3.paddings, s2 = void 0 === i2 ? [] : i2, a2 = e3.ksize, u2 = r2[0], l2 = void 0 === u2 ? 1 : u2, f2 = r2[1], c2 = void 0 === f2 ? 1 : f2, _2 = s2[0], g2 = void 0 === _2 ? 0 : _2, h2 = s2[1], d2 = void 0 === h2 ? 0 : h2, p2 = a2[0], m2 = a2[1];
            return "\n    // start\u51FD\u6570\n    void main(void) {\n        float res = 0.0;\n        // \u83B7\u53D6output\u7684\u5750\u6807\n        ivec4 out_pos = getOutputTensorPos();\n        // X\u3001Y\u65B9\u5411\u7684\u79FB\u52A8\u6B65\u957F\n        int oy_base = out_pos[2] * " + l2 + " - " + g2 + ";\n        int ox_base = out_pos[3] * " + c2 + " - " + d2 + ";\n        for (int fy = 0; fy < " + p2 + "; fy++) {\n            int oy = oy_base + fy;\n            if (oy >= " + o3.height_shape + ") {\n                break;\n            }\n            if (oy < 0) {\n                continue;\n            }\n            for (int fx = 0; fx < " + m2 + "; fx++) {\n                int ox = ox_base + fx;\n                if (ox >= " + o3.width_shape + ") {\n                    break;\n                }\n                if (ox < 0) {\n                    continue;\n                }\n                // origin\u6570\u636E\n                float curr = getValueFromTensorPos_origin(out_pos[0], out_pos[1], oy, ox);\n                res += curr;\n                // \u5728\u5E73\u5747\u6C60\u5316\u6A21\u5F0F\u5FFD\u7565\u586B\u5145\u503C(exclusive\u9ED8\u8BA4\u4E3Atrue\uFF09\n            }\n        }\n        res = res / float(" + p2 + " * " + m2 + ");\n        setOutput(res);\n    }\n    ";
          }, textureFuncConf: { origin: ["getValueFromTensorPos"] }, behaviors: ["setPacked", "setAdaptive", "isGlobalPooling"] }, prelu: pn("prelu"), relu6: pn("relu6"), leakyRelu: pn("leakyRelu"), scale: pn("scale"), sigmoid: pn("sigmoid"), relu: pn("relu"), hard_sigmoid: pn("hard_sigmoid"), pow: pn("pow"), sqrt: pn("sqrt"), tanh: pn("tanh"), exp: pn("exp"), squeeze2: mn, pad3d: { mainFunc: function(n3, e3) {
            var o3 = n3.origin, t2 = e3.paddings, r2 = e3.mode, i2 = e3.value, s2 = function(n4) {
              var e4 = n4.total_shape, o4 = n4.channel, t3 = n4.height_shape, r3 = n4.width_shape;
              return [e4 / o4 / t3 / r3, o4, t3, r3];
            }(o3), a2 = { reflect: "\n            int a;\n            int b;\n            if (oPos.a - " + t2[0] + " < 0) {\n                a = " + t2[0] + " - oPos.a;\n            }\n            else if (oPos.a - " + t2[0] + " >= " + s2[3] + ") {\n                a = " + s2[3] + " - (oPos.a - " + t2[0] + " - " + s2[3] + " + 1) - 1;\n            }\n            else {\n                a = oPos.a - " + t2[0] + ";\n            }\n            if (oPos.b - " + t2[2] + " < 0) {\n                b = " + t2[2] + " - oPos.b;\n            }\n            else if (oPos.b - " + t2[2] + " >= " + s2[2] + ") {\n                b = " + s2[2] + " - (oPos.b - " + t2[2] + " - " + s2[2] + " + 1) - 1;\n            }\n            else {\n                b = oPos.b - " + t2[2] + ";\n            }\n            o = getValueFromTensorPos_origin(oPos.r, oPos.g, b, a);\n        ", replicate: "\n            int a;\n            int b;\n            if (oPos.a - " + t2[0] + " < 0) {\n                a = 0;\n            }\n            else if (oPos.a - " + t2[0] + " >= " + s2[3] + ") {\n                a = " + s2[3] + " - 1;\n            }\n            else {\n                a = oPos.a - " + t2[0] + ";\n            }\n            if (oPos.b - " + t2[2] + " < 0) {\n                b = 0;\n            }\n            else if (oPos.b - " + t2[2] + " >= " + s2[2] + ") {\n                b = " + s2[2] + " - 1;\n            }\n            else {\n                b = oPos.b - " + t2[2] + ";\n            }\n            o = getValueFromTensorPos_origin(oPos.r, oPos.g, b, a);\n        ", circular: "\n            int a;\n            int b;\n            if (oPos.a - " + t2[0] + " < 0) {\n                a = int(mod(float(" + t2[0] + " + oPos.a - 1), float(" + s2[3] + ")));\n            }\n            else if (oPos.a - " + t2[0] + " >= " + s2[3] + ") {\n                a = int(mod(float(oPos.a - " + t2[0] + " - " + s2[3] + "), float(" + s2[3] + ")));\n            }\n            else {\n                a = oPos.a - " + t2[0] + ";\n            }\n            if (oPos.b - " + t2[2] + " < 0) {\n                b = int(mod(float(" + t2[2] + " + oPos.b - 1), float(" + s2[2] + ")));\n            }\n            else if (oPos.b - " + t2[2] + " >= " + s2[2] + ") {\n                b = int(mod(float(oPos.b - " + t2[2] + " - " + s2[2] + "), float(" + s2[2] + ")));\n            }\n            else {\n                b = oPos.b - " + t2[2] + ";\n            }\n            o = getValueFromTensorPos_origin(oPos.r, oPos.g, b, a);\n        ", constant: "", undefined: "" };
            return "\n    // start\u51FD\u6570\n    void main(void) {\n        ivec4 oPos = getOutputTensorPos();\n        float o = " + (i2 || "0.0") + ";\n        if (oPos.a - " + t2[0] + " >= 0\n            && oPos.b - " + t2[2] + " >= 0\n            && oPos.a - " + t2[0] + " < " + s2[3] + "\n            && oPos.b - " + t2[2] + " < " + s2[2] + "\n        ) {\n            o = getValueFromTensorPos_origin(oPos.r, oPos.g, oPos.b - " + t2[2] + ", oPos.a - " + t2[0] + ");\n        }\n        else {\n            " + a2[r2] + "\n        }\n        setOutput(float(o));\n    }\n    ";
          }, textureFuncConf: { origin: ["getValueFromTensorPos"] } }, bilinear_interp_v2: gn, shuffle_channel: { mainFunc: function(n3, e3) {
            var o3 = n3.out, t2 = e3.group, r2 = void 0 === t2 ? 2 : t2, i2 = o3.total_shape, s2 = o3.height_shape, a2 = o3.width_shape, u2 = o3.channel, l2 = [1, 0, 2, 3];
            return "\n    // start\u51FD\u6570\n    void main(void) {\n        // \u8F93\u51FA\u6570\u636E\n        ivec4 oPos = getOutputTensorPos();\n        float o = 0.0;\n\n        int sumVal = oPos.a\n            + oPos.b * " + a2 + "\n            + oPos.g * " + s2 + " * " + a2 + "\n            + oPos.r * " + u2 + " * " + a2 + " * " + s2 + ";\n\n        ivec4 transpose_out_pos = transferFromNHWCtoNCHW(\n            sumVal,\n            " + r2 + ",\n            " + a2 + ",\n            " + s2 + ",\n            " + i2 + "\n        );\n\n        ivec4 transpose_in_pos = ivec4(transpose_out_pos[" + l2[0] + "],\n            transpose_out_pos[" + l2[1] + "], transpose_out_pos[" + l2[2] + "], transpose_out_pos[" + l2[3] + "]);\n        int sumVal2 = transpose_in_pos.a\n            + transpose_in_pos.b * " + a2 + "\n            + transpose_in_pos.g * " + s2 + " * " + a2 + "\n            + transpose_in_pos.r * " + u2 / r2 + " * " + a2 + " * " + s2 + ";\n        ivec4 origin_oPos = transferFromNHWCtoNCHW(\n            sumVal2,\n            " + u2 + ",\n            " + a2 + ",\n            " + s2 + ",\n            " + i2 + "\n        );\n\n\n        o = getValueFromTensorPos_origin(\n            origin_oPos[0],\n            origin_oPos[1],\n            origin_oPos[2],\n            origin_oPos[3]\n        );\n\n        setOutput(float(o));\n    }\n    ";
          }, textureFuncConf: { origin: ["getValueFromTensorPos"] }, commonFuncConf: ["transferFromNHWCtoNCHW"] }, pack_out: { mainFunc: function(n3, e3) {
            return "\n\n    // start\u51FD\u6570\n    void main() {\n        ivec4 oPos = getOutputTensorPos();\n        vec2 outCoord = vCoord.xy * _2d_shape_texture_out;\n        int index = int(outCoord.x) + int(outCoord.y) * int(" + n3.out.width_texture + ");\n\n        int first = index * 4;\n        int sec = index * 4 + 1;\n        int third = index * 4 + 2;\n        int fourth = index * 4 + 3;\n\n        ivec4 rPos = getTensorPosFromArrayIndex_origin(first);\n        ivec4 gPos = getTensorPosFromArrayIndex_origin(sec);\n        ivec4 bPos = getTensorPosFromArrayIndex_origin(third);\n        ivec4 aPos = getTensorPosFromArrayIndex_origin(fourth);\n\n        float r = getValueFromTensorPos_origin(rPos.r, rPos.g, rPos.b, rPos.a);\n        float g = getValueFromTensorPos_origin(gPos.r, gPos.g, gPos.b, gPos.a);\n        float b = getValueFromTensorPos_origin(bPos.r, bPos.g, bPos.b, bPos.a);\n        float a = getValueFromTensorPos_origin(aPos.r, aPos.g, aPos.b, aPos.a);\n\n        setPackedOutput(vec4(r, g, b, a));\n    }\n    ";
          }, textureFuncConf: { origin: ["getValueFromTensorPos", "getTensorPosFromArrayIndex"] } }, nhwc_2_nchw: { mainFunc: function(n3, e3) {
            var o3 = n3.origin, t2 = n3.out;
            return "\n    void main() {\n        ivec4 oPos = getOutputTensorPos();\n        // \u8F93\u51FA\u5750\u6807\u8F6C\u6362\u4E3A\u8F93\u5165\u5750\u6807\n        int sumVal = oPos.a * " + t2.channel + "\n            + oPos.b * " + t2.width_shape + " * " + t2.channel + "\n            + oPos.g\n            + oPos.r * " + t2.channel + " * " + t2.width_shape + " * " + t2.height_shape + ";\n        ivec4 new_oPos = transferFromNHWCtoNCHW(\n            sumVal,\n            " + o3.channel + ",\n            " + o3.width_shape + ",\n            " + o3.height_shape + ",\n            " + o3.total_shape + "\n        );\n        float o = getValueFromTensorPos_origin(new_oPos.r, new_oPos.g, new_oPos.b, new_oPos.a);\n        setOutput(float(o));\n    }\n    ";
          }, textureFuncConf: { origin: ["getValueFromTensorPos"] }, commonFuncConf: ["transferFromNHWCtoNCHW"] }, feedPost: { mainFunc: function(n3, e3) {
            var o3 = n3.out, t2 = e3.mean, r2 = void 0 === t2 ? [0, 0, 0] : t2, i2 = e3.std, s2 = void 0 === i2 ? [1, 1, 1] : i2, a2 = o3.total_shape, u2 = o3.height_shape, l2 = o3.width_shape, f2 = o3.channel;
            return "\n    // start\u51FD\u6570\n    void main(void) {\n        ivec4 nhwcPos = getOutputTensorPos();\n        int sumVal = nhwcPos.a\n            + nhwcPos.b * " + l2 + "\n            + nhwcPos.g * " + u2 + " * " + l2 + "\n            + nhwcPos.r * " + f2 + " * " + l2 + " * " + u2 + ";\n\n        ivec4 oPos = transferFromNHWCtoNCHW(\n            sumVal,\n            " + f2 + ",\n            " + l2 + ",\n            " + u2 + ",\n            " + a2 + "\n        );\n        float res = 0.0;\n        int c1 = int(mod(float(oPos[1]), 4.0));\n        int c = oPos[1];\n        vec4 o = getValueFromTensorPosPacking_origin(oPos[0], c / 4, oPos[2], oPos[3]);\n\n        if (c1 == 0) {\n            res = o.r;\n        } else if (c1 == 1) {\n            res = o.g;\n        } else if (c1 == 2) {\n            res = o.b;\n        } else if (c1 == 3) {\n            res = o.a;\n        }\n\n        if (c == 0) {\n            res = (res - float(" + r2[0] + ")) / float(" + s2[0] + ");\n        } else if (c == 1) {\n            res = (res - float(" + r2[1] + ")) / float(" + s2[1] + ");\n        } else if (c == 2) {\n            res = (res - float(" + r2[2] + ")) / float(" + s2[2] + ");\n        }\n        setOutput(float(res));\n    }\n    ";
          }, textureFuncConf: { origin: ["getValueFromTensorPosPacking"] }, commonFuncConf: ["transferFromNHWCtoNCHW"] }, imgFeed: { mainFunc: function() {
            return "\n    uniform vec2 u_scale;\n    uniform int u_keep_ratio;\n\n    void main(void) {\n        vec2 outCoord = vCoord.xy;\n        // \u652F\u6301\u6A21\u578B\u4E0D\u6309\u6BD4\u4F8B\u62C9\u4F38\n        if (u_keep_ratio == 0) {\n            vec4 origin = TEXTURE2D(texture_origin, outCoord);\n            setPackedOutput(origin);\n            return;\n        }\n        float startX = (1.0 - u_scale.x) / 2.0;\n        float endX = startX + u_scale.x;\n        float startY = (1.0 - u_scale.y) / 2.0;\n        float endY = startY + u_scale.y;\n\n        if (outCoord.x >= startX && outCoord.x <= endX && outCoord.y >= startY && outCoord.y <= endY) {\n            vec2 newPos = (outCoord - vec2(startX, startY)) / u_scale;\n            vec4 origin = TEXTURE2D(texture_origin, newPos);\n            setPackedOutput(origin);\n        }\n        else {\n            setPackedOutput(vec4(1.0));\n        }\n    }\n    ";
          }, textureFuncConf: { origin: [] } }, box_coder: { mainFunc: function(n3, e3) {
            var o3 = "decode_center_size" === e3.code_type;
            return "\n    // start\u51FD\u6570\n    vec2 getPriorBoxData(int r, int g, int b, int m, int n) {\n        float start = getValueFromTensorPos_priorbox(r, g, b, m);\n        float end = getValueFromTensorPos_priorbox(r, g, b, n);\n        float len = end - start;\n        return vec2(start + len / 2.0, len);\n    }\n    vec2 getBoxVarData(int r, int g, int b, int m, int n) {\n        return vec2(\n            getValueFromTensorPos_priorboxvar(r, g, b, m),\n            getValueFromTensorPos_priorboxvar(r, g, b, n)\n        );\n    }\n    vec2 getTargetBoxData(int r, int g, int b, int m, int n) {\n        " + (o3 ? "\n            return vec2(\n                getValueFromTensorPos_targetbox(r, g, b, m),\n                getValueFromTensorPos_targetbox(r, g, b, n)\n            );\n        " : "\n            float start = getValueFromTensorPos_targetbox(r, g, b, m);\n            float end = getValueFromTensorPos_targetbox(r, g, b, n);\n            float len = end - start;\n            return vec2(start + len / 2.0, len);\n        ") + "\n    }\n\n    void main(void) {\n        ivec4 oPos = getOutputTensorPos();\n        int r = int(oPos.r);\n        int g = int(oPos.g);\n        int b = int(oPos.b);\n        int a = int(oPos.a);\n        // \u8F93\u51FA\u5750\u6807\u8F6C\u6362\u4E3A\u8F93\u5165\u5750\u6807\n        float o = 0.0;\n\n        int m = 0;\n        int n = 0;\n        if (a == 0 || a == " + (o3 ? 2 : 1) + ") {\n            m = 0;\n            n = 2;\n        }\n        else {\n            m = 1;\n            n = 3;\n        }\n        vec2 priorbox = getPriorBoxData(r, g, b, m, n);\n        vec2 boxvar = getBoxVarData(r, g, b, m, n);\n        vec2 targetbox = getTargetBoxData(r, g, b, m, n);\n        float p1 = priorbox.r;\n        float p2 = priorbox.g;\n        float t1 = targetbox.r;\n        float t2 = targetbox.g;\n        float v1 = boxvar.r;\n        float v2 = boxvar.g;\n\n        " + (o3 ? "\n            float b1 = p2 * v1 * t1 + p1;\n            float b2 = exp(v2 * t2) * p2;\n            if (a == 0 || a == 1) {\n                o = b1 - b2 / 2.0 ;\n            }\n            else {\n                o = b1 + b2 / 2.0;\n            }\n        " : "\n            if (a == 0 || a == 1) {\n                o = (t1 - p1) / p2 / v1;\n            }\n            else {\n                o = log(abs(t2 / p2)) / v2;\n            }\n        ") + "\n        setOutput(float(o));\n    }\n    ";
          }, textureFuncConf: { targetbox: ["getValueFromTensorPos"], priorbox: ["getValueFromTensorPos"], priorboxvar: ["getValueFromTensorPos"] }, behaviors: [] }, density_prior_box: xn, prior_box: Tn, stack: Fn, slice: bn }, En = new $();
          !function(n3, e3, o3) {
            n3 && (u.backend = n3), e3 && (u.backendInstance = e3), o3 && Object.keys(o3).forEach(function(n4) {
              !function(n5, e4) {
                var o4 = n5.conf, t2 = n5.params, r2 = n5.main, i2 = n5.mainFunc, s2 = n5.textureFuncConf, a2 = n5.commonFuncConf, l2 = n5.behaviors, f2 = void 0 === l2 ? [] : l2, c2 = u.backend + "_" + e4;
                u.opRegistry.ops[c2] || (u.opRegistry.ops[c2] = { name: e4, conf: o4, params: t2, main: r2, mainFunc: i2, textureFuncConf: s2, commonFuncConf: a2, behaviors: f2 });
              }(o3[n4], n4);
            });
          }("webgl", En, yn);
        } }, e = {};
        function o(t) {
          if (e[t]) return e[t].exports;
          var r = e[t] = { exports: {} };
          return n[t](r, r.exports, o), r.exports;
        }
        return o.d = (n2, e2) => {
          for (var t in e2) o.o(e2, t) && !o.o(n2, t) && Object.defineProperty(n2, t, { enumerable: true, get: e2[t] });
        }, o.g = function() {
          if ("object" == typeof globalThis) return globalThis;
          try {
            return this || new Function("return this")();
          } catch (n2) {
            if ("object" == typeof window) return window;
          }
        }(), o.o = (n2, e2) => Object.prototype.hasOwnProperty.call(n2, e2), o.r = (n2) => {
          "undefined" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(n2, Symbol.toStringTag, { value: "Module" }), Object.defineProperty(n2, "__esModule", { value: true });
        }, o(400);
      })();
    });
  }
});

// node_modules/js-clipper/clipper.js
var require_clipper = __commonJS({
  "node_modules/js-clipper/clipper.js"(exports2, module2) {
    "use strict";
    var use_int32 = false;
    var use_xyz = false;
    var use_lines = true;
    var use_deprecated = false;
    var ClipperLib = {};
    var isNode = false;
    if (typeof module2 !== "undefined" && module2.exports) {
      module2.exports = ClipperLib;
      isNode = true;
    } else {
      if (typeof document !== "undefined") window.ClipperLib = ClipperLib;
      else self["ClipperLib"] = ClipperLib;
    }
    var navigator_appName;
    if (!isNode) {
      nav = navigator.userAgent.toString().toLowerCase();
      navigator_appName = navigator.appName;
    } else {
      nav = "chrome";
      navigator_appName = "Netscape";
    }
    var nav;
    var browser = {};
    if (nav.indexOf("chrome") != -1 && nav.indexOf("chromium") == -1) browser.chrome = 1;
    else browser.chrome = 0;
    if (nav.indexOf("chromium") != -1) browser.chromium = 1;
    else browser.chromium = 0;
    if (nav.indexOf("safari") != -1 && nav.indexOf("chrome") == -1 && nav.indexOf("chromium") == -1) browser.safari = 1;
    else browser.safari = 0;
    if (nav.indexOf("firefox") != -1) browser.firefox = 1;
    else browser.firefox = 0;
    if (nav.indexOf("firefox/17") != -1) browser.firefox17 = 1;
    else browser.firefox17 = 0;
    if (nav.indexOf("firefox/15") != -1) browser.firefox15 = 1;
    else browser.firefox15 = 0;
    if (nav.indexOf("firefox/3") != -1) browser.firefox3 = 1;
    else browser.firefox3 = 0;
    if (nav.indexOf("opera") != -1) browser.opera = 1;
    else browser.opera = 0;
    if (nav.indexOf("msie 10") != -1) browser.msie10 = 1;
    else browser.msie10 = 0;
    if (nav.indexOf("msie 9") != -1) browser.msie9 = 1;
    else browser.msie9 = 0;
    if (nav.indexOf("msie 8") != -1) browser.msie8 = 1;
    else browser.msie8 = 0;
    if (nav.indexOf("msie 7") != -1) browser.msie7 = 1;
    else browser.msie7 = 0;
    if (nav.indexOf("msie ") != -1) browser.msie = 1;
    else browser.msie = 0;
    ClipperLib.biginteger_used = null;
    var dbits;
    var canary = 244837814094590;
    var j_lm = (canary & 16777215) == 15715070;
    function BigInteger(a, b, c) {
      ClipperLib.biginteger_used = 1;
      if (a != null)
        if ("number" == typeof a && "undefined" == typeof b) this.fromInt(a);
        else if ("number" == typeof a) this.fromNumber(a, b, c);
        else if (b == null && "string" != typeof a) this.fromString(a, 256);
        else this.fromString(a, b);
    }
    function nbi() {
      return new BigInteger(null);
    }
    function am1(i, x, w, j, c, n) {
      while (--n >= 0) {
        var v = x * this[i++] + w[j] + c;
        c = Math.floor(v / 67108864);
        w[j++] = v & 67108863;
      }
      return c;
    }
    function am2(i, x, w, j, c, n) {
      var xl = x & 32767, xh = x >> 15;
      while (--n >= 0) {
        var l = this[i] & 32767;
        var h = this[i++] >> 15;
        var m = xh * l + h * xl;
        l = xl * l + ((m & 32767) << 15) + w[j] + (c & 1073741823);
        c = (l >>> 30) + (m >>> 15) + xh * h + (c >>> 30);
        w[j++] = l & 1073741823;
      }
      return c;
    }
    function am3(i, x, w, j, c, n) {
      var xl = x & 16383, xh = x >> 14;
      while (--n >= 0) {
        var l = this[i] & 16383;
        var h = this[i++] >> 14;
        var m = xh * l + h * xl;
        l = xl * l + ((m & 16383) << 14) + w[j] + c;
        c = (l >> 28) + (m >> 14) + xh * h;
        w[j++] = l & 268435455;
      }
      return c;
    }
    if (j_lm && navigator_appName == "Microsoft Internet Explorer") {
      BigInteger.prototype.am = am2;
      dbits = 30;
    } else if (j_lm && navigator_appName != "Netscape") {
      BigInteger.prototype.am = am1;
      dbits = 26;
    } else {
      BigInteger.prototype.am = am3;
      dbits = 28;
    }
    BigInteger.prototype.DB = dbits;
    BigInteger.prototype.DM = (1 << dbits) - 1;
    BigInteger.prototype.DV = 1 << dbits;
    var BI_FP = 52;
    BigInteger.prototype.FV = Math.pow(2, BI_FP);
    BigInteger.prototype.F1 = BI_FP - dbits;
    BigInteger.prototype.F2 = 2 * dbits - BI_FP;
    var BI_RM = "0123456789abcdefghijklmnopqrstuvwxyz";
    var BI_RC = new Array();
    var rr;
    var vv;
    rr = "0".charCodeAt(0);
    for (vv = 0; vv <= 9; ++vv) BI_RC[rr++] = vv;
    rr = "a".charCodeAt(0);
    for (vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;
    rr = "A".charCodeAt(0);
    for (vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;
    function int2char(n) {
      return BI_RM.charAt(n);
    }
    function intAt(s, i) {
      var c = BI_RC[s.charCodeAt(i)];
      return c == null ? -1 : c;
    }
    function bnpCopyTo(r) {
      for (var i = this.t - 1; i >= 0; --i) r[i] = this[i];
      r.t = this.t;
      r.s = this.s;
    }
    function bnpFromInt(x) {
      this.t = 1;
      this.s = x < 0 ? -1 : 0;
      if (x > 0) this[0] = x;
      else if (x < -1) this[0] = x + this.DV;
      else this.t = 0;
    }
    function nbv(i) {
      var r = nbi();
      r.fromInt(i);
      return r;
    }
    function bnpFromString(s, b) {
      var k;
      if (b == 16) k = 4;
      else if (b == 8) k = 3;
      else if (b == 256) k = 8;
      else if (b == 2) k = 1;
      else if (b == 32) k = 5;
      else if (b == 4) k = 2;
      else {
        this.fromRadix(s, b);
        return;
      }
      this.t = 0;
      this.s = 0;
      var i = s.length, mi = false, sh = 0;
      while (--i >= 0) {
        var x = k == 8 ? s[i] & 255 : intAt(s, i);
        if (x < 0) {
          if (s.charAt(i) == "-") mi = true;
          continue;
        }
        mi = false;
        if (sh == 0)
          this[this.t++] = x;
        else if (sh + k > this.DB) {
          this[this.t - 1] |= (x & (1 << this.DB - sh) - 1) << sh;
          this[this.t++] = x >> this.DB - sh;
        } else
          this[this.t - 1] |= x << sh;
        sh += k;
        if (sh >= this.DB) sh -= this.DB;
      }
      if (k == 8 && (s[0] & 128) != 0) {
        this.s = -1;
        if (sh > 0) this[this.t - 1] |= (1 << this.DB - sh) - 1 << sh;
      }
      this.clamp();
      if (mi) BigInteger.ZERO.subTo(this, this);
    }
    function bnpClamp() {
      var c = this.s & this.DM;
      while (this.t > 0 && this[this.t - 1] == c) --this.t;
    }
    function bnToString(b) {
      if (this.s < 0) return "-" + this.negate().toString(b);
      var k;
      if (b == 16) k = 4;
      else if (b == 8) k = 3;
      else if (b == 2) k = 1;
      else if (b == 32) k = 5;
      else if (b == 4) k = 2;
      else return this.toRadix(b);
      var km = (1 << k) - 1, d, m = false, r = "", i = this.t;
      var p = this.DB - i * this.DB % k;
      if (i-- > 0) {
        if (p < this.DB && (d = this[i] >> p) > 0) {
          m = true;
          r = int2char(d);
        }
        while (i >= 0) {
          if (p < k) {
            d = (this[i] & (1 << p) - 1) << k - p;
            d |= this[--i] >> (p += this.DB - k);
          } else {
            d = this[i] >> (p -= k) & km;
            if (p <= 0) {
              p += this.DB;
              --i;
            }
          }
          if (d > 0) m = true;
          if (m) r += int2char(d);
        }
      }
      return m ? r : "0";
    }
    function bnNegate() {
      var r = nbi();
      BigInteger.ZERO.subTo(this, r);
      return r;
    }
    function bnAbs() {
      return this.s < 0 ? this.negate() : this;
    }
    function bnCompareTo(a) {
      var r = this.s - a.s;
      if (r != 0) return r;
      var i = this.t;
      r = i - a.t;
      if (r != 0) return this.s < 0 ? -r : r;
      while (--i >= 0)
        if ((r = this[i] - a[i]) != 0) return r;
      return 0;
    }
    function nbits(x) {
      var r = 1, t;
      if ((t = x >>> 16) != 0) {
        x = t;
        r += 16;
      }
      if ((t = x >> 8) != 0) {
        x = t;
        r += 8;
      }
      if ((t = x >> 4) != 0) {
        x = t;
        r += 4;
      }
      if ((t = x >> 2) != 0) {
        x = t;
        r += 2;
      }
      if ((t = x >> 1) != 0) {
        x = t;
        r += 1;
      }
      return r;
    }
    function bnBitLength() {
      if (this.t <= 0) return 0;
      return this.DB * (this.t - 1) + nbits(this[this.t - 1] ^ this.s & this.DM);
    }
    function bnpDLShiftTo(n, r) {
      var i;
      for (i = this.t - 1; i >= 0; --i) r[i + n] = this[i];
      for (i = n - 1; i >= 0; --i) r[i] = 0;
      r.t = this.t + n;
      r.s = this.s;
    }
    function bnpDRShiftTo(n, r) {
      for (var i = n; i < this.t; ++i) r[i - n] = this[i];
      r.t = Math.max(this.t - n, 0);
      r.s = this.s;
    }
    function bnpLShiftTo(n, r) {
      var bs = n % this.DB;
      var cbs = this.DB - bs;
      var bm = (1 << cbs) - 1;
      var ds = Math.floor(n / this.DB), c = this.s << bs & this.DM, i;
      for (i = this.t - 1; i >= 0; --i) {
        r[i + ds + 1] = this[i] >> cbs | c;
        c = (this[i] & bm) << bs;
      }
      for (i = ds - 1; i >= 0; --i) r[i] = 0;
      r[ds] = c;
      r.t = this.t + ds + 1;
      r.s = this.s;
      r.clamp();
    }
    function bnpRShiftTo(n, r) {
      r.s = this.s;
      var ds = Math.floor(n / this.DB);
      if (ds >= this.t) {
        r.t = 0;
        return;
      }
      var bs = n % this.DB;
      var cbs = this.DB - bs;
      var bm = (1 << bs) - 1;
      r[0] = this[ds] >> bs;
      for (var i = ds + 1; i < this.t; ++i) {
        r[i - ds - 1] |= (this[i] & bm) << cbs;
        r[i - ds] = this[i] >> bs;
      }
      if (bs > 0) r[this.t - ds - 1] |= (this.s & bm) << cbs;
      r.t = this.t - ds;
      r.clamp();
    }
    function bnpSubTo(a, r) {
      var i = 0, c = 0, m = Math.min(a.t, this.t);
      while (i < m) {
        c += this[i] - a[i];
        r[i++] = c & this.DM;
        c >>= this.DB;
      }
      if (a.t < this.t) {
        c -= a.s;
        while (i < this.t) {
          c += this[i];
          r[i++] = c & this.DM;
          c >>= this.DB;
        }
        c += this.s;
      } else {
        c += this.s;
        while (i < a.t) {
          c -= a[i];
          r[i++] = c & this.DM;
          c >>= this.DB;
        }
        c -= a.s;
      }
      r.s = c < 0 ? -1 : 0;
      if (c < -1) r[i++] = this.DV + c;
      else if (c > 0) r[i++] = c;
      r.t = i;
      r.clamp();
    }
    function bnpMultiplyTo(a, r) {
      var x = this.abs(), y = a.abs();
      var i = x.t;
      r.t = i + y.t;
      while (--i >= 0) r[i] = 0;
      for (i = 0; i < y.t; ++i) r[i + x.t] = x.am(0, y[i], r, i, 0, x.t);
      r.s = 0;
      r.clamp();
      if (this.s != a.s) BigInteger.ZERO.subTo(r, r);
    }
    function bnpSquareTo(r) {
      var x = this.abs();
      var i = r.t = 2 * x.t;
      while (--i >= 0) r[i] = 0;
      for (i = 0; i < x.t - 1; ++i) {
        var c = x.am(i, x[i], r, 2 * i, 0, 1);
        if ((r[i + x.t] += x.am(i + 1, 2 * x[i], r, 2 * i + 1, c, x.t - i - 1)) >= x.DV) {
          r[i + x.t] -= x.DV;
          r[i + x.t + 1] = 1;
        }
      }
      if (r.t > 0) r[r.t - 1] += x.am(i, x[i], r, 2 * i, 0, 1);
      r.s = 0;
      r.clamp();
    }
    function bnpDivRemTo(m, q, r) {
      var pm = m.abs();
      if (pm.t <= 0) return;
      var pt = this.abs();
      if (pt.t < pm.t) {
        if (q != null) q.fromInt(0);
        if (r != null) this.copyTo(r);
        return;
      }
      if (r == null) r = nbi();
      var y = nbi(), ts = this.s, ms = m.s;
      var nsh = this.DB - nbits(pm[pm.t - 1]);
      if (nsh > 0) {
        pm.lShiftTo(nsh, y);
        pt.lShiftTo(nsh, r);
      } else {
        pm.copyTo(y);
        pt.copyTo(r);
      }
      var ys = y.t;
      var y0 = y[ys - 1];
      if (y0 == 0) return;
      var yt = y0 * (1 << this.F1) + (ys > 1 ? y[ys - 2] >> this.F2 : 0);
      var d1 = this.FV / yt, d2 = (1 << this.F1) / yt, e = 1 << this.F2;
      var i = r.t, j = i - ys, t = q == null ? nbi() : q;
      y.dlShiftTo(j, t);
      if (r.compareTo(t) >= 0) {
        r[r.t++] = 1;
        r.subTo(t, r);
      }
      BigInteger.ONE.dlShiftTo(ys, t);
      t.subTo(y, y);
      while (y.t < ys) y[y.t++] = 0;
      while (--j >= 0) {
        var qd = r[--i] == y0 ? this.DM : Math.floor(r[i] * d1 + (r[i - 1] + e) * d2);
        if ((r[i] += y.am(0, qd, r, j, 0, ys)) < qd) {
          y.dlShiftTo(j, t);
          r.subTo(t, r);
          while (r[i] < --qd) r.subTo(t, r);
        }
      }
      if (q != null) {
        r.drShiftTo(ys, q);
        if (ts != ms) BigInteger.ZERO.subTo(q, q);
      }
      r.t = ys;
      r.clamp();
      if (nsh > 0) r.rShiftTo(nsh, r);
      if (ts < 0) BigInteger.ZERO.subTo(r, r);
    }
    function bnMod(a) {
      var r = nbi();
      this.abs().divRemTo(a, null, r);
      if (this.s < 0 && r.compareTo(BigInteger.ZERO) > 0) a.subTo(r, r);
      return r;
    }
    function Classic(m) {
      this.m = m;
    }
    function cConvert(x) {
      if (x.s < 0 || x.compareTo(this.m) >= 0) return x.mod(this.m);
      else return x;
    }
    function cRevert(x) {
      return x;
    }
    function cReduce(x) {
      x.divRemTo(this.m, null, x);
    }
    function cMulTo(x, y, r) {
      x.multiplyTo(y, r);
      this.reduce(r);
    }
    function cSqrTo(x, r) {
      x.squareTo(r);
      this.reduce(r);
    }
    Classic.prototype.convert = cConvert;
    Classic.prototype.revert = cRevert;
    Classic.prototype.reduce = cReduce;
    Classic.prototype.mulTo = cMulTo;
    Classic.prototype.sqrTo = cSqrTo;
    function bnpInvDigit() {
      if (this.t < 1) return 0;
      var x = this[0];
      if ((x & 1) == 0) return 0;
      var y = x & 3;
      y = y * (2 - (x & 15) * y) & 15;
      y = y * (2 - (x & 255) * y) & 255;
      y = y * (2 - ((x & 65535) * y & 65535)) & 65535;
      y = y * (2 - x * y % this.DV) % this.DV;
      return y > 0 ? this.DV - y : -y;
    }
    function Montgomery(m) {
      this.m = m;
      this.mp = m.invDigit();
      this.mpl = this.mp & 32767;
      this.mph = this.mp >> 15;
      this.um = (1 << m.DB - 15) - 1;
      this.mt2 = 2 * m.t;
    }
    function montConvert(x) {
      var r = nbi();
      x.abs().dlShiftTo(this.m.t, r);
      r.divRemTo(this.m, null, r);
      if (x.s < 0 && r.compareTo(BigInteger.ZERO) > 0) this.m.subTo(r, r);
      return r;
    }
    function montRevert(x) {
      var r = nbi();
      x.copyTo(r);
      this.reduce(r);
      return r;
    }
    function montReduce(x) {
      while (x.t <= this.mt2)
        x[x.t++] = 0;
      for (var i = 0; i < this.m.t; ++i) {
        var j = x[i] & 32767;
        var u0 = j * this.mpl + ((j * this.mph + (x[i] >> 15) * this.mpl & this.um) << 15) & x.DM;
        j = i + this.m.t;
        x[j] += this.m.am(0, u0, x, i, 0, this.m.t);
        while (x[j] >= x.DV) {
          x[j] -= x.DV;
          x[++j]++;
        }
      }
      x.clamp();
      x.drShiftTo(this.m.t, x);
      if (x.compareTo(this.m) >= 0) x.subTo(this.m, x);
    }
    function montSqrTo(x, r) {
      x.squareTo(r);
      this.reduce(r);
    }
    function montMulTo(x, y, r) {
      x.multiplyTo(y, r);
      this.reduce(r);
    }
    Montgomery.prototype.convert = montConvert;
    Montgomery.prototype.revert = montRevert;
    Montgomery.prototype.reduce = montReduce;
    Montgomery.prototype.mulTo = montMulTo;
    Montgomery.prototype.sqrTo = montSqrTo;
    function bnpIsEven() {
      return (this.t > 0 ? this[0] & 1 : this.s) == 0;
    }
    function bnpExp(e, z) {
      if (e > 4294967295 || e < 1) return BigInteger.ONE;
      var r = nbi(), r2 = nbi(), g = z.convert(this), i = nbits(e) - 1;
      g.copyTo(r);
      while (--i >= 0) {
        z.sqrTo(r, r2);
        if ((e & 1 << i) > 0) z.mulTo(r2, g, r);
        else {
          var t = r;
          r = r2;
          r2 = t;
        }
      }
      return z.revert(r);
    }
    function bnModPowInt(e, m) {
      var z;
      if (e < 256 || m.isEven()) z = new Classic(m);
      else z = new Montgomery(m);
      return this.exp(e, z);
    }
    BigInteger.prototype.copyTo = bnpCopyTo;
    BigInteger.prototype.fromInt = bnpFromInt;
    BigInteger.prototype.fromString = bnpFromString;
    BigInteger.prototype.clamp = bnpClamp;
    BigInteger.prototype.dlShiftTo = bnpDLShiftTo;
    BigInteger.prototype.drShiftTo = bnpDRShiftTo;
    BigInteger.prototype.lShiftTo = bnpLShiftTo;
    BigInteger.prototype.rShiftTo = bnpRShiftTo;
    BigInteger.prototype.subTo = bnpSubTo;
    BigInteger.prototype.multiplyTo = bnpMultiplyTo;
    BigInteger.prototype.squareTo = bnpSquareTo;
    BigInteger.prototype.divRemTo = bnpDivRemTo;
    BigInteger.prototype.invDigit = bnpInvDigit;
    BigInteger.prototype.isEven = bnpIsEven;
    BigInteger.prototype.exp = bnpExp;
    BigInteger.prototype.toString = bnToString;
    BigInteger.prototype.negate = bnNegate;
    BigInteger.prototype.abs = bnAbs;
    BigInteger.prototype.compareTo = bnCompareTo;
    BigInteger.prototype.bitLength = bnBitLength;
    BigInteger.prototype.mod = bnMod;
    BigInteger.prototype.modPowInt = bnModPowInt;
    BigInteger.ZERO = nbv(0);
    BigInteger.ONE = nbv(1);
    function bnClone() {
      var r = nbi();
      this.copyTo(r);
      return r;
    }
    function bnIntValue() {
      if (this.s < 0) {
        if (this.t == 1) return this[0] - this.DV;
        else if (this.t == 0) return -1;
      } else if (this.t == 1) return this[0];
      else if (this.t == 0) return 0;
      return (this[1] & (1 << 32 - this.DB) - 1) << this.DB | this[0];
    }
    function bnByteValue() {
      return this.t == 0 ? this.s : this[0] << 24 >> 24;
    }
    function bnShortValue() {
      return this.t == 0 ? this.s : this[0] << 16 >> 16;
    }
    function bnpChunkSize(r) {
      return Math.floor(Math.LN2 * this.DB / Math.log(r));
    }
    function bnSigNum() {
      if (this.s < 0) return -1;
      else if (this.t <= 0 || this.t == 1 && this[0] <= 0) return 0;
      else return 1;
    }
    function bnpToRadix(b) {
      if (b == null) b = 10;
      if (this.signum() == 0 || b < 2 || b > 36) return "0";
      var cs = this.chunkSize(b);
      var a = Math.pow(b, cs);
      var d = nbv(a), y = nbi(), z = nbi(), r = "";
      this.divRemTo(d, y, z);
      while (y.signum() > 0) {
        r = (a + z.intValue()).toString(b).substr(1) + r;
        y.divRemTo(d, y, z);
      }
      return z.intValue().toString(b) + r;
    }
    function bnpFromRadix(s, b) {
      this.fromInt(0);
      if (b == null) b = 10;
      var cs = this.chunkSize(b);
      var d = Math.pow(b, cs), mi = false, j = 0, w = 0;
      for (var i = 0; i < s.length; ++i) {
        var x = intAt(s, i);
        if (x < 0) {
          if (s.charAt(i) == "-" && this.signum() == 0) mi = true;
          continue;
        }
        w = b * w + x;
        if (++j >= cs) {
          this.dMultiply(d);
          this.dAddOffset(w, 0);
          j = 0;
          w = 0;
        }
      }
      if (j > 0) {
        this.dMultiply(Math.pow(b, j));
        this.dAddOffset(w, 0);
      }
      if (mi) BigInteger.ZERO.subTo(this, this);
    }
    function bnpFromNumber(a, b, c) {
      if ("number" == typeof b) {
        if (a < 2) this.fromInt(1);
        else {
          this.fromNumber(a, c);
          if (!this.testBit(a - 1))
            this.bitwiseTo(BigInteger.ONE.shiftLeft(a - 1), op_or, this);
          if (this.isEven()) this.dAddOffset(1, 0);
          while (!this.isProbablePrime(b)) {
            this.dAddOffset(2, 0);
            if (this.bitLength() > a) this.subTo(BigInteger.ONE.shiftLeft(a - 1), this);
          }
        }
      } else {
        var x = new Array(), t = a & 7;
        x.length = (a >> 3) + 1;
        b.nextBytes(x);
        if (t > 0) x[0] &= (1 << t) - 1;
        else x[0] = 0;
        this.fromString(x, 256);
      }
    }
    function bnToByteArray() {
      var i = this.t, r = new Array();
      r[0] = this.s;
      var p = this.DB - i * this.DB % 8, d, k = 0;
      if (i-- > 0) {
        if (p < this.DB && (d = this[i] >> p) != (this.s & this.DM) >> p)
          r[k++] = d | this.s << this.DB - p;
        while (i >= 0) {
          if (p < 8) {
            d = (this[i] & (1 << p) - 1) << 8 - p;
            d |= this[--i] >> (p += this.DB - 8);
          } else {
            d = this[i] >> (p -= 8) & 255;
            if (p <= 0) {
              p += this.DB;
              --i;
            }
          }
          if ((d & 128) != 0) d |= -256;
          if (k == 0 && (this.s & 128) != (d & 128)) ++k;
          if (k > 0 || d != this.s) r[k++] = d;
        }
      }
      return r;
    }
    function bnEquals(a) {
      return this.compareTo(a) == 0;
    }
    function bnMin(a) {
      return this.compareTo(a) < 0 ? this : a;
    }
    function bnMax(a) {
      return this.compareTo(a) > 0 ? this : a;
    }
    function bnpBitwiseTo(a, op, r) {
      var i, f, m = Math.min(a.t, this.t);
      for (i = 0; i < m; ++i) r[i] = op(this[i], a[i]);
      if (a.t < this.t) {
        f = a.s & this.DM;
        for (i = m; i < this.t; ++i) r[i] = op(this[i], f);
        r.t = this.t;
      } else {
        f = this.s & this.DM;
        for (i = m; i < a.t; ++i) r[i] = op(f, a[i]);
        r.t = a.t;
      }
      r.s = op(this.s, a.s);
      r.clamp();
    }
    function op_and(x, y) {
      return x & y;
    }
    function bnAnd(a) {
      var r = nbi();
      this.bitwiseTo(a, op_and, r);
      return r;
    }
    function op_or(x, y) {
      return x | y;
    }
    function bnOr(a) {
      var r = nbi();
      this.bitwiseTo(a, op_or, r);
      return r;
    }
    function op_xor(x, y) {
      return x ^ y;
    }
    function bnXor(a) {
      var r = nbi();
      this.bitwiseTo(a, op_xor, r);
      return r;
    }
    function op_andnot(x, y) {
      return x & ~y;
    }
    function bnAndNot(a) {
      var r = nbi();
      this.bitwiseTo(a, op_andnot, r);
      return r;
    }
    function bnNot() {
      var r = nbi();
      for (var i = 0; i < this.t; ++i) r[i] = this.DM & ~this[i];
      r.t = this.t;
      r.s = ~this.s;
      return r;
    }
    function bnShiftLeft(n) {
      var r = nbi();
      if (n < 0) this.rShiftTo(-n, r);
      else this.lShiftTo(n, r);
      return r;
    }
    function bnShiftRight(n) {
      var r = nbi();
      if (n < 0) this.lShiftTo(-n, r);
      else this.rShiftTo(n, r);
      return r;
    }
    function lbit(x) {
      if (x == 0) return -1;
      var r = 0;
      if ((x & 65535) == 0) {
        x >>= 16;
        r += 16;
      }
      if ((x & 255) == 0) {
        x >>= 8;
        r += 8;
      }
      if ((x & 15) == 0) {
        x >>= 4;
        r += 4;
      }
      if ((x & 3) == 0) {
        x >>= 2;
        r += 2;
      }
      if ((x & 1) == 0) ++r;
      return r;
    }
    function bnGetLowestSetBit() {
      for (var i = 0; i < this.t; ++i)
        if (this[i] != 0) return i * this.DB + lbit(this[i]);
      if (this.s < 0) return this.t * this.DB;
      return -1;
    }
    function cbit(x) {
      var r = 0;
      while (x != 0) {
        x &= x - 1;
        ++r;
      }
      return r;
    }
    function bnBitCount() {
      var r = 0, x = this.s & this.DM;
      for (var i = 0; i < this.t; ++i) r += cbit(this[i] ^ x);
      return r;
    }
    function bnTestBit(n) {
      var j = Math.floor(n / this.DB);
      if (j >= this.t) return this.s != 0;
      return (this[j] & 1 << n % this.DB) != 0;
    }
    function bnpChangeBit(n, op) {
      var r = BigInteger.ONE.shiftLeft(n);
      this.bitwiseTo(r, op, r);
      return r;
    }
    function bnSetBit(n) {
      return this.changeBit(n, op_or);
    }
    function bnClearBit(n) {
      return this.changeBit(n, op_andnot);
    }
    function bnFlipBit(n) {
      return this.changeBit(n, op_xor);
    }
    function bnpAddTo(a, r) {
      var i = 0, c = 0, m = Math.min(a.t, this.t);
      while (i < m) {
        c += this[i] + a[i];
        r[i++] = c & this.DM;
        c >>= this.DB;
      }
      if (a.t < this.t) {
        c += a.s;
        while (i < this.t) {
          c += this[i];
          r[i++] = c & this.DM;
          c >>= this.DB;
        }
        c += this.s;
      } else {
        c += this.s;
        while (i < a.t) {
          c += a[i];
          r[i++] = c & this.DM;
          c >>= this.DB;
        }
        c += a.s;
      }
      r.s = c < 0 ? -1 : 0;
      if (c > 0) r[i++] = c;
      else if (c < -1) r[i++] = this.DV + c;
      r.t = i;
      r.clamp();
    }
    function bnAdd(a) {
      var r = nbi();
      this.addTo(a, r);
      return r;
    }
    function bnSubtract(a) {
      var r = nbi();
      this.subTo(a, r);
      return r;
    }
    function bnMultiply(a) {
      var r = nbi();
      this.multiplyTo(a, r);
      return r;
    }
    function bnSquare() {
      var r = nbi();
      this.squareTo(r);
      return r;
    }
    function bnDivide(a) {
      var r = nbi();
      this.divRemTo(a, r, null);
      return r;
    }
    function bnRemainder(a) {
      var r = nbi();
      this.divRemTo(a, null, r);
      return r;
    }
    function bnDivideAndRemainder(a) {
      var q = nbi(), r = nbi();
      this.divRemTo(a, q, r);
      return new Array(q, r);
    }
    function bnpDMultiply(n) {
      this[this.t] = this.am(0, n - 1, this, 0, 0, this.t);
      ++this.t;
      this.clamp();
    }
    function bnpDAddOffset(n, w) {
      if (n == 0) return;
      while (this.t <= w) this[this.t++] = 0;
      this[w] += n;
      while (this[w] >= this.DV) {
        this[w] -= this.DV;
        if (++w >= this.t) this[this.t++] = 0;
        ++this[w];
      }
    }
    function NullExp() {
    }
    function nNop(x) {
      return x;
    }
    function nMulTo(x, y, r) {
      x.multiplyTo(y, r);
    }
    function nSqrTo(x, r) {
      x.squareTo(r);
    }
    NullExp.prototype.convert = nNop;
    NullExp.prototype.revert = nNop;
    NullExp.prototype.mulTo = nMulTo;
    NullExp.prototype.sqrTo = nSqrTo;
    function bnPow(e) {
      return this.exp(e, new NullExp());
    }
    function bnpMultiplyLowerTo(a, n, r) {
      var i = Math.min(this.t + a.t, n);
      r.s = 0;
      r.t = i;
      while (i > 0) r[--i] = 0;
      var j;
      for (j = r.t - this.t; i < j; ++i) r[i + this.t] = this.am(0, a[i], r, i, 0, this.t);
      for (j = Math.min(a.t, n); i < j; ++i) this.am(0, a[i], r, i, 0, n - i);
      r.clamp();
    }
    function bnpMultiplyUpperTo(a, n, r) {
      --n;
      var i = r.t = this.t + a.t - n;
      r.s = 0;
      while (--i >= 0) r[i] = 0;
      for (i = Math.max(n - this.t, 0); i < a.t; ++i)
        r[this.t + i - n] = this.am(n - i, a[i], r, 0, 0, this.t + i - n);
      r.clamp();
      r.drShiftTo(1, r);
    }
    function Barrett(m) {
      this.r2 = nbi();
      this.q3 = nbi();
      BigInteger.ONE.dlShiftTo(2 * m.t, this.r2);
      this.mu = this.r2.divide(m);
      this.m = m;
    }
    function barrettConvert(x) {
      if (x.s < 0 || x.t > 2 * this.m.t) return x.mod(this.m);
      else if (x.compareTo(this.m) < 0) return x;
      else {
        var r = nbi();
        x.copyTo(r);
        this.reduce(r);
        return r;
      }
    }
    function barrettRevert(x) {
      return x;
    }
    function barrettReduce(x) {
      x.drShiftTo(this.m.t - 1, this.r2);
      if (x.t > this.m.t + 1) {
        x.t = this.m.t + 1;
        x.clamp();
      }
      this.mu.multiplyUpperTo(this.r2, this.m.t + 1, this.q3);
      this.m.multiplyLowerTo(this.q3, this.m.t + 1, this.r2);
      while (x.compareTo(this.r2) < 0) x.dAddOffset(1, this.m.t + 1);
      x.subTo(this.r2, x);
      while (x.compareTo(this.m) >= 0) x.subTo(this.m, x);
    }
    function barrettSqrTo(x, r) {
      x.squareTo(r);
      this.reduce(r);
    }
    function barrettMulTo(x, y, r) {
      x.multiplyTo(y, r);
      this.reduce(r);
    }
    Barrett.prototype.convert = barrettConvert;
    Barrett.prototype.revert = barrettRevert;
    Barrett.prototype.reduce = barrettReduce;
    Barrett.prototype.mulTo = barrettMulTo;
    Barrett.prototype.sqrTo = barrettSqrTo;
    function bnModPow(e, m) {
      var i = e.bitLength(), k, r = nbv(1), z;
      if (i <= 0) return r;
      else if (i < 18) k = 1;
      else if (i < 48) k = 3;
      else if (i < 144) k = 4;
      else if (i < 768) k = 5;
      else k = 6;
      if (i < 8)
        z = new Classic(m);
      else if (m.isEven())
        z = new Barrett(m);
      else
        z = new Montgomery(m);
      var g = new Array(), n = 3, k1 = k - 1, km = (1 << k) - 1;
      g[1] = z.convert(this);
      if (k > 1) {
        var g2 = nbi();
        z.sqrTo(g[1], g2);
        while (n <= km) {
          g[n] = nbi();
          z.mulTo(g2, g[n - 2], g[n]);
          n += 2;
        }
      }
      var j = e.t - 1, w, is1 = true, r2 = nbi(), t;
      i = nbits(e[j]) - 1;
      while (j >= 0) {
        if (i >= k1) w = e[j] >> i - k1 & km;
        else {
          w = (e[j] & (1 << i + 1) - 1) << k1 - i;
          if (j > 0) w |= e[j - 1] >> this.DB + i - k1;
        }
        n = k;
        while ((w & 1) == 0) {
          w >>= 1;
          --n;
        }
        if ((i -= n) < 0) {
          i += this.DB;
          --j;
        }
        if (is1) {
          g[w].copyTo(r);
          is1 = false;
        } else {
          while (n > 1) {
            z.sqrTo(r, r2);
            z.sqrTo(r2, r);
            n -= 2;
          }
          if (n > 0) z.sqrTo(r, r2);
          else {
            t = r;
            r = r2;
            r2 = t;
          }
          z.mulTo(r2, g[w], r);
        }
        while (j >= 0 && (e[j] & 1 << i) == 0) {
          z.sqrTo(r, r2);
          t = r;
          r = r2;
          r2 = t;
          if (--i < 0) {
            i = this.DB - 1;
            --j;
          }
        }
      }
      return z.revert(r);
    }
    function bnGCD(a) {
      var x = this.s < 0 ? this.negate() : this.clone();
      var y = a.s < 0 ? a.negate() : a.clone();
      if (x.compareTo(y) < 0) {
        var t = x;
        x = y;
        y = t;
      }
      var i = x.getLowestSetBit(), g = y.getLowestSetBit();
      if (g < 0) return x;
      if (i < g) g = i;
      if (g > 0) {
        x.rShiftTo(g, x);
        y.rShiftTo(g, y);
      }
      while (x.signum() > 0) {
        if ((i = x.getLowestSetBit()) > 0) x.rShiftTo(i, x);
        if ((i = y.getLowestSetBit()) > 0) y.rShiftTo(i, y);
        if (x.compareTo(y) >= 0) {
          x.subTo(y, x);
          x.rShiftTo(1, x);
        } else {
          y.subTo(x, y);
          y.rShiftTo(1, y);
        }
      }
      if (g > 0) y.lShiftTo(g, y);
      return y;
    }
    function bnpModInt(n) {
      if (n <= 0) return 0;
      var d = this.DV % n, r = this.s < 0 ? n - 1 : 0;
      if (this.t > 0)
        if (d == 0) r = this[0] % n;
        else
          for (var i = this.t - 1; i >= 0; --i) r = (d * r + this[i]) % n;
      return r;
    }
    function bnModInverse(m) {
      var ac = m.isEven();
      if (this.isEven() && ac || m.signum() == 0) return BigInteger.ZERO;
      var u = m.clone(), v = this.clone();
      var a = nbv(1), b = nbv(0), c = nbv(0), d = nbv(1);
      while (u.signum() != 0) {
        while (u.isEven()) {
          u.rShiftTo(1, u);
          if (ac) {
            if (!a.isEven() || !b.isEven()) {
              a.addTo(this, a);
              b.subTo(m, b);
            }
            a.rShiftTo(1, a);
          } else if (!b.isEven()) b.subTo(m, b);
          b.rShiftTo(1, b);
        }
        while (v.isEven()) {
          v.rShiftTo(1, v);
          if (ac) {
            if (!c.isEven() || !d.isEven()) {
              c.addTo(this, c);
              d.subTo(m, d);
            }
            c.rShiftTo(1, c);
          } else if (!d.isEven()) d.subTo(m, d);
          d.rShiftTo(1, d);
        }
        if (u.compareTo(v) >= 0) {
          u.subTo(v, u);
          if (ac) a.subTo(c, a);
          b.subTo(d, b);
        } else {
          v.subTo(u, v);
          if (ac) c.subTo(a, c);
          d.subTo(b, d);
        }
      }
      if (v.compareTo(BigInteger.ONE) != 0) return BigInteger.ZERO;
      if (d.compareTo(m) >= 0) return d.subtract(m);
      if (d.signum() < 0) d.addTo(m, d);
      else return d;
      if (d.signum() < 0) return d.add(m);
      else return d;
    }
    var lowprimes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997];
    var lplim = (1 << 26) / lowprimes[lowprimes.length - 1];
    function bnIsProbablePrime(t) {
      var i, x = this.abs();
      if (x.t == 1 && x[0] <= lowprimes[lowprimes.length - 1]) {
        for (i = 0; i < lowprimes.length; ++i)
          if (x[0] == lowprimes[i]) return true;
        return false;
      }
      if (x.isEven()) return false;
      i = 1;
      while (i < lowprimes.length) {
        var m = lowprimes[i], j = i + 1;
        while (j < lowprimes.length && m < lplim) m *= lowprimes[j++];
        m = x.modInt(m);
        while (i < j)
          if (m % lowprimes[i++] == 0) return false;
      }
      return x.millerRabin(t);
    }
    function bnpMillerRabin(t) {
      var n1 = this.subtract(BigInteger.ONE);
      var k = n1.getLowestSetBit();
      if (k <= 0) return false;
      var r = n1.shiftRight(k);
      t = t + 1 >> 1;
      if (t > lowprimes.length) t = lowprimes.length;
      var a = nbi();
      for (var i = 0; i < t; ++i) {
        a.fromInt(lowprimes[Math.floor(Math.random() * lowprimes.length)]);
        var y = a.modPow(r, this);
        if (y.compareTo(BigInteger.ONE) != 0 && y.compareTo(n1) != 0) {
          var j = 1;
          while (j++ < k && y.compareTo(n1) != 0) {
            y = y.modPowInt(2, this);
            if (y.compareTo(BigInteger.ONE) == 0) return false;
          }
          if (y.compareTo(n1) != 0) return false;
        }
      }
      return true;
    }
    BigInteger.prototype.chunkSize = bnpChunkSize;
    BigInteger.prototype.toRadix = bnpToRadix;
    BigInteger.prototype.fromRadix = bnpFromRadix;
    BigInteger.prototype.fromNumber = bnpFromNumber;
    BigInteger.prototype.bitwiseTo = bnpBitwiseTo;
    BigInteger.prototype.changeBit = bnpChangeBit;
    BigInteger.prototype.addTo = bnpAddTo;
    BigInteger.prototype.dMultiply = bnpDMultiply;
    BigInteger.prototype.dAddOffset = bnpDAddOffset;
    BigInteger.prototype.multiplyLowerTo = bnpMultiplyLowerTo;
    BigInteger.prototype.multiplyUpperTo = bnpMultiplyUpperTo;
    BigInteger.prototype.modInt = bnpModInt;
    BigInteger.prototype.millerRabin = bnpMillerRabin;
    BigInteger.prototype.clone = bnClone;
    BigInteger.prototype.intValue = bnIntValue;
    BigInteger.prototype.byteValue = bnByteValue;
    BigInteger.prototype.shortValue = bnShortValue;
    BigInteger.prototype.signum = bnSigNum;
    BigInteger.prototype.toByteArray = bnToByteArray;
    BigInteger.prototype.equals = bnEquals;
    BigInteger.prototype.min = bnMin;
    BigInteger.prototype.max = bnMax;
    BigInteger.prototype.and = bnAnd;
    BigInteger.prototype.or = bnOr;
    BigInteger.prototype.xor = bnXor;
    BigInteger.prototype.andNot = bnAndNot;
    BigInteger.prototype.not = bnNot;
    BigInteger.prototype.shiftLeft = bnShiftLeft;
    BigInteger.prototype.shiftRight = bnShiftRight;
    BigInteger.prototype.getLowestSetBit = bnGetLowestSetBit;
    BigInteger.prototype.bitCount = bnBitCount;
    BigInteger.prototype.testBit = bnTestBit;
    BigInteger.prototype.setBit = bnSetBit;
    BigInteger.prototype.clearBit = bnClearBit;
    BigInteger.prototype.flipBit = bnFlipBit;
    BigInteger.prototype.add = bnAdd;
    BigInteger.prototype.subtract = bnSubtract;
    BigInteger.prototype.multiply = bnMultiply;
    BigInteger.prototype.divide = bnDivide;
    BigInteger.prototype.remainder = bnRemainder;
    BigInteger.prototype.divideAndRemainder = bnDivideAndRemainder;
    BigInteger.prototype.modPow = bnModPow;
    BigInteger.prototype.modInverse = bnModInverse;
    BigInteger.prototype.pow = bnPow;
    BigInteger.prototype.gcd = bnGCD;
    BigInteger.prototype.isProbablePrime = bnIsProbablePrime;
    BigInteger.prototype.square = bnSquare;
    var Int128 = BigInteger;
    Int128.prototype.IsNegative = function() {
      if (this.compareTo(Int128.ZERO) == -1) return true;
      else return false;
    };
    Int128.op_Equality = function(val1, val2) {
      if (val1.compareTo(val2) == 0) return true;
      else return false;
    };
    Int128.op_Inequality = function(val1, val2) {
      if (val1.compareTo(val2) != 0) return true;
      else return false;
    };
    Int128.op_GreaterThan = function(val1, val2) {
      if (val1.compareTo(val2) > 0) return true;
      else return false;
    };
    Int128.op_LessThan = function(val1, val2) {
      if (val1.compareTo(val2) < 0) return true;
      else return false;
    };
    Int128.op_Addition = function(lhs, rhs) {
      return new Int128(lhs).add(new Int128(rhs));
    };
    Int128.op_Subtraction = function(lhs, rhs) {
      return new Int128(lhs).subtract(new Int128(rhs));
    };
    Int128.Int128Mul = function(lhs, rhs) {
      return new Int128(lhs).multiply(new Int128(rhs));
    };
    Int128.op_Division = function(lhs, rhs) {
      return lhs.divide(rhs);
    };
    Int128.prototype.ToDouble = function() {
      return parseFloat(this.toString());
    };
    if (typeof Inherit == "undefined") {
      Inherit = function(ce, ce2) {
        var p;
        if (typeof Object.getOwnPropertyNames == "undefined") {
          for (p in ce2.prototype)
            if (typeof ce.prototype[p] == "undefined" || ce.prototype[p] == Object.prototype[p]) ce.prototype[p] = ce2.prototype[p];
          for (p in ce2)
            if (typeof ce[p] == "undefined") ce[p] = ce2[p];
          ce.$baseCtor = ce2;
        } else {
          var props = Object.getOwnPropertyNames(ce2.prototype);
          for (var i = 0; i < props.length; i++)
            if (typeof Object.getOwnPropertyDescriptor(ce.prototype, props[i]) == "undefined") Object.defineProperty(ce.prototype, props[i], Object.getOwnPropertyDescriptor(ce2.prototype, props[i]));
          for (p in ce2)
            if (typeof ce[p] == "undefined") ce[p] = ce2[p];
          ce.$baseCtor = ce2;
        }
      };
    }
    var Inherit;
    ClipperLib.Path = function() {
      return [];
    };
    ClipperLib.Paths = function() {
      return [];
    };
    ClipperLib.DoublePoint = function() {
      var a = arguments;
      this.X = 0;
      this.Y = 0;
      if (a.length == 1) {
        this.X = a[0].X;
        this.Y = a[0].Y;
      } else if (a.length == 2) {
        this.X = a[0];
        this.Y = a[1];
      }
    };
    ClipperLib.DoublePoint0 = function() {
      this.X = 0;
      this.Y = 0;
    };
    ClipperLib.DoublePoint1 = function(dp) {
      this.X = dp.X;
      this.Y = dp.Y;
    };
    ClipperLib.DoublePoint2 = function(x, y) {
      this.X = x;
      this.Y = y;
    };
    ClipperLib.PolyNode = function() {
      this.m_Parent = null;
      this.m_polygon = new ClipperLib.Path();
      this.m_Index = 0;
      this.m_jointype = 0;
      this.m_endtype = 0;
      this.m_Childs = [];
      this.IsOpen = false;
    };
    ClipperLib.PolyNode.prototype.IsHoleNode = function() {
      var result = true;
      var node = this.m_Parent;
      while (node !== null) {
        result = !result;
        node = node.m_Parent;
      }
      return result;
    };
    ClipperLib.PolyNode.prototype.ChildCount = function() {
      return this.m_Childs.length;
    };
    ClipperLib.PolyNode.prototype.Contour = function() {
      return this.m_polygon;
    };
    ClipperLib.PolyNode.prototype.AddChild = function(Child) {
      var cnt = this.m_Childs.length;
      this.m_Childs.push(Child);
      Child.m_Parent = this;
      Child.m_Index = cnt;
    };
    ClipperLib.PolyNode.prototype.GetNext = function() {
      if (this.m_Childs.length > 0)
        return this.m_Childs[0];
      else
        return this.GetNextSiblingUp();
    };
    ClipperLib.PolyNode.prototype.GetNextSiblingUp = function() {
      if (this.m_Parent === null)
        return null;
      else if (this.m_Index == this.m_Parent.m_Childs.length - 1)
        return this.m_Parent.GetNextSiblingUp();
      else
        return this.m_Parent.m_Childs[this.m_Index + 1];
    };
    ClipperLib.PolyNode.prototype.Childs = function() {
      return this.m_Childs;
    };
    ClipperLib.PolyNode.prototype.Parent = function() {
      return this.m_Parent;
    };
    ClipperLib.PolyNode.prototype.IsHole = function() {
      return this.IsHoleNode();
    };
    ClipperLib.PolyTree = function() {
      this.m_AllPolys = [];
      ClipperLib.PolyNode.call(this);
    };
    ClipperLib.PolyTree.prototype.Clear = function() {
      for (var i = 0, ilen = this.m_AllPolys.length; i < ilen; i++)
        this.m_AllPolys[i] = null;
      this.m_AllPolys.length = 0;
      this.m_Childs.length = 0;
    };
    ClipperLib.PolyTree.prototype.GetFirst = function() {
      if (this.m_Childs.length > 0)
        return this.m_Childs[0];
      else
        return null;
    };
    ClipperLib.PolyTree.prototype.Total = function() {
      return this.m_AllPolys.length;
    };
    Inherit(ClipperLib.PolyTree, ClipperLib.PolyNode);
    ClipperLib.Math_Abs_Int64 = ClipperLib.Math_Abs_Int32 = ClipperLib.Math_Abs_Double = function(a) {
      return Math.abs(a);
    };
    ClipperLib.Math_Max_Int32_Int32 = function(a, b) {
      return Math.max(a, b);
    };
    if (browser.msie || browser.opera || browser.safari) ClipperLib.Cast_Int32 = function(a) {
      return a | 0;
    };
    else ClipperLib.Cast_Int32 = function(a) {
      return ~~a;
    };
    if (browser.chrome) ClipperLib.Cast_Int64 = function(a) {
      if (a < -2147483648 || a > 2147483647)
        return a < 0 ? Math.ceil(a) : Math.floor(a);
      else return ~~a;
    };
    else if (browser.firefox && typeof Number.toInteger == "function") ClipperLib.Cast_Int64 = function(a) {
      return Number.toInteger(a);
    };
    else if (browser.msie7 || browser.msie8) ClipperLib.Cast_Int64 = function(a) {
      return parseInt(a, 10);
    };
    else if (browser.msie) ClipperLib.Cast_Int64 = function(a) {
      if (a < -2147483648 || a > 2147483647)
        return a < 0 ? Math.ceil(a) : Math.floor(a);
      return a | 0;
    };
    else ClipperLib.Cast_Int64 = function(a) {
      return a < 0 ? Math.ceil(a) : Math.floor(a);
    };
    ClipperLib.Clear = function(a) {
      a.length = 0;
    };
    ClipperLib.PI = 3.141592653589793;
    ClipperLib.PI2 = 2 * 3.141592653589793;
    ClipperLib.IntPoint = function() {
      var a = arguments, alen = a.length;
      this.X = 0;
      this.Y = 0;
      if (use_xyz) {
        this.Z = 0;
        if (alen == 3) {
          this.X = a[0];
          this.Y = a[1];
          this.Z = a[2];
        } else if (alen == 2) {
          this.X = a[0];
          this.Y = a[1];
          this.Z = 0;
        } else if (alen == 1) {
          if (a[0] instanceof ClipperLib.DoublePoint) {
            var dp = a[0];
            this.X = ClipperLib.Clipper.Round(dp.X);
            this.Y = ClipperLib.Clipper.Round(dp.Y);
            this.Z = 0;
          } else {
            var pt = a[0];
            if (typeof pt.Z == "undefined") pt.Z = 0;
            this.X = pt.X;
            this.Y = pt.Y;
            this.Z = pt.Z;
          }
        } else {
          this.X = 0;
          this.Y = 0;
          this.Z = 0;
        }
      } else {
        if (alen == 2) {
          this.X = a[0];
          this.Y = a[1];
        } else if (alen == 1) {
          if (a[0] instanceof ClipperLib.DoublePoint) {
            var dp = a[0];
            this.X = ClipperLib.Clipper.Round(dp.X);
            this.Y = ClipperLib.Clipper.Round(dp.Y);
          } else {
            var pt = a[0];
            this.X = pt.X;
            this.Y = pt.Y;
          }
        } else {
          this.X = 0;
          this.Y = 0;
        }
      }
    };
    ClipperLib.IntPoint.op_Equality = function(a, b) {
      return a.X == b.X && a.Y == b.Y;
    };
    ClipperLib.IntPoint.op_Inequality = function(a, b) {
      return a.X != b.X || a.Y != b.Y;
    };
    if (use_xyz) {
      ClipperLib.IntPoint0 = function() {
        this.X = 0;
        this.Y = 0;
        this.Z = 0;
      };
      ClipperLib.IntPoint1 = function(pt) {
        this.X = pt.X;
        this.Y = pt.Y;
        this.Z = pt.Z;
      };
      ClipperLib.IntPoint1dp = function(dp) {
        this.X = ClipperLib.Clipper.Round(dp.X);
        this.Y = ClipperLib.Clipper.Round(dp.Y);
        this.Z = 0;
      };
      ClipperLib.IntPoint2 = function(x, y) {
        this.X = x;
        this.Y = y;
        this.Z = 0;
      };
      ClipperLib.IntPoint3 = function(x, y, z) {
        this.X = x;
        this.Y = y;
        this.Z = z;
      };
    } else {
      ClipperLib.IntPoint0 = function() {
        this.X = 0;
        this.Y = 0;
      };
      ClipperLib.IntPoint1 = function(pt) {
        this.X = pt.X;
        this.Y = pt.Y;
      };
      ClipperLib.IntPoint1dp = function(dp) {
        this.X = ClipperLib.Clipper.Round(dp.X);
        this.Y = ClipperLib.Clipper.Round(dp.Y);
      };
      ClipperLib.IntPoint2 = function(x, y) {
        this.X = x;
        this.Y = y;
      };
    }
    ClipperLib.IntRect = function() {
      var a = arguments, alen = a.length;
      if (alen == 4) {
        this.left = a[0];
        this.top = a[1];
        this.right = a[2];
        this.bottom = a[3];
      } else if (alen == 1) {
        this.left = ir.left;
        this.top = ir.top;
        this.right = ir.right;
        this.bottom = ir.bottom;
      } else {
        this.left = 0;
        this.top = 0;
        this.right = 0;
        this.bottom = 0;
      }
    };
    ClipperLib.IntRect0 = function() {
      this.left = 0;
      this.top = 0;
      this.right = 0;
      this.bottom = 0;
    };
    ClipperLib.IntRect1 = function(ir2) {
      this.left = ir2.left;
      this.top = ir2.top;
      this.right = ir2.right;
      this.bottom = ir2.bottom;
    };
    ClipperLib.IntRect4 = function(l, t, r, b) {
      this.left = l;
      this.top = t;
      this.right = r;
      this.bottom = b;
    };
    ClipperLib.ClipType = {
      ctIntersection: 0,
      ctUnion: 1,
      ctDifference: 2,
      ctXor: 3
    };
    ClipperLib.PolyType = {
      ptSubject: 0,
      ptClip: 1
    };
    ClipperLib.PolyFillType = {
      pftEvenOdd: 0,
      pftNonZero: 1,
      pftPositive: 2,
      pftNegative: 3
    };
    ClipperLib.JoinType = {
      jtSquare: 0,
      jtRound: 1,
      jtMiter: 2
    };
    ClipperLib.EndType = {
      etOpenSquare: 0,
      etOpenRound: 1,
      etOpenButt: 2,
      etClosedLine: 3,
      etClosedPolygon: 4
    };
    if (use_deprecated)
      ClipperLib.EndType_ = {
        etSquare: 0,
        etRound: 1,
        etButt: 2,
        etClosed: 3
      };
    ClipperLib.EdgeSide = {
      esLeft: 0,
      esRight: 1
    };
    ClipperLib.Direction = {
      dRightToLeft: 0,
      dLeftToRight: 1
    };
    ClipperLib.TEdge = function() {
      this.Bot = new ClipperLib.IntPoint();
      this.Curr = new ClipperLib.IntPoint();
      this.Top = new ClipperLib.IntPoint();
      this.Delta = new ClipperLib.IntPoint();
      this.Dx = 0;
      this.PolyTyp = ClipperLib.PolyType.ptSubject;
      this.Side = ClipperLib.EdgeSide.esLeft;
      this.WindDelta = 0;
      this.WindCnt = 0;
      this.WindCnt2 = 0;
      this.OutIdx = 0;
      this.Next = null;
      this.Prev = null;
      this.NextInLML = null;
      this.NextInAEL = null;
      this.PrevInAEL = null;
      this.NextInSEL = null;
      this.PrevInSEL = null;
    };
    ClipperLib.IntersectNode = function() {
      this.Edge1 = null;
      this.Edge2 = null;
      this.Pt = new ClipperLib.IntPoint();
    };
    ClipperLib.MyIntersectNodeSort = function() {
    };
    ClipperLib.MyIntersectNodeSort.Compare = function(node1, node2) {
      return node2.Pt.Y - node1.Pt.Y;
    };
    ClipperLib.LocalMinima = function() {
      this.Y = 0;
      this.LeftBound = null;
      this.RightBound = null;
      this.Next = null;
    };
    ClipperLib.Scanbeam = function() {
      this.Y = 0;
      this.Next = null;
    };
    ClipperLib.OutRec = function() {
      this.Idx = 0;
      this.IsHole = false;
      this.IsOpen = false;
      this.FirstLeft = null;
      this.Pts = null;
      this.BottomPt = null;
      this.PolyNode = null;
    };
    ClipperLib.OutPt = function() {
      this.Idx = 0;
      this.Pt = new ClipperLib.IntPoint();
      this.Next = null;
      this.Prev = null;
    };
    ClipperLib.Join = function() {
      this.OutPt1 = null;
      this.OutPt2 = null;
      this.OffPt = new ClipperLib.IntPoint();
    };
    ClipperLib.ClipperBase = function() {
      this.m_MinimaList = null;
      this.m_CurrentLM = null;
      this.m_edges = new Array();
      this.m_UseFullRange = false;
      this.m_HasOpenPaths = false;
      this.PreserveCollinear = false;
      this.m_MinimaList = null;
      this.m_CurrentLM = null;
      this.m_UseFullRange = false;
      this.m_HasOpenPaths = false;
    };
    ClipperLib.ClipperBase.horizontal = -9007199254740992;
    ClipperLib.ClipperBase.Skip = -2;
    ClipperLib.ClipperBase.Unassigned = -1;
    ClipperLib.ClipperBase.tolerance = 1e-20;
    if (use_int32) {
      ClipperLib.ClipperBase.loRange = 46340;
      ClipperLib.ClipperBase.hiRange = 46340;
    } else {
      ClipperLib.ClipperBase.loRange = 47453132;
      ClipperLib.ClipperBase.hiRange = 4503599627370495;
    }
    ClipperLib.ClipperBase.near_zero = function(val) {
      return val > -ClipperLib.ClipperBase.tolerance && val < ClipperLib.ClipperBase.tolerance;
    };
    ClipperLib.ClipperBase.IsHorizontal = function(e) {
      return e.Delta.Y === 0;
    };
    ClipperLib.ClipperBase.prototype.PointIsVertex = function(pt, pp) {
      var pp2 = pp;
      do {
        if (ClipperLib.IntPoint.op_Equality(pp2.Pt, pt))
          return true;
        pp2 = pp2.Next;
      } while (pp2 != pp);
      return false;
    };
    ClipperLib.ClipperBase.prototype.PointOnLineSegment = function(pt, linePt1, linePt2, UseFullRange) {
      if (UseFullRange)
        return pt.X == linePt1.X && pt.Y == linePt1.Y || pt.X == linePt2.X && pt.Y == linePt2.Y || pt.X > linePt1.X == pt.X < linePt2.X && pt.Y > linePt1.Y == pt.Y < linePt2.Y && Int128.op_Equality(
          Int128.Int128Mul(pt.X - linePt1.X, linePt2.Y - linePt1.Y),
          Int128.Int128Mul(linePt2.X - linePt1.X, pt.Y - linePt1.Y)
        );
      else
        return pt.X == linePt1.X && pt.Y == linePt1.Y || pt.X == linePt2.X && pt.Y == linePt2.Y || pt.X > linePt1.X == pt.X < linePt2.X && pt.Y > linePt1.Y == pt.Y < linePt2.Y && (pt.X - linePt1.X) * (linePt2.Y - linePt1.Y) == (linePt2.X - linePt1.X) * (pt.Y - linePt1.Y);
    };
    ClipperLib.ClipperBase.prototype.PointOnPolygon = function(pt, pp, UseFullRange) {
      var pp2 = pp;
      while (true) {
        if (this.PointOnLineSegment(pt, pp2.Pt, pp2.Next.Pt, UseFullRange))
          return true;
        pp2 = pp2.Next;
        if (pp2 == pp)
          break;
      }
      return false;
    };
    ClipperLib.ClipperBase.prototype.SlopesEqual = ClipperLib.ClipperBase.SlopesEqual = function() {
      var a = arguments, alen = a.length;
      var e1, e2, pt1, pt2, pt3, pt4, UseFullRange;
      if (alen == 3) {
        e1 = a[0];
        e2 = a[1];
        UseFullRange = a[2];
        if (UseFullRange)
          return Int128.op_Equality(Int128.Int128Mul(e1.Delta.Y, e2.Delta.X), Int128.Int128Mul(e1.Delta.X, e2.Delta.Y));
        else
          return ClipperLib.Cast_Int64(e1.Delta.Y * e2.Delta.X) == ClipperLib.Cast_Int64(e1.Delta.X * e2.Delta.Y);
      } else if (alen == 4) {
        pt1 = a[0];
        pt2 = a[1];
        pt3 = a[2];
        UseFullRange = a[3];
        if (UseFullRange)
          return Int128.op_Equality(Int128.Int128Mul(pt1.Y - pt2.Y, pt2.X - pt3.X), Int128.Int128Mul(pt1.X - pt2.X, pt2.Y - pt3.Y));
        else
          return ClipperLib.Cast_Int64((pt1.Y - pt2.Y) * (pt2.X - pt3.X)) - ClipperLib.Cast_Int64((pt1.X - pt2.X) * (pt2.Y - pt3.Y)) === 0;
      } else {
        pt1 = a[0];
        pt2 = a[1];
        pt3 = a[2];
        pt4 = a[3];
        UseFullRange = a[4];
        if (UseFullRange)
          return Int128.op_Equality(Int128.Int128Mul(pt1.Y - pt2.Y, pt3.X - pt4.X), Int128.Int128Mul(pt1.X - pt2.X, pt3.Y - pt4.Y));
        else
          return ClipperLib.Cast_Int64((pt1.Y - pt2.Y) * (pt3.X - pt4.X)) - ClipperLib.Cast_Int64((pt1.X - pt2.X) * (pt3.Y - pt4.Y)) === 0;
      }
    };
    ClipperLib.ClipperBase.SlopesEqual3 = function(e1, e2, UseFullRange) {
      if (UseFullRange)
        return Int128.op_Equality(Int128.Int128Mul(e1.Delta.Y, e2.Delta.X), Int128.Int128Mul(e1.Delta.X, e2.Delta.Y));
      else
        return ClipperLib.Cast_Int64(e1.Delta.Y * e2.Delta.X) == ClipperLib.Cast_Int64(e1.Delta.X * e2.Delta.Y);
    };
    ClipperLib.ClipperBase.SlopesEqual4 = function(pt1, pt2, pt3, UseFullRange) {
      if (UseFullRange)
        return Int128.op_Equality(Int128.Int128Mul(pt1.Y - pt2.Y, pt2.X - pt3.X), Int128.Int128Mul(pt1.X - pt2.X, pt2.Y - pt3.Y));
      else
        return ClipperLib.Cast_Int64((pt1.Y - pt2.Y) * (pt2.X - pt3.X)) - ClipperLib.Cast_Int64((pt1.X - pt2.X) * (pt2.Y - pt3.Y)) === 0;
    };
    ClipperLib.ClipperBase.SlopesEqual5 = function(pt1, pt2, pt3, pt4, UseFullRange) {
      if (UseFullRange)
        return Int128.op_Equality(Int128.Int128Mul(pt1.Y - pt2.Y, pt3.X - pt4.X), Int128.Int128Mul(pt1.X - pt2.X, pt3.Y - pt4.Y));
      else
        return ClipperLib.Cast_Int64((pt1.Y - pt2.Y) * (pt3.X - pt4.X)) - ClipperLib.Cast_Int64((pt1.X - pt2.X) * (pt3.Y - pt4.Y)) === 0;
    };
    ClipperLib.ClipperBase.prototype.Clear = function() {
      this.DisposeLocalMinimaList();
      for (var i = 0, ilen = this.m_edges.length; i < ilen; ++i) {
        for (var j = 0, jlen = this.m_edges[i].length; j < jlen; ++j)
          this.m_edges[i][j] = null;
        ClipperLib.Clear(this.m_edges[i]);
      }
      ClipperLib.Clear(this.m_edges);
      this.m_UseFullRange = false;
      this.m_HasOpenPaths = false;
    };
    ClipperLib.ClipperBase.prototype.DisposeLocalMinimaList = function() {
      while (this.m_MinimaList !== null) {
        var tmpLm = this.m_MinimaList.Next;
        this.m_MinimaList = null;
        this.m_MinimaList = tmpLm;
      }
      this.m_CurrentLM = null;
    };
    ClipperLib.ClipperBase.prototype.RangeTest = function(Pt, useFullRange) {
      if (useFullRange.Value) {
        if (Pt.X > ClipperLib.ClipperBase.hiRange || Pt.Y > ClipperLib.ClipperBase.hiRange || -Pt.X > ClipperLib.ClipperBase.hiRange || -Pt.Y > ClipperLib.ClipperBase.hiRange)
          ClipperLib.Error("Coordinate outside allowed range in RangeTest().");
      } else if (Pt.X > ClipperLib.ClipperBase.loRange || Pt.Y > ClipperLib.ClipperBase.loRange || -Pt.X > ClipperLib.ClipperBase.loRange || -Pt.Y > ClipperLib.ClipperBase.loRange) {
        useFullRange.Value = true;
        this.RangeTest(Pt, useFullRange);
      }
    };
    ClipperLib.ClipperBase.prototype.InitEdge = function(e, eNext, ePrev, pt) {
      e.Next = eNext;
      e.Prev = ePrev;
      e.Curr.X = pt.X;
      e.Curr.Y = pt.Y;
      e.OutIdx = -1;
    };
    ClipperLib.ClipperBase.prototype.InitEdge2 = function(e, polyType) {
      if (e.Curr.Y >= e.Next.Curr.Y) {
        e.Bot.X = e.Curr.X;
        e.Bot.Y = e.Curr.Y;
        e.Top.X = e.Next.Curr.X;
        e.Top.Y = e.Next.Curr.Y;
      } else {
        e.Top.X = e.Curr.X;
        e.Top.Y = e.Curr.Y;
        e.Bot.X = e.Next.Curr.X;
        e.Bot.Y = e.Next.Curr.Y;
      }
      this.SetDx(e);
      e.PolyTyp = polyType;
    };
    ClipperLib.ClipperBase.prototype.FindNextLocMin = function(E) {
      var E2;
      for (; ; ) {
        while (ClipperLib.IntPoint.op_Inequality(E.Bot, E.Prev.Bot) || ClipperLib.IntPoint.op_Equality(E.Curr, E.Top))
          E = E.Next;
        if (E.Dx != ClipperLib.ClipperBase.horizontal && E.Prev.Dx != ClipperLib.ClipperBase.horizontal)
          break;
        while (E.Prev.Dx == ClipperLib.ClipperBase.horizontal)
          E = E.Prev;
        E2 = E;
        while (E.Dx == ClipperLib.ClipperBase.horizontal)
          E = E.Next;
        if (E.Top.Y == E.Prev.Bot.Y)
          continue;
        if (E2.Prev.Bot.X < E.Bot.X)
          E = E2;
        break;
      }
      return E;
    };
    ClipperLib.ClipperBase.prototype.ProcessBound = function(E, IsClockwise) {
      var EStart = E, Result = E;
      var Horz;
      var StartX;
      if (E.Dx == ClipperLib.ClipperBase.horizontal) {
        if (IsClockwise)
          StartX = E.Prev.Bot.X;
        else
          StartX = E.Next.Bot.X;
        if (E.Bot.X != StartX)
          this.ReverseHorizontal(E);
      }
      if (Result.OutIdx != ClipperLib.ClipperBase.Skip) {
        if (IsClockwise) {
          while (Result.Top.Y == Result.Next.Bot.Y && Result.Next.OutIdx != ClipperLib.ClipperBase.Skip)
            Result = Result.Next;
          if (Result.Dx == ClipperLib.ClipperBase.horizontal && Result.Next.OutIdx != ClipperLib.ClipperBase.Skip) {
            Horz = Result;
            while (Horz.Prev.Dx == ClipperLib.ClipperBase.horizontal)
              Horz = Horz.Prev;
            if (Horz.Prev.Top.X == Result.Next.Top.X) {
              if (!IsClockwise)
                Result = Horz.Prev;
            } else if (Horz.Prev.Top.X > Result.Next.Top.X)
              Result = Horz.Prev;
          }
          while (E != Result) {
            E.NextInLML = E.Next;
            if (E.Dx == ClipperLib.ClipperBase.horizontal && E != EStart && E.Bot.X != E.Prev.Top.X)
              this.ReverseHorizontal(E);
            E = E.Next;
          }
          if (E.Dx == ClipperLib.ClipperBase.horizontal && E != EStart && E.Bot.X != E.Prev.Top.X)
            this.ReverseHorizontal(E);
          Result = Result.Next;
        } else {
          while (Result.Top.Y == Result.Prev.Bot.Y && Result.Prev.OutIdx != ClipperLib.ClipperBase.Skip)
            Result = Result.Prev;
          if (Result.Dx == ClipperLib.ClipperBase.horizontal && Result.Prev.OutIdx != ClipperLib.ClipperBase.Skip) {
            Horz = Result;
            while (Horz.Next.Dx == ClipperLib.ClipperBase.horizontal)
              Horz = Horz.Next;
            if (Horz.Next.Top.X == Result.Prev.Top.X) {
              if (!IsClockwise)
                Result = Horz.Next;
            } else if (Horz.Next.Top.X > Result.Prev.Top.X)
              Result = Horz.Next;
          }
          while (E != Result) {
            E.NextInLML = E.Prev;
            if (E.Dx == ClipperLib.ClipperBase.horizontal && E != EStart && E.Bot.X != E.Next.Top.X)
              this.ReverseHorizontal(E);
            E = E.Prev;
          }
          if (E.Dx == ClipperLib.ClipperBase.horizontal && E != EStart && E.Bot.X != E.Next.Top.X)
            this.ReverseHorizontal(E);
          Result = Result.Prev;
        }
      }
      if (Result.OutIdx == ClipperLib.ClipperBase.Skip) {
        E = Result;
        if (IsClockwise) {
          while (E.Top.Y == E.Next.Bot.Y)
            E = E.Next;
          while (E != Result && E.Dx == ClipperLib.ClipperBase.horizontal)
            E = E.Prev;
        } else {
          while (E.Top.Y == E.Prev.Bot.Y)
            E = E.Prev;
          while (E != Result && E.Dx == ClipperLib.ClipperBase.horizontal)
            E = E.Next;
        }
        if (E == Result) {
          if (IsClockwise)
            Result = E.Next;
          else
            Result = E.Prev;
        } else {
          if (IsClockwise)
            E = Result.Next;
          else
            E = Result.Prev;
          var locMin = new ClipperLib.LocalMinima();
          locMin.Next = null;
          locMin.Y = E.Bot.Y;
          locMin.LeftBound = null;
          locMin.RightBound = E;
          locMin.RightBound.WindDelta = 0;
          Result = this.ProcessBound(locMin.RightBound, IsClockwise);
          this.InsertLocalMinima(locMin);
        }
      }
      return Result;
    };
    ClipperLib.ClipperBase.prototype.AddPath = function(pg, polyType, Closed) {
      if (use_lines) {
        if (!Closed && polyType == ClipperLib.PolyType.ptClip)
          ClipperLib.Error("AddPath: Open paths must be subject.");
      } else {
        if (!Closed)
          ClipperLib.Error("AddPath: Open paths have been disabled.");
      }
      var highI = pg.length - 1;
      if (Closed)
        while (highI > 0 && ClipperLib.IntPoint.op_Equality(pg[highI], pg[0]))
          --highI;
      while (highI > 0 && ClipperLib.IntPoint.op_Equality(pg[highI], pg[highI - 1]))
        --highI;
      if (Closed && highI < 2 || !Closed && highI < 1)
        return false;
      var edges = new Array();
      for (var i = 0; i <= highI; i++)
        edges.push(new ClipperLib.TEdge());
      var IsFlat = true;
      edges[1].Curr.X = pg[1].X;
      edges[1].Curr.Y = pg[1].Y;
      var $1 = { Value: this.m_UseFullRange };
      this.RangeTest(pg[0], $1);
      this.m_UseFullRange = $1.Value;
      $1.Value = this.m_UseFullRange;
      this.RangeTest(pg[highI], $1);
      this.m_UseFullRange = $1.Value;
      this.InitEdge(edges[0], edges[1], edges[highI], pg[0]);
      this.InitEdge(edges[highI], edges[0], edges[highI - 1], pg[highI]);
      for (var i = highI - 1; i >= 1; --i) {
        $1.Value = this.m_UseFullRange;
        this.RangeTest(pg[i], $1);
        this.m_UseFullRange = $1.Value;
        this.InitEdge(edges[i], edges[i + 1], edges[i - 1], pg[i]);
      }
      var eStart = edges[0];
      var E = eStart, eLoopStop = eStart;
      for (; ; ) {
        if (ClipperLib.IntPoint.op_Equality(E.Curr, E.Next.Curr)) {
          if (E == E.Next)
            break;
          if (E == eStart)
            eStart = E.Next;
          E = this.RemoveEdge(E);
          eLoopStop = E;
          continue;
        }
        if (E.Prev == E.Next)
          break;
        else if (Closed && ClipperLib.ClipperBase.SlopesEqual(E.Prev.Curr, E.Curr, E.Next.Curr, this.m_UseFullRange) && (!this.PreserveCollinear || !this.Pt2IsBetweenPt1AndPt3(E.Prev.Curr, E.Curr, E.Next.Curr))) {
          if (E == eStart)
            eStart = E.Next;
          E = this.RemoveEdge(E);
          E = E.Prev;
          eLoopStop = E;
          continue;
        }
        E = E.Next;
        if (E == eLoopStop)
          break;
      }
      if (!Closed && E == E.Next || Closed && E.Prev == E.Next)
        return false;
      if (!Closed) {
        this.m_HasOpenPaths = true;
        eStart.Prev.OutIdx = ClipperLib.ClipperBase.Skip;
      }
      var eHighest = eStart;
      E = eStart;
      do {
        this.InitEdge2(E, polyType);
        E = E.Next;
        if (IsFlat && E.Curr.Y != eStart.Curr.Y)
          IsFlat = false;
      } while (E != eStart);
      if (IsFlat) {
        if (Closed)
          return false;
        E.Prev.OutIdx = ClipperLib.ClipperBase.Skip;
        if (E.Prev.Bot.X < E.Prev.Top.X)
          this.ReverseHorizontal(E.Prev);
        var locMin = new ClipperLib.LocalMinima();
        locMin.Next = null;
        locMin.Y = E.Bot.Y;
        locMin.LeftBound = null;
        locMin.RightBound = E;
        locMin.RightBound.Side = ClipperLib.EdgeSide.esRight;
        locMin.RightBound.WindDelta = 0;
        while (E.Next.OutIdx != ClipperLib.ClipperBase.Skip) {
          E.NextInLML = E.Next;
          if (E.Bot.X != E.Prev.Top.X)
            this.ReverseHorizontal(E);
          E = E.Next;
        }
        this.InsertLocalMinima(locMin);
        this.m_edges.push(edges);
        return true;
      }
      this.m_edges.push(edges);
      var clockwise;
      var EMin = null;
      for (; ; ) {
        E = this.FindNextLocMin(E);
        if (E == EMin)
          break;
        else if (EMin == null)
          EMin = E;
        var locMin = new ClipperLib.LocalMinima();
        locMin.Next = null;
        locMin.Y = E.Bot.Y;
        if (E.Dx < E.Prev.Dx) {
          locMin.LeftBound = E.Prev;
          locMin.RightBound = E;
          clockwise = false;
        } else {
          locMin.LeftBound = E;
          locMin.RightBound = E.Prev;
          clockwise = true;
        }
        locMin.LeftBound.Side = ClipperLib.EdgeSide.esLeft;
        locMin.RightBound.Side = ClipperLib.EdgeSide.esRight;
        if (!Closed)
          locMin.LeftBound.WindDelta = 0;
        else if (locMin.LeftBound.Next == locMin.RightBound)
          locMin.LeftBound.WindDelta = -1;
        else
          locMin.LeftBound.WindDelta = 1;
        locMin.RightBound.WindDelta = -locMin.LeftBound.WindDelta;
        E = this.ProcessBound(locMin.LeftBound, clockwise);
        var E2 = this.ProcessBound(locMin.RightBound, !clockwise);
        if (locMin.LeftBound.OutIdx == ClipperLib.ClipperBase.Skip)
          locMin.LeftBound = null;
        else if (locMin.RightBound.OutIdx == ClipperLib.ClipperBase.Skip)
          locMin.RightBound = null;
        this.InsertLocalMinima(locMin);
        if (!clockwise)
          E = E2;
      }
      return true;
    };
    ClipperLib.ClipperBase.prototype.AddPaths = function(ppg, polyType, closed) {
      var result = false;
      for (var i = 0, ilen = ppg.length; i < ilen; ++i)
        if (this.AddPath(ppg[i], polyType, closed))
          result = true;
      return result;
    };
    ClipperLib.ClipperBase.prototype.Pt2IsBetweenPt1AndPt3 = function(pt1, pt2, pt3) {
      if (ClipperLib.IntPoint.op_Equality(pt1, pt3) || ClipperLib.IntPoint.op_Equality(pt1, pt2) || ClipperLib.IntPoint.op_Equality(pt3, pt2))
        return false;
      else if (pt1.X != pt3.X)
        return pt2.X > pt1.X == pt2.X < pt3.X;
      else
        return pt2.Y > pt1.Y == pt2.Y < pt3.Y;
    };
    ClipperLib.ClipperBase.prototype.RemoveEdge = function(e) {
      e.Prev.Next = e.Next;
      e.Next.Prev = e.Prev;
      var result = e.Next;
      e.Prev = null;
      return result;
    };
    ClipperLib.ClipperBase.prototype.SetDx = function(e) {
      e.Delta.X = e.Top.X - e.Bot.X;
      e.Delta.Y = e.Top.Y - e.Bot.Y;
      if (e.Delta.Y === 0) e.Dx = ClipperLib.ClipperBase.horizontal;
      else e.Dx = e.Delta.X / e.Delta.Y;
    };
    ClipperLib.ClipperBase.prototype.InsertLocalMinima = function(newLm) {
      if (this.m_MinimaList === null) {
        this.m_MinimaList = newLm;
      } else if (newLm.Y >= this.m_MinimaList.Y) {
        newLm.Next = this.m_MinimaList;
        this.m_MinimaList = newLm;
      } else {
        var tmpLm = this.m_MinimaList;
        while (tmpLm.Next !== null && newLm.Y < tmpLm.Next.Y)
          tmpLm = tmpLm.Next;
        newLm.Next = tmpLm.Next;
        tmpLm.Next = newLm;
      }
    };
    ClipperLib.ClipperBase.prototype.PopLocalMinima = function() {
      if (this.m_CurrentLM === null)
        return;
      this.m_CurrentLM = this.m_CurrentLM.Next;
    };
    ClipperLib.ClipperBase.prototype.ReverseHorizontal = function(e) {
      var tmp = e.Top.X;
      e.Top.X = e.Bot.X;
      e.Bot.X = tmp;
      if (use_xyz) {
        tmp = e.Top.Z;
        e.Top.Z = e.Bot.Z;
        e.Bot.Z = tmp;
      }
    };
    ClipperLib.ClipperBase.prototype.Reset = function() {
      this.m_CurrentLM = this.m_MinimaList;
      if (this.m_CurrentLM == null)
        return;
      var lm = this.m_MinimaList;
      while (lm != null) {
        var e = lm.LeftBound;
        if (e != null) {
          e.Curr.X = e.Bot.X;
          e.Curr.Y = e.Bot.Y;
          e.Side = ClipperLib.EdgeSide.esLeft;
          e.OutIdx = ClipperLib.ClipperBase.Unassigned;
        }
        e = lm.RightBound;
        if (e != null) {
          e.Curr.X = e.Bot.X;
          e.Curr.Y = e.Bot.Y;
          e.Side = ClipperLib.EdgeSide.esRight;
          e.OutIdx = ClipperLib.ClipperBase.Unassigned;
        }
        lm = lm.Next;
      }
    };
    ClipperLib.Clipper = function(InitOptions) {
      if (typeof InitOptions == "undefined") InitOptions = 0;
      this.m_PolyOuts = null;
      this.m_ClipType = ClipperLib.ClipType.ctIntersection;
      this.m_Scanbeam = null;
      this.m_ActiveEdges = null;
      this.m_SortedEdges = null;
      this.m_IntersectList = null;
      this.m_IntersectNodeComparer = null;
      this.m_ExecuteLocked = false;
      this.m_ClipFillType = ClipperLib.PolyFillType.pftEvenOdd;
      this.m_SubjFillType = ClipperLib.PolyFillType.pftEvenOdd;
      this.m_Joins = null;
      this.m_GhostJoins = null;
      this.m_UsingPolyTree = false;
      this.ReverseSolution = false;
      this.StrictlySimple = false;
      ClipperLib.ClipperBase.call(this);
      this.m_Scanbeam = null;
      this.m_ActiveEdges = null;
      this.m_SortedEdges = null;
      this.m_IntersectList = new Array();
      this.m_IntersectNodeComparer = ClipperLib.MyIntersectNodeSort.Compare;
      this.m_ExecuteLocked = false;
      this.m_UsingPolyTree = false;
      this.m_PolyOuts = new Array();
      this.m_Joins = new Array();
      this.m_GhostJoins = new Array();
      this.ReverseSolution = (1 & InitOptions) !== 0;
      this.StrictlySimple = (2 & InitOptions) !== 0;
      this.PreserveCollinear = (4 & InitOptions) !== 0;
      if (use_xyz) {
        this.ZFillFunction = null;
      }
    };
    ClipperLib.Clipper.ioReverseSolution = 1;
    ClipperLib.Clipper.ioStrictlySimple = 2;
    ClipperLib.Clipper.ioPreserveCollinear = 4;
    ClipperLib.Clipper.prototype.Clear = function() {
      if (this.m_edges.length === 0)
        return;
      this.DisposeAllPolyPts();
      ClipperLib.ClipperBase.prototype.Clear.call(this);
    };
    ClipperLib.Clipper.prototype.DisposeScanbeamList = function() {
      while (this.m_Scanbeam !== null) {
        var sb2 = this.m_Scanbeam.Next;
        this.m_Scanbeam = null;
        this.m_Scanbeam = sb2;
      }
    };
    ClipperLib.Clipper.prototype.Reset = function() {
      ClipperLib.ClipperBase.prototype.Reset.call(this);
      this.m_Scanbeam = null;
      this.m_ActiveEdges = null;
      this.m_SortedEdges = null;
      var lm = this.m_MinimaList;
      while (lm !== null) {
        this.InsertScanbeam(lm.Y);
        lm = lm.Next;
      }
    };
    ClipperLib.Clipper.prototype.InsertScanbeam = function(Y) {
      if (this.m_Scanbeam === null) {
        this.m_Scanbeam = new ClipperLib.Scanbeam();
        this.m_Scanbeam.Next = null;
        this.m_Scanbeam.Y = Y;
      } else if (Y > this.m_Scanbeam.Y) {
        var newSb = new ClipperLib.Scanbeam();
        newSb.Y = Y;
        newSb.Next = this.m_Scanbeam;
        this.m_Scanbeam = newSb;
      } else {
        var sb2 = this.m_Scanbeam;
        while (sb2.Next !== null && Y <= sb2.Next.Y)
          sb2 = sb2.Next;
        if (Y == sb2.Y)
          return;
        var newSb = new ClipperLib.Scanbeam();
        newSb.Y = Y;
        newSb.Next = sb2.Next;
        sb2.Next = newSb;
      }
    };
    ClipperLib.Clipper.prototype.Execute = function() {
      var a = arguments, alen = a.length, ispolytree = a[1] instanceof ClipperLib.PolyTree;
      if (alen == 4 && !ispolytree) {
        var clipType = a[0], solution = a[1], subjFillType = a[2], clipFillType = a[3];
        if (this.m_ExecuteLocked)
          return false;
        if (this.m_HasOpenPaths)
          ClipperLib.Error("Error: PolyTree struct is need for open path clipping.");
        this.m_ExecuteLocked = true;
        ClipperLib.Clear(solution);
        this.m_SubjFillType = subjFillType;
        this.m_ClipFillType = clipFillType;
        this.m_ClipType = clipType;
        this.m_UsingPolyTree = false;
        try {
          var succeeded = this.ExecuteInternal();
          if (succeeded) this.BuildResult(solution);
        } finally {
          this.DisposeAllPolyPts();
          this.m_ExecuteLocked = false;
        }
        return succeeded;
      } else if (alen == 4 && ispolytree) {
        var clipType = a[0], polytree = a[1], subjFillType = a[2], clipFillType = a[3];
        if (this.m_ExecuteLocked)
          return false;
        this.m_ExecuteLocked = true;
        this.m_SubjFillType = subjFillType;
        this.m_ClipFillType = clipFillType;
        this.m_ClipType = clipType;
        this.m_UsingPolyTree = true;
        try {
          var succeeded = this.ExecuteInternal();
          if (succeeded) this.BuildResult2(polytree);
        } finally {
          this.DisposeAllPolyPts();
          this.m_ExecuteLocked = false;
        }
        return succeeded;
      } else if (alen == 2 && !ispolytree) {
        var clipType = a[0], solution = a[1];
        return this.Execute(clipType, solution, ClipperLib.PolyFillType.pftEvenOdd, ClipperLib.PolyFillType.pftEvenOdd);
      } else if (alen == 2 && ispolytree) {
        var clipType = a[0], polytree = a[1];
        return this.Execute(clipType, polytree, ClipperLib.PolyFillType.pftEvenOdd, ClipperLib.PolyFillType.pftEvenOdd);
      }
    };
    ClipperLib.Clipper.prototype.FixHoleLinkage = function(outRec) {
      if (outRec.FirstLeft === null || outRec.IsHole != outRec.FirstLeft.IsHole && outRec.FirstLeft.Pts !== null)
        return;
      var orfl = outRec.FirstLeft;
      while (orfl !== null && (orfl.IsHole == outRec.IsHole || orfl.Pts === null))
        orfl = orfl.FirstLeft;
      outRec.FirstLeft = orfl;
    };
    ClipperLib.Clipper.prototype.ExecuteInternal = function() {
      try {
        this.Reset();
        if (this.m_CurrentLM === null)
          return false;
        var botY = this.PopScanbeam();
        do {
          this.InsertLocalMinimaIntoAEL(botY);
          ClipperLib.Clear(this.m_GhostJoins);
          this.ProcessHorizontals(false);
          if (this.m_Scanbeam === null)
            break;
          var topY = this.PopScanbeam();
          if (!this.ProcessIntersections(botY, topY))
            return false;
          this.ProcessEdgesAtTopOfScanbeam(topY);
          botY = topY;
        } while (this.m_Scanbeam !== null || this.m_CurrentLM !== null);
        for (var i = 0, ilen = this.m_PolyOuts.length; i < ilen; i++) {
          var outRec = this.m_PolyOuts[i];
          if (outRec.Pts === null || outRec.IsOpen)
            continue;
          if ((outRec.IsHole ^ this.ReverseSolution) == this.Area(outRec) > 0)
            this.ReversePolyPtLinks(outRec.Pts);
        }
        this.JoinCommonEdges();
        for (var i = 0, ilen = this.m_PolyOuts.length; i < ilen; i++) {
          var outRec = this.m_PolyOuts[i];
          if (outRec.Pts !== null && !outRec.IsOpen)
            this.FixupOutPolygon(outRec);
        }
        if (this.StrictlySimple)
          this.DoSimplePolygons();
        return true;
      } finally {
        ClipperLib.Clear(this.m_Joins);
        ClipperLib.Clear(this.m_GhostJoins);
      }
    };
    ClipperLib.Clipper.prototype.PopScanbeam = function() {
      var Y = this.m_Scanbeam.Y;
      var sb2 = this.m_Scanbeam;
      this.m_Scanbeam = this.m_Scanbeam.Next;
      sb2 = null;
      return Y;
    };
    ClipperLib.Clipper.prototype.DisposeAllPolyPts = function() {
      for (var i = 0, ilen = this.m_PolyOuts.length; i < ilen; ++i)
        this.DisposeOutRec(i);
      ClipperLib.Clear(this.m_PolyOuts);
    };
    ClipperLib.Clipper.prototype.DisposeOutRec = function(index) {
      var outRec = this.m_PolyOuts[index];
      if (outRec.Pts !== null)
        this.DisposeOutPts(outRec.Pts);
      outRec = null;
      this.m_PolyOuts[index] = null;
    };
    ClipperLib.Clipper.prototype.DisposeOutPts = function(pp) {
      if (pp === null)
        return;
      var tmpPp = null;
      pp.Prev.Next = null;
      while (pp !== null) {
        tmpPp = pp;
        pp = pp.Next;
        tmpPp = null;
      }
    };
    ClipperLib.Clipper.prototype.AddJoin = function(Op1, Op2, OffPt) {
      var j = new ClipperLib.Join();
      j.OutPt1 = Op1;
      j.OutPt2 = Op2;
      j.OffPt.X = OffPt.X;
      j.OffPt.Y = OffPt.Y;
      this.m_Joins.push(j);
    };
    ClipperLib.Clipper.prototype.AddGhostJoin = function(Op, OffPt) {
      var j = new ClipperLib.Join();
      j.OutPt1 = Op;
      j.OffPt.X = OffPt.X;
      j.OffPt.Y = OffPt.Y;
      this.m_GhostJoins.push(j);
    };
    if (use_xyz) {
      ClipperLib.Clipper.prototype.SetZ = function(pt, e) {
        pt.Z = 0;
        if (this.ZFillFunction !== null) {
          if (e.OutIdx < 0)
            this.ZFillFunction(e.Bot, e.Top, pt);
          else
            this.ZFillFunction(e.Top, e.Bot, pt);
        }
      };
    }
    ClipperLib.Clipper.prototype.InsertLocalMinimaIntoAEL = function(botY) {
      while (this.m_CurrentLM !== null && this.m_CurrentLM.Y == botY) {
        var lb = this.m_CurrentLM.LeftBound;
        var rb = this.m_CurrentLM.RightBound;
        this.PopLocalMinima();
        var Op1 = null;
        if (lb === null) {
          this.InsertEdgeIntoAEL(rb, null);
          this.SetWindingCount(rb);
          if (this.IsContributing(rb))
            Op1 = this.AddOutPt(rb, rb.Bot);
        } else if (rb == null) {
          this.InsertEdgeIntoAEL(lb, null);
          this.SetWindingCount(lb);
          if (this.IsContributing(lb))
            Op1 = this.AddOutPt(lb, lb.Bot);
          this.InsertScanbeam(lb.Top.Y);
        } else {
          this.InsertEdgeIntoAEL(lb, null);
          this.InsertEdgeIntoAEL(rb, lb);
          this.SetWindingCount(lb);
          rb.WindCnt = lb.WindCnt;
          rb.WindCnt2 = lb.WindCnt2;
          if (this.IsContributing(lb))
            Op1 = this.AddLocalMinPoly(lb, rb, lb.Bot);
          this.InsertScanbeam(lb.Top.Y);
        }
        if (rb != null) {
          if (ClipperLib.ClipperBase.IsHorizontal(rb))
            this.AddEdgeToSEL(rb);
          else
            this.InsertScanbeam(rb.Top.Y);
        }
        if (lb == null || rb == null) continue;
        if (Op1 !== null && ClipperLib.ClipperBase.IsHorizontal(rb) && this.m_GhostJoins.length > 0 && rb.WindDelta !== 0) {
          for (var i = 0, ilen = this.m_GhostJoins.length; i < ilen; i++) {
            var j = this.m_GhostJoins[i];
            if (this.HorzSegmentsOverlap(j.OutPt1.Pt, j.OffPt, rb.Bot, rb.Top))
              this.AddJoin(j.OutPt1, Op1, j.OffPt);
          }
        }
        if (lb.OutIdx >= 0 && lb.PrevInAEL !== null && lb.PrevInAEL.Curr.X == lb.Bot.X && lb.PrevInAEL.OutIdx >= 0 && ClipperLib.ClipperBase.SlopesEqual(lb.PrevInAEL, lb, this.m_UseFullRange) && lb.WindDelta !== 0 && lb.PrevInAEL.WindDelta !== 0) {
          var Op2 = this.AddOutPt(lb.PrevInAEL, lb.Bot);
          this.AddJoin(Op1, Op2, lb.Top);
        }
        if (lb.NextInAEL != rb) {
          if (rb.OutIdx >= 0 && rb.PrevInAEL.OutIdx >= 0 && ClipperLib.ClipperBase.SlopesEqual(rb.PrevInAEL, rb, this.m_UseFullRange) && rb.WindDelta !== 0 && rb.PrevInAEL.WindDelta !== 0) {
            var Op2 = this.AddOutPt(rb.PrevInAEL, rb.Bot);
            this.AddJoin(Op1, Op2, rb.Top);
          }
          var e = lb.NextInAEL;
          if (e !== null)
            while (e != rb) {
              this.IntersectEdges(rb, e, lb.Curr, false);
              e = e.NextInAEL;
            }
        }
      }
    };
    ClipperLib.Clipper.prototype.InsertEdgeIntoAEL = function(edge, startEdge) {
      if (this.m_ActiveEdges === null) {
        edge.PrevInAEL = null;
        edge.NextInAEL = null;
        this.m_ActiveEdges = edge;
      } else if (startEdge === null && this.E2InsertsBeforeE1(this.m_ActiveEdges, edge)) {
        edge.PrevInAEL = null;
        edge.NextInAEL = this.m_ActiveEdges;
        this.m_ActiveEdges.PrevInAEL = edge;
        this.m_ActiveEdges = edge;
      } else {
        if (startEdge === null)
          startEdge = this.m_ActiveEdges;
        while (startEdge.NextInAEL !== null && !this.E2InsertsBeforeE1(startEdge.NextInAEL, edge))
          startEdge = startEdge.NextInAEL;
        edge.NextInAEL = startEdge.NextInAEL;
        if (startEdge.NextInAEL !== null)
          startEdge.NextInAEL.PrevInAEL = edge;
        edge.PrevInAEL = startEdge;
        startEdge.NextInAEL = edge;
      }
    };
    ClipperLib.Clipper.prototype.E2InsertsBeforeE1 = function(e1, e2) {
      if (e2.Curr.X == e1.Curr.X) {
        if (e2.Top.Y > e1.Top.Y)
          return e2.Top.X < ClipperLib.Clipper.TopX(e1, e2.Top.Y);
        else
          return e1.Top.X > ClipperLib.Clipper.TopX(e2, e1.Top.Y);
      } else
        return e2.Curr.X < e1.Curr.X;
    };
    ClipperLib.Clipper.prototype.IsEvenOddFillType = function(edge) {
      if (edge.PolyTyp == ClipperLib.PolyType.ptSubject)
        return this.m_SubjFillType == ClipperLib.PolyFillType.pftEvenOdd;
      else
        return this.m_ClipFillType == ClipperLib.PolyFillType.pftEvenOdd;
    };
    ClipperLib.Clipper.prototype.IsEvenOddAltFillType = function(edge) {
      if (edge.PolyTyp == ClipperLib.PolyType.ptSubject)
        return this.m_ClipFillType == ClipperLib.PolyFillType.pftEvenOdd;
      else
        return this.m_SubjFillType == ClipperLib.PolyFillType.pftEvenOdd;
    };
    ClipperLib.Clipper.prototype.IsContributing = function(edge) {
      var pft, pft2;
      if (edge.PolyTyp == ClipperLib.PolyType.ptSubject) {
        pft = this.m_SubjFillType;
        pft2 = this.m_ClipFillType;
      } else {
        pft = this.m_ClipFillType;
        pft2 = this.m_SubjFillType;
      }
      switch (pft) {
        case ClipperLib.PolyFillType.pftEvenOdd:
          if (edge.WindDelta === 0 && edge.WindCnt != 1)
            return false;
          break;
        case ClipperLib.PolyFillType.pftNonZero:
          if (Math.abs(edge.WindCnt) != 1)
            return false;
          break;
        case ClipperLib.PolyFillType.pftPositive:
          if (edge.WindCnt != 1)
            return false;
          break;
        default:
          if (edge.WindCnt != -1)
            return false;
          break;
      }
      switch (this.m_ClipType) {
        case ClipperLib.ClipType.ctIntersection:
          switch (pft2) {
            case ClipperLib.PolyFillType.pftEvenOdd:
            case ClipperLib.PolyFillType.pftNonZero:
              return edge.WindCnt2 !== 0;
            case ClipperLib.PolyFillType.pftPositive:
              return edge.WindCnt2 > 0;
            default:
              return edge.WindCnt2 < 0;
          }
        case ClipperLib.ClipType.ctUnion:
          switch (pft2) {
            case ClipperLib.PolyFillType.pftEvenOdd:
            case ClipperLib.PolyFillType.pftNonZero:
              return edge.WindCnt2 === 0;
            case ClipperLib.PolyFillType.pftPositive:
              return edge.WindCnt2 <= 0;
            default:
              return edge.WindCnt2 >= 0;
          }
        case ClipperLib.ClipType.ctDifference:
          if (edge.PolyTyp == ClipperLib.PolyType.ptSubject)
            switch (pft2) {
              case ClipperLib.PolyFillType.pftEvenOdd:
              case ClipperLib.PolyFillType.pftNonZero:
                return edge.WindCnt2 === 0;
              case ClipperLib.PolyFillType.pftPositive:
                return edge.WindCnt2 <= 0;
              default:
                return edge.WindCnt2 >= 0;
            }
          else
            switch (pft2) {
              case ClipperLib.PolyFillType.pftEvenOdd:
              case ClipperLib.PolyFillType.pftNonZero:
                return edge.WindCnt2 !== 0;
              case ClipperLib.PolyFillType.pftPositive:
                return edge.WindCnt2 > 0;
              default:
                return edge.WindCnt2 < 0;
            }
        case ClipperLib.ClipType.ctXor:
          if (edge.WindDelta === 0)
            switch (pft2) {
              case ClipperLib.PolyFillType.pftEvenOdd:
              case ClipperLib.PolyFillType.pftNonZero:
                return edge.WindCnt2 === 0;
              case ClipperLib.PolyFillType.pftPositive:
                return edge.WindCnt2 <= 0;
              default:
                return edge.WindCnt2 >= 0;
            }
          else
            return true;
      }
      return true;
    };
    ClipperLib.Clipper.prototype.SetWindingCount = function(edge) {
      var e = edge.PrevInAEL;
      while (e !== null && (e.PolyTyp != edge.PolyTyp || e.WindDelta === 0))
        e = e.PrevInAEL;
      if (e === null) {
        edge.WindCnt = edge.WindDelta === 0 ? 1 : edge.WindDelta;
        edge.WindCnt2 = 0;
        e = this.m_ActiveEdges;
      } else if (edge.WindDelta === 0 && this.m_ClipType != ClipperLib.ClipType.ctUnion) {
        edge.WindCnt = 1;
        edge.WindCnt2 = e.WindCnt2;
        e = e.NextInAEL;
      } else if (this.IsEvenOddFillType(edge)) {
        if (edge.WindDelta === 0) {
          var Inside = true;
          var e2 = e.PrevInAEL;
          while (e2 !== null) {
            if (e2.PolyTyp == e.PolyTyp && e2.WindDelta !== 0)
              Inside = !Inside;
            e2 = e2.PrevInAEL;
          }
          edge.WindCnt = Inside ? 0 : 1;
        } else {
          edge.WindCnt = edge.WindDelta;
        }
        edge.WindCnt2 = e.WindCnt2;
        e = e.NextInAEL;
      } else {
        if (e.WindCnt * e.WindDelta < 0) {
          if (Math.abs(e.WindCnt) > 1) {
            if (e.WindDelta * edge.WindDelta < 0)
              edge.WindCnt = e.WindCnt;
            else
              edge.WindCnt = e.WindCnt + edge.WindDelta;
          } else
            edge.WindCnt = edge.WindDelta === 0 ? 1 : edge.WindDelta;
        } else {
          if (edge.WindDelta === 0)
            edge.WindCnt = e.WindCnt < 0 ? e.WindCnt - 1 : e.WindCnt + 1;
          else if (e.WindDelta * edge.WindDelta < 0)
            edge.WindCnt = e.WindCnt;
          else
            edge.WindCnt = e.WindCnt + edge.WindDelta;
        }
        edge.WindCnt2 = e.WindCnt2;
        e = e.NextInAEL;
      }
      if (this.IsEvenOddAltFillType(edge)) {
        while (e != edge) {
          if (e.WindDelta !== 0)
            edge.WindCnt2 = edge.WindCnt2 === 0 ? 1 : 0;
          e = e.NextInAEL;
        }
      } else {
        while (e != edge) {
          edge.WindCnt2 += e.WindDelta;
          e = e.NextInAEL;
        }
      }
    };
    ClipperLib.Clipper.prototype.AddEdgeToSEL = function(edge) {
      if (this.m_SortedEdges === null) {
        this.m_SortedEdges = edge;
        edge.PrevInSEL = null;
        edge.NextInSEL = null;
      } else {
        edge.NextInSEL = this.m_SortedEdges;
        edge.PrevInSEL = null;
        this.m_SortedEdges.PrevInSEL = edge;
        this.m_SortedEdges = edge;
      }
    };
    ClipperLib.Clipper.prototype.CopyAELToSEL = function() {
      var e = this.m_ActiveEdges;
      this.m_SortedEdges = e;
      while (e !== null) {
        e.PrevInSEL = e.PrevInAEL;
        e.NextInSEL = e.NextInAEL;
        e = e.NextInAEL;
      }
    };
    ClipperLib.Clipper.prototype.SwapPositionsInAEL = function(edge1, edge2) {
      if (edge1.NextInAEL == edge1.PrevInAEL || edge2.NextInAEL == edge2.PrevInAEL)
        return;
      if (edge1.NextInAEL == edge2) {
        var next = edge2.NextInAEL;
        if (next !== null)
          next.PrevInAEL = edge1;
        var prev = edge1.PrevInAEL;
        if (prev !== null)
          prev.NextInAEL = edge2;
        edge2.PrevInAEL = prev;
        edge2.NextInAEL = edge1;
        edge1.PrevInAEL = edge2;
        edge1.NextInAEL = next;
      } else if (edge2.NextInAEL == edge1) {
        var next = edge1.NextInAEL;
        if (next !== null)
          next.PrevInAEL = edge2;
        var prev = edge2.PrevInAEL;
        if (prev !== null)
          prev.NextInAEL = edge1;
        edge1.PrevInAEL = prev;
        edge1.NextInAEL = edge2;
        edge2.PrevInAEL = edge1;
        edge2.NextInAEL = next;
      } else {
        var next = edge1.NextInAEL;
        var prev = edge1.PrevInAEL;
        edge1.NextInAEL = edge2.NextInAEL;
        if (edge1.NextInAEL !== null)
          edge1.NextInAEL.PrevInAEL = edge1;
        edge1.PrevInAEL = edge2.PrevInAEL;
        if (edge1.PrevInAEL !== null)
          edge1.PrevInAEL.NextInAEL = edge1;
        edge2.NextInAEL = next;
        if (edge2.NextInAEL !== null)
          edge2.NextInAEL.PrevInAEL = edge2;
        edge2.PrevInAEL = prev;
        if (edge2.PrevInAEL !== null)
          edge2.PrevInAEL.NextInAEL = edge2;
      }
      if (edge1.PrevInAEL === null)
        this.m_ActiveEdges = edge1;
      else if (edge2.PrevInAEL === null)
        this.m_ActiveEdges = edge2;
    };
    ClipperLib.Clipper.prototype.SwapPositionsInSEL = function(edge1, edge2) {
      if (edge1.NextInSEL === null && edge1.PrevInSEL === null)
        return;
      if (edge2.NextInSEL === null && edge2.PrevInSEL === null)
        return;
      if (edge1.NextInSEL == edge2) {
        var next = edge2.NextInSEL;
        if (next !== null)
          next.PrevInSEL = edge1;
        var prev = edge1.PrevInSEL;
        if (prev !== null)
          prev.NextInSEL = edge2;
        edge2.PrevInSEL = prev;
        edge2.NextInSEL = edge1;
        edge1.PrevInSEL = edge2;
        edge1.NextInSEL = next;
      } else if (edge2.NextInSEL == edge1) {
        var next = edge1.NextInSEL;
        if (next !== null)
          next.PrevInSEL = edge2;
        var prev = edge2.PrevInSEL;
        if (prev !== null)
          prev.NextInSEL = edge1;
        edge1.PrevInSEL = prev;
        edge1.NextInSEL = edge2;
        edge2.PrevInSEL = edge1;
        edge2.NextInSEL = next;
      } else {
        var next = edge1.NextInSEL;
        var prev = edge1.PrevInSEL;
        edge1.NextInSEL = edge2.NextInSEL;
        if (edge1.NextInSEL !== null)
          edge1.NextInSEL.PrevInSEL = edge1;
        edge1.PrevInSEL = edge2.PrevInSEL;
        if (edge1.PrevInSEL !== null)
          edge1.PrevInSEL.NextInSEL = edge1;
        edge2.NextInSEL = next;
        if (edge2.NextInSEL !== null)
          edge2.NextInSEL.PrevInSEL = edge2;
        edge2.PrevInSEL = prev;
        if (edge2.PrevInSEL !== null)
          edge2.PrevInSEL.NextInSEL = edge2;
      }
      if (edge1.PrevInSEL === null)
        this.m_SortedEdges = edge1;
      else if (edge2.PrevInSEL === null)
        this.m_SortedEdges = edge2;
    };
    ClipperLib.Clipper.prototype.AddLocalMaxPoly = function(e1, e2, pt) {
      this.AddOutPt(e1, pt);
      if (e2.WindDelta == 0) this.AddOutPt(e2, pt);
      if (e1.OutIdx == e2.OutIdx) {
        e1.OutIdx = -1;
        e2.OutIdx = -1;
      } else if (e1.OutIdx < e2.OutIdx)
        this.AppendPolygon(e1, e2);
      else
        this.AppendPolygon(e2, e1);
    };
    ClipperLib.Clipper.prototype.AddLocalMinPoly = function(e1, e2, pt) {
      var result;
      var e, prevE;
      if (ClipperLib.ClipperBase.IsHorizontal(e2) || e1.Dx > e2.Dx) {
        result = this.AddOutPt(e1, pt);
        e2.OutIdx = e1.OutIdx;
        e1.Side = ClipperLib.EdgeSide.esLeft;
        e2.Side = ClipperLib.EdgeSide.esRight;
        e = e1;
        if (e.PrevInAEL == e2)
          prevE = e2.PrevInAEL;
        else
          prevE = e.PrevInAEL;
      } else {
        result = this.AddOutPt(e2, pt);
        e1.OutIdx = e2.OutIdx;
        e1.Side = ClipperLib.EdgeSide.esRight;
        e2.Side = ClipperLib.EdgeSide.esLeft;
        e = e2;
        if (e.PrevInAEL == e1)
          prevE = e1.PrevInAEL;
        else
          prevE = e.PrevInAEL;
      }
      if (prevE !== null && prevE.OutIdx >= 0 && ClipperLib.Clipper.TopX(prevE, pt.Y) == ClipperLib.Clipper.TopX(e, pt.Y) && ClipperLib.ClipperBase.SlopesEqual(e, prevE, this.m_UseFullRange) && e.WindDelta !== 0 && prevE.WindDelta !== 0) {
        var outPt = this.AddOutPt(prevE, pt);
        this.AddJoin(result, outPt, e.Top);
      }
      return result;
    };
    ClipperLib.Clipper.prototype.CreateOutRec = function() {
      var result = new ClipperLib.OutRec();
      result.Idx = -1;
      result.IsHole = false;
      result.IsOpen = false;
      result.FirstLeft = null;
      result.Pts = null;
      result.BottomPt = null;
      result.PolyNode = null;
      this.m_PolyOuts.push(result);
      result.Idx = this.m_PolyOuts.length - 1;
      return result;
    };
    ClipperLib.Clipper.prototype.AddOutPt = function(e, pt) {
      var ToFront = e.Side == ClipperLib.EdgeSide.esLeft;
      if (e.OutIdx < 0) {
        var outRec = this.CreateOutRec();
        outRec.IsOpen = e.WindDelta === 0;
        var newOp = new ClipperLib.OutPt();
        outRec.Pts = newOp;
        newOp.Idx = outRec.Idx;
        newOp.Pt.X = pt.X;
        newOp.Pt.Y = pt.Y;
        newOp.Next = newOp;
        newOp.Prev = newOp;
        if (!outRec.IsOpen)
          this.SetHoleState(e, outRec);
        if (use_xyz) {
          if (ClipperLib.IntPoint.op_Equality(pt, e.Bot)) {
            newOp.Pt.X = e.Bot.X;
            newOp.Pt.Y = e.Bot.Y;
            newOp.Pt.Z = e.Bot.Z;
          } else if (ClipperLib.IntPoint.op_Equality(pt, e.Top)) {
            newOp.Pt.X = e.Top.X;
            newOp.Pt.Y = e.Top.Y;
            newOp.Pt.Z = e.Top.Z;
          } else
            this.SetZ(newOp.Pt, e);
        }
        e.OutIdx = outRec.Idx;
        return newOp;
      } else {
        var outRec = this.m_PolyOuts[e.OutIdx];
        var op = outRec.Pts;
        if (ToFront && ClipperLib.IntPoint.op_Equality(pt, op.Pt))
          return op;
        else if (!ToFront && ClipperLib.IntPoint.op_Equality(pt, op.Prev.Pt))
          return op.Prev;
        var newOp = new ClipperLib.OutPt();
        newOp.Idx = outRec.Idx;
        newOp.Pt.X = pt.X;
        newOp.Pt.Y = pt.Y;
        newOp.Next = op;
        newOp.Prev = op.Prev;
        newOp.Prev.Next = newOp;
        op.Prev = newOp;
        if (ToFront)
          outRec.Pts = newOp;
        if (use_xyz) {
          if (ClipperLib.IntPoint.op_Equality(pt, e.Bot)) {
            newOp.Pt.X = e.Bot.X;
            newOp.Pt.Y = e.Bot.Y;
            newOp.Pt.Z = e.Bot.Z;
          } else if (ClipperLib.IntPoint.op_Equality(pt, e.Top)) {
            newOp.Pt.X = e.Top.X;
            newOp.Pt.Y = e.Top.Y;
            newOp.Pt.Z = e.Top.Z;
          } else
            this.SetZ(newOp.Pt, e);
        }
        return newOp;
      }
    };
    ClipperLib.Clipper.prototype.SwapPoints = function(pt1, pt2) {
      var tmp = new ClipperLib.IntPoint(pt1.Value);
      pt1.Value.X = pt2.Value.X;
      pt1.Value.Y = pt2.Value.Y;
      pt2.Value.X = tmp.X;
      pt2.Value.Y = tmp.Y;
    };
    ClipperLib.Clipper.prototype.HorzSegmentsOverlap = function(Pt1a, Pt1b, Pt2a, Pt2b) {
      if (Pt1a.X > Pt2a.X == Pt1a.X < Pt2b.X)
        return true;
      else if (Pt1b.X > Pt2a.X == Pt1b.X < Pt2b.X)
        return true;
      else if (Pt2a.X > Pt1a.X == Pt2a.X < Pt1b.X)
        return true;
      else if (Pt2b.X > Pt1a.X == Pt2b.X < Pt1b.X)
        return true;
      else if (Pt1a.X == Pt2a.X && Pt1b.X == Pt2b.X)
        return true;
      else if (Pt1a.X == Pt2b.X && Pt1b.X == Pt2a.X)
        return true;
      else
        return false;
    };
    ClipperLib.Clipper.prototype.InsertPolyPtBetween = function(p1, p2, pt) {
      var result = new ClipperLib.OutPt();
      result.Pt.X = pt.X;
      result.Pt.Y = pt.Y;
      if (p2 == p1.Next) {
        p1.Next = result;
        p2.Prev = result;
        result.Next = p2;
        result.Prev = p1;
      } else {
        p2.Next = result;
        p1.Prev = result;
        result.Next = p1;
        result.Prev = p2;
      }
      return result;
    };
    ClipperLib.Clipper.prototype.SetHoleState = function(e, outRec) {
      var isHole = false;
      var e2 = e.PrevInAEL;
      while (e2 !== null) {
        if (e2.OutIdx >= 0 && e2.WindDelta != 0) {
          isHole = !isHole;
          if (outRec.FirstLeft === null)
            outRec.FirstLeft = this.m_PolyOuts[e2.OutIdx];
        }
        e2 = e2.PrevInAEL;
      }
      if (isHole)
        outRec.IsHole = true;
    };
    ClipperLib.Clipper.prototype.GetDx = function(pt1, pt2) {
      if (pt1.Y == pt2.Y)
        return ClipperLib.ClipperBase.horizontal;
      else
        return (pt2.X - pt1.X) / (pt2.Y - pt1.Y);
    };
    ClipperLib.Clipper.prototype.FirstIsBottomPt = function(btmPt1, btmPt2) {
      var p = btmPt1.Prev;
      while (ClipperLib.IntPoint.op_Equality(p.Pt, btmPt1.Pt) && p != btmPt1)
        p = p.Prev;
      var dx1p = Math.abs(this.GetDx(btmPt1.Pt, p.Pt));
      p = btmPt1.Next;
      while (ClipperLib.IntPoint.op_Equality(p.Pt, btmPt1.Pt) && p != btmPt1)
        p = p.Next;
      var dx1n = Math.abs(this.GetDx(btmPt1.Pt, p.Pt));
      p = btmPt2.Prev;
      while (ClipperLib.IntPoint.op_Equality(p.Pt, btmPt2.Pt) && p != btmPt2)
        p = p.Prev;
      var dx2p = Math.abs(this.GetDx(btmPt2.Pt, p.Pt));
      p = btmPt2.Next;
      while (ClipperLib.IntPoint.op_Equality(p.Pt, btmPt2.Pt) && p != btmPt2)
        p = p.Next;
      var dx2n = Math.abs(this.GetDx(btmPt2.Pt, p.Pt));
      return dx1p >= dx2p && dx1p >= dx2n || dx1n >= dx2p && dx1n >= dx2n;
    };
    ClipperLib.Clipper.prototype.GetBottomPt = function(pp) {
      var dups = null;
      var p = pp.Next;
      while (p != pp) {
        if (p.Pt.Y > pp.Pt.Y) {
          pp = p;
          dups = null;
        } else if (p.Pt.Y == pp.Pt.Y && p.Pt.X <= pp.Pt.X) {
          if (p.Pt.X < pp.Pt.X) {
            dups = null;
            pp = p;
          } else {
            if (p.Next != pp && p.Prev != pp)
              dups = p;
          }
        }
        p = p.Next;
      }
      if (dups !== null) {
        while (dups != p) {
          if (!this.FirstIsBottomPt(p, dups))
            pp = dups;
          dups = dups.Next;
          while (ClipperLib.IntPoint.op_Inequality(dups.Pt, pp.Pt))
            dups = dups.Next;
        }
      }
      return pp;
    };
    ClipperLib.Clipper.prototype.GetLowermostRec = function(outRec1, outRec2) {
      if (outRec1.BottomPt === null)
        outRec1.BottomPt = this.GetBottomPt(outRec1.Pts);
      if (outRec2.BottomPt === null)
        outRec2.BottomPt = this.GetBottomPt(outRec2.Pts);
      var bPt1 = outRec1.BottomPt;
      var bPt2 = outRec2.BottomPt;
      if (bPt1.Pt.Y > bPt2.Pt.Y)
        return outRec1;
      else if (bPt1.Pt.Y < bPt2.Pt.Y)
        return outRec2;
      else if (bPt1.Pt.X < bPt2.Pt.X)
        return outRec1;
      else if (bPt1.Pt.X > bPt2.Pt.X)
        return outRec2;
      else if (bPt1.Next == bPt1)
        return outRec2;
      else if (bPt2.Next == bPt2)
        return outRec1;
      else if (this.FirstIsBottomPt(bPt1, bPt2))
        return outRec1;
      else
        return outRec2;
    };
    ClipperLib.Clipper.prototype.Param1RightOfParam2 = function(outRec1, outRec2) {
      do {
        outRec1 = outRec1.FirstLeft;
        if (outRec1 == outRec2)
          return true;
      } while (outRec1 !== null);
      return false;
    };
    ClipperLib.Clipper.prototype.GetOutRec = function(idx) {
      var outrec = this.m_PolyOuts[idx];
      while (outrec != this.m_PolyOuts[outrec.Idx])
        outrec = this.m_PolyOuts[outrec.Idx];
      return outrec;
    };
    ClipperLib.Clipper.prototype.AppendPolygon = function(e1, e2) {
      var outRec1 = this.m_PolyOuts[e1.OutIdx];
      var outRec2 = this.m_PolyOuts[e2.OutIdx];
      var holeStateRec;
      if (this.Param1RightOfParam2(outRec1, outRec2))
        holeStateRec = outRec2;
      else if (this.Param1RightOfParam2(outRec2, outRec1))
        holeStateRec = outRec1;
      else
        holeStateRec = this.GetLowermostRec(outRec1, outRec2);
      var p1_lft = outRec1.Pts;
      var p1_rt = p1_lft.Prev;
      var p2_lft = outRec2.Pts;
      var p2_rt = p2_lft.Prev;
      var side;
      if (e1.Side == ClipperLib.EdgeSide.esLeft) {
        if (e2.Side == ClipperLib.EdgeSide.esLeft) {
          this.ReversePolyPtLinks(p2_lft);
          p2_lft.Next = p1_lft;
          p1_lft.Prev = p2_lft;
          p1_rt.Next = p2_rt;
          p2_rt.Prev = p1_rt;
          outRec1.Pts = p2_rt;
        } else {
          p2_rt.Next = p1_lft;
          p1_lft.Prev = p2_rt;
          p2_lft.Prev = p1_rt;
          p1_rt.Next = p2_lft;
          outRec1.Pts = p2_lft;
        }
        side = ClipperLib.EdgeSide.esLeft;
      } else {
        if (e2.Side == ClipperLib.EdgeSide.esRight) {
          this.ReversePolyPtLinks(p2_lft);
          p1_rt.Next = p2_rt;
          p2_rt.Prev = p1_rt;
          p2_lft.Next = p1_lft;
          p1_lft.Prev = p2_lft;
        } else {
          p1_rt.Next = p2_lft;
          p2_lft.Prev = p1_rt;
          p1_lft.Prev = p2_rt;
          p2_rt.Next = p1_lft;
        }
        side = ClipperLib.EdgeSide.esRight;
      }
      outRec1.BottomPt = null;
      if (holeStateRec == outRec2) {
        if (outRec2.FirstLeft != outRec1)
          outRec1.FirstLeft = outRec2.FirstLeft;
        outRec1.IsHole = outRec2.IsHole;
      }
      outRec2.Pts = null;
      outRec2.BottomPt = null;
      outRec2.FirstLeft = outRec1;
      var OKIdx = e1.OutIdx;
      var ObsoleteIdx = e2.OutIdx;
      e1.OutIdx = -1;
      e2.OutIdx = -1;
      var e = this.m_ActiveEdges;
      while (e !== null) {
        if (e.OutIdx == ObsoleteIdx) {
          e.OutIdx = OKIdx;
          e.Side = side;
          break;
        }
        e = e.NextInAEL;
      }
      outRec2.Idx = outRec1.Idx;
    };
    ClipperLib.Clipper.prototype.ReversePolyPtLinks = function(pp) {
      if (pp === null)
        return;
      var pp1;
      var pp2;
      pp1 = pp;
      do {
        pp2 = pp1.Next;
        pp1.Next = pp1.Prev;
        pp1.Prev = pp2;
        pp1 = pp2;
      } while (pp1 != pp);
    };
    ClipperLib.Clipper.SwapSides = function(edge1, edge2) {
      var side = edge1.Side;
      edge1.Side = edge2.Side;
      edge2.Side = side;
    };
    ClipperLib.Clipper.SwapPolyIndexes = function(edge1, edge2) {
      var outIdx = edge1.OutIdx;
      edge1.OutIdx = edge2.OutIdx;
      edge2.OutIdx = outIdx;
    };
    ClipperLib.Clipper.prototype.IntersectEdges = function(e1, e2, pt, protect) {
      var e1stops = !protect && e1.NextInLML === null && e1.Top.X == pt.X && e1.Top.Y == pt.Y;
      var e2stops = !protect && e2.NextInLML === null && e2.Top.X == pt.X && e2.Top.Y == pt.Y;
      var e1Contributing = e1.OutIdx >= 0;
      var e2Contributing = e2.OutIdx >= 0;
      if (use_lines) {
        if (e1.WindDelta === 0 || e2.WindDelta === 0) {
          if (e1.WindDelta === 0 && e2.WindDelta === 0) {
            if ((e1stops || e2stops) && e1Contributing && e2Contributing)
              this.AddLocalMaxPoly(e1, e2, pt);
          } else if (e1.PolyTyp == e2.PolyTyp && e1.WindDelta != e2.WindDelta && this.m_ClipType == ClipperLib.ClipType.ctUnion) {
            if (e1.WindDelta === 0) {
              if (e2Contributing) {
                this.AddOutPt(e1, pt);
                if (e1Contributing)
                  e1.OutIdx = -1;
              }
            } else {
              if (e1Contributing) {
                this.AddOutPt(e2, pt);
                if (e2Contributing)
                  e2.OutIdx = -1;
              }
            }
          } else if (e1.PolyTyp != e2.PolyTyp) {
            if (e1.WindDelta === 0 && Math.abs(e2.WindCnt) == 1 && (this.m_ClipType != ClipperLib.ClipType.ctUnion || e2.WindCnt2 === 0)) {
              this.AddOutPt(e1, pt);
              if (e1Contributing)
                e1.OutIdx = -1;
            } else if (e2.WindDelta === 0 && Math.abs(e1.WindCnt) == 1 && (this.m_ClipType != ClipperLib.ClipType.ctUnion || e1.WindCnt2 === 0)) {
              this.AddOutPt(e2, pt);
              if (e2Contributing)
                e2.OutIdx = -1;
            }
          }
          if (e1stops)
            if (e1.OutIdx < 0)
              this.DeleteFromAEL(e1);
            else
              ClipperLib.Error("Error intersecting polylines");
          if (e2stops)
            if (e2.OutIdx < 0)
              this.DeleteFromAEL(e2);
            else
              ClipperLib.Error("Error intersecting polylines");
          return;
        }
      }
      if (e1.PolyTyp == e2.PolyTyp) {
        if (this.IsEvenOddFillType(e1)) {
          var oldE1WindCnt = e1.WindCnt;
          e1.WindCnt = e2.WindCnt;
          e2.WindCnt = oldE1WindCnt;
        } else {
          if (e1.WindCnt + e2.WindDelta === 0)
            e1.WindCnt = -e1.WindCnt;
          else
            e1.WindCnt += e2.WindDelta;
          if (e2.WindCnt - e1.WindDelta === 0)
            e2.WindCnt = -e2.WindCnt;
          else
            e2.WindCnt -= e1.WindDelta;
        }
      } else {
        if (!this.IsEvenOddFillType(e2))
          e1.WindCnt2 += e2.WindDelta;
        else
          e1.WindCnt2 = e1.WindCnt2 === 0 ? 1 : 0;
        if (!this.IsEvenOddFillType(e1))
          e2.WindCnt2 -= e1.WindDelta;
        else
          e2.WindCnt2 = e2.WindCnt2 === 0 ? 1 : 0;
      }
      var e1FillType, e2FillType, e1FillType2, e2FillType2;
      if (e1.PolyTyp == ClipperLib.PolyType.ptSubject) {
        e1FillType = this.m_SubjFillType;
        e1FillType2 = this.m_ClipFillType;
      } else {
        e1FillType = this.m_ClipFillType;
        e1FillType2 = this.m_SubjFillType;
      }
      if (e2.PolyTyp == ClipperLib.PolyType.ptSubject) {
        e2FillType = this.m_SubjFillType;
        e2FillType2 = this.m_ClipFillType;
      } else {
        e2FillType = this.m_ClipFillType;
        e2FillType2 = this.m_SubjFillType;
      }
      var e1Wc, e2Wc;
      switch (e1FillType) {
        case ClipperLib.PolyFillType.pftPositive:
          e1Wc = e1.WindCnt;
          break;
        case ClipperLib.PolyFillType.pftNegative:
          e1Wc = -e1.WindCnt;
          break;
        default:
          e1Wc = Math.abs(e1.WindCnt);
          break;
      }
      switch (e2FillType) {
        case ClipperLib.PolyFillType.pftPositive:
          e2Wc = e2.WindCnt;
          break;
        case ClipperLib.PolyFillType.pftNegative:
          e2Wc = -e2.WindCnt;
          break;
        default:
          e2Wc = Math.abs(e2.WindCnt);
          break;
      }
      if (e1Contributing && e2Contributing) {
        if (e1stops || e2stops || e1Wc !== 0 && e1Wc != 1 || e2Wc !== 0 && e2Wc != 1 || e1.PolyTyp != e2.PolyTyp && this.m_ClipType != ClipperLib.ClipType.ctXor)
          this.AddLocalMaxPoly(e1, e2, pt);
        else {
          this.AddOutPt(e1, pt);
          this.AddOutPt(e2, pt);
          ClipperLib.Clipper.SwapSides(e1, e2);
          ClipperLib.Clipper.SwapPolyIndexes(e1, e2);
        }
      } else if (e1Contributing) {
        if (e2Wc === 0 || e2Wc == 1) {
          this.AddOutPt(e1, pt);
          ClipperLib.Clipper.SwapSides(e1, e2);
          ClipperLib.Clipper.SwapPolyIndexes(e1, e2);
        }
      } else if (e2Contributing) {
        if (e1Wc === 0 || e1Wc == 1) {
          this.AddOutPt(e2, pt);
          ClipperLib.Clipper.SwapSides(e1, e2);
          ClipperLib.Clipper.SwapPolyIndexes(e1, e2);
        }
      } else if ((e1Wc === 0 || e1Wc == 1) && (e2Wc === 0 || e2Wc == 1) && !e1stops && !e2stops) {
        var e1Wc2, e2Wc2;
        switch (e1FillType2) {
          case ClipperLib.PolyFillType.pftPositive:
            e1Wc2 = e1.WindCnt2;
            break;
          case ClipperLib.PolyFillType.pftNegative:
            e1Wc2 = -e1.WindCnt2;
            break;
          default:
            e1Wc2 = Math.abs(e1.WindCnt2);
            break;
        }
        switch (e2FillType2) {
          case ClipperLib.PolyFillType.pftPositive:
            e2Wc2 = e2.WindCnt2;
            break;
          case ClipperLib.PolyFillType.pftNegative:
            e2Wc2 = -e2.WindCnt2;
            break;
          default:
            e2Wc2 = Math.abs(e2.WindCnt2);
            break;
        }
        if (e1.PolyTyp != e2.PolyTyp)
          this.AddLocalMinPoly(e1, e2, pt);
        else if (e1Wc == 1 && e2Wc == 1)
          switch (this.m_ClipType) {
            case ClipperLib.ClipType.ctIntersection:
              if (e1Wc2 > 0 && e2Wc2 > 0)
                this.AddLocalMinPoly(e1, e2, pt);
              break;
            case ClipperLib.ClipType.ctUnion:
              if (e1Wc2 <= 0 && e2Wc2 <= 0)
                this.AddLocalMinPoly(e1, e2, pt);
              break;
            case ClipperLib.ClipType.ctDifference:
              if (e1.PolyTyp == ClipperLib.PolyType.ptClip && e1Wc2 > 0 && e2Wc2 > 0 || e1.PolyTyp == ClipperLib.PolyType.ptSubject && e1Wc2 <= 0 && e2Wc2 <= 0)
                this.AddLocalMinPoly(e1, e2, pt);
              break;
            case ClipperLib.ClipType.ctXor:
              this.AddLocalMinPoly(e1, e2, pt);
              break;
          }
        else
          ClipperLib.Clipper.SwapSides(e1, e2);
      }
      if (e1stops != e2stops && (e1stops && e1.OutIdx >= 0 || e2stops && e2.OutIdx >= 0)) {
        ClipperLib.Clipper.SwapSides(e1, e2);
        ClipperLib.Clipper.SwapPolyIndexes(e1, e2);
      }
      if (e1stops)
        this.DeleteFromAEL(e1);
      if (e2stops)
        this.DeleteFromAEL(e2);
    };
    ClipperLib.Clipper.prototype.DeleteFromAEL = function(e) {
      var AelPrev = e.PrevInAEL;
      var AelNext = e.NextInAEL;
      if (AelPrev === null && AelNext === null && e != this.m_ActiveEdges)
        return;
      if (AelPrev !== null)
        AelPrev.NextInAEL = AelNext;
      else
        this.m_ActiveEdges = AelNext;
      if (AelNext !== null)
        AelNext.PrevInAEL = AelPrev;
      e.NextInAEL = null;
      e.PrevInAEL = null;
    };
    ClipperLib.Clipper.prototype.DeleteFromSEL = function(e) {
      var SelPrev = e.PrevInSEL;
      var SelNext = e.NextInSEL;
      if (SelPrev === null && SelNext === null && e != this.m_SortedEdges)
        return;
      if (SelPrev !== null)
        SelPrev.NextInSEL = SelNext;
      else
        this.m_SortedEdges = SelNext;
      if (SelNext !== null)
        SelNext.PrevInSEL = SelPrev;
      e.NextInSEL = null;
      e.PrevInSEL = null;
    };
    ClipperLib.Clipper.prototype.UpdateEdgeIntoAEL = function(e) {
      if (e.NextInLML === null)
        ClipperLib.Error("UpdateEdgeIntoAEL: invalid call");
      var AelPrev = e.PrevInAEL;
      var AelNext = e.NextInAEL;
      e.NextInLML.OutIdx = e.OutIdx;
      if (AelPrev !== null)
        AelPrev.NextInAEL = e.NextInLML;
      else
        this.m_ActiveEdges = e.NextInLML;
      if (AelNext !== null)
        AelNext.PrevInAEL = e.NextInLML;
      e.NextInLML.Side = e.Side;
      e.NextInLML.WindDelta = e.WindDelta;
      e.NextInLML.WindCnt = e.WindCnt;
      e.NextInLML.WindCnt2 = e.WindCnt2;
      e = e.NextInLML;
      e.Curr.X = e.Bot.X;
      e.Curr.Y = e.Bot.Y;
      e.PrevInAEL = AelPrev;
      e.NextInAEL = AelNext;
      if (!ClipperLib.ClipperBase.IsHorizontal(e))
        this.InsertScanbeam(e.Top.Y);
      return e;
    };
    ClipperLib.Clipper.prototype.ProcessHorizontals = function(isTopOfScanbeam) {
      var horzEdge = this.m_SortedEdges;
      while (horzEdge !== null) {
        this.DeleteFromSEL(horzEdge);
        this.ProcessHorizontal(horzEdge, isTopOfScanbeam);
        horzEdge = this.m_SortedEdges;
      }
    };
    ClipperLib.Clipper.prototype.GetHorzDirection = function(HorzEdge, $var) {
      if (HorzEdge.Bot.X < HorzEdge.Top.X) {
        $var.Left = HorzEdge.Bot.X;
        $var.Right = HorzEdge.Top.X;
        $var.Dir = ClipperLib.Direction.dLeftToRight;
      } else {
        $var.Left = HorzEdge.Top.X;
        $var.Right = HorzEdge.Bot.X;
        $var.Dir = ClipperLib.Direction.dRightToLeft;
      }
    };
    ClipperLib.Clipper.prototype.PrepareHorzJoins = function(horzEdge, isTopOfScanbeam) {
      var outPt = this.m_PolyOuts[horzEdge.OutIdx].Pts;
      if (horzEdge.Side != ClipperLib.EdgeSide.esLeft)
        outPt = outPt.Prev;
      if (isTopOfScanbeam)
        if (ClipperLib.IntPoint.op_Equality(outPt.Pt, horzEdge.Top))
          this.AddGhostJoin(outPt, horzEdge.Bot);
        else
          this.AddGhostJoin(outPt, horzEdge.Top);
    };
    ClipperLib.Clipper.prototype.ProcessHorizontal = function(horzEdge, isTopOfScanbeam) {
      var $var = { Dir: null, Left: null, Right: null };
      this.GetHorzDirection(horzEdge, $var);
      var dir = $var.Dir;
      var horzLeft = $var.Left;
      var horzRight = $var.Right;
      var eLastHorz = horzEdge, eMaxPair = null;
      while (eLastHorz.NextInLML !== null && ClipperLib.ClipperBase.IsHorizontal(eLastHorz.NextInLML))
        eLastHorz = eLastHorz.NextInLML;
      if (eLastHorz.NextInLML === null)
        eMaxPair = this.GetMaximaPair(eLastHorz);
      for (; ; ) {
        var IsLastHorz = horzEdge == eLastHorz;
        var e = this.GetNextInAEL(horzEdge, dir);
        while (e !== null) {
          if (e.Curr.X == horzEdge.Top.X && horzEdge.NextInLML !== null && e.Dx < horzEdge.NextInLML.Dx)
            break;
          var eNext = this.GetNextInAEL(e, dir);
          if (dir == ClipperLib.Direction.dLeftToRight && e.Curr.X <= horzRight || dir == ClipperLib.Direction.dRightToLeft && e.Curr.X >= horzLeft) {
            if (horzEdge.OutIdx >= 0 && horzEdge.WindDelta != 0)
              this.PrepareHorzJoins(horzEdge, isTopOfScanbeam);
            if (e == eMaxPair && IsLastHorz) {
              if (dir == ClipperLib.Direction.dLeftToRight)
                this.IntersectEdges(horzEdge, e, e.Top, false);
              else
                this.IntersectEdges(e, horzEdge, e.Top, false);
              if (eMaxPair.OutIdx >= 0)
                ClipperLib.Error("ProcessHorizontal error");
              return;
            } else if (dir == ClipperLib.Direction.dLeftToRight) {
              var Pt = new ClipperLib.IntPoint(e.Curr.X, horzEdge.Curr.Y);
              this.IntersectEdges(horzEdge, e, Pt, true);
            } else {
              var Pt = new ClipperLib.IntPoint(e.Curr.X, horzEdge.Curr.Y);
              this.IntersectEdges(e, horzEdge, Pt, true);
            }
            this.SwapPositionsInAEL(horzEdge, e);
          } else if (dir == ClipperLib.Direction.dLeftToRight && e.Curr.X >= horzRight || dir == ClipperLib.Direction.dRightToLeft && e.Curr.X <= horzLeft)
            break;
          e = eNext;
        }
        if (horzEdge.OutIdx >= 0 && horzEdge.WindDelta !== 0)
          this.PrepareHorzJoins(horzEdge, isTopOfScanbeam);
        if (horzEdge.NextInLML !== null && ClipperLib.ClipperBase.IsHorizontal(horzEdge.NextInLML)) {
          horzEdge = this.UpdateEdgeIntoAEL(horzEdge);
          if (horzEdge.OutIdx >= 0)
            this.AddOutPt(horzEdge, horzEdge.Bot);
          var $var = { Dir: dir, Left: horzLeft, Right: horzRight };
          this.GetHorzDirection(horzEdge, $var);
          dir = $var.Dir;
          horzLeft = $var.Left;
          horzRight = $var.Right;
        } else
          break;
      }
      if (horzEdge.NextInLML !== null) {
        if (horzEdge.OutIdx >= 0) {
          var op1 = this.AddOutPt(horzEdge, horzEdge.Top);
          horzEdge = this.UpdateEdgeIntoAEL(horzEdge);
          if (horzEdge.WindDelta === 0)
            return;
          var ePrev = horzEdge.PrevInAEL;
          var eNext = horzEdge.NextInAEL;
          if (ePrev !== null && ePrev.Curr.X == horzEdge.Bot.X && ePrev.Curr.Y == horzEdge.Bot.Y && ePrev.WindDelta !== 0 && (ePrev.OutIdx >= 0 && ePrev.Curr.Y > ePrev.Top.Y && ClipperLib.ClipperBase.SlopesEqual(horzEdge, ePrev, this.m_UseFullRange))) {
            var op2 = this.AddOutPt(ePrev, horzEdge.Bot);
            this.AddJoin(op1, op2, horzEdge.Top);
          } else if (eNext !== null && eNext.Curr.X == horzEdge.Bot.X && eNext.Curr.Y == horzEdge.Bot.Y && eNext.WindDelta !== 0 && eNext.OutIdx >= 0 && eNext.Curr.Y > eNext.Top.Y && ClipperLib.ClipperBase.SlopesEqual(horzEdge, eNext, this.m_UseFullRange)) {
            var op2 = this.AddOutPt(eNext, horzEdge.Bot);
            this.AddJoin(op1, op2, horzEdge.Top);
          }
        } else horzEdge = this.UpdateEdgeIntoAEL(horzEdge);
      } else if (eMaxPair !== null) {
        if (eMaxPair.OutIdx >= 0) {
          if (dir == ClipperLib.Direction.dLeftToRight)
            this.IntersectEdges(horzEdge, eMaxPair, horzEdge.Top, false);
          else
            this.IntersectEdges(eMaxPair, horzEdge, horzEdge.Top, false);
          if (eMaxPair.OutIdx >= 0)
            ClipperLib.Error("ProcessHorizontal error");
        } else {
          this.DeleteFromAEL(horzEdge);
          this.DeleteFromAEL(eMaxPair);
        }
      } else {
        if (horzEdge.OutIdx >= 0)
          this.AddOutPt(horzEdge, horzEdge.Top);
        this.DeleteFromAEL(horzEdge);
      }
    };
    ClipperLib.Clipper.prototype.GetNextInAEL = function(e, Direction) {
      return Direction == ClipperLib.Direction.dLeftToRight ? e.NextInAEL : e.PrevInAEL;
    };
    ClipperLib.Clipper.prototype.IsMinima = function(e) {
      return e !== null && e.Prev.NextInLML != e && e.Next.NextInLML != e;
    };
    ClipperLib.Clipper.prototype.IsMaxima = function(e, Y) {
      return e !== null && e.Top.Y == Y && e.NextInLML === null;
    };
    ClipperLib.Clipper.prototype.IsIntermediate = function(e, Y) {
      return e.Top.Y == Y && e.NextInLML !== null;
    };
    ClipperLib.Clipper.prototype.GetMaximaPair = function(e) {
      var result = null;
      if (ClipperLib.IntPoint.op_Equality(e.Next.Top, e.Top) && e.Next.NextInLML === null)
        result = e.Next;
      else if (ClipperLib.IntPoint.op_Equality(e.Prev.Top, e.Top) && e.Prev.NextInLML === null)
        result = e.Prev;
      if (result !== null && (result.OutIdx == -2 || result.NextInAEL == result.PrevInAEL && !ClipperLib.ClipperBase.IsHorizontal(result)))
        return null;
      return result;
    };
    ClipperLib.Clipper.prototype.ProcessIntersections = function(botY, topY) {
      if (this.m_ActiveEdges == null)
        return true;
      try {
        this.BuildIntersectList(botY, topY);
        if (this.m_IntersectList.length == 0)
          return true;
        if (this.m_IntersectList.length == 1 || this.FixupIntersectionOrder())
          this.ProcessIntersectList();
        else
          return false;
      } catch ($$e2) {
        this.m_SortedEdges = null;
        this.m_IntersectList.length = 0;
        ClipperLib.Error("ProcessIntersections error");
      }
      this.m_SortedEdges = null;
      return true;
    };
    ClipperLib.Clipper.prototype.BuildIntersectList = function(botY, topY) {
      if (this.m_ActiveEdges === null)
        return;
      var e = this.m_ActiveEdges;
      this.m_SortedEdges = e;
      while (e !== null) {
        e.PrevInSEL = e.PrevInAEL;
        e.NextInSEL = e.NextInAEL;
        e.Curr.X = ClipperLib.Clipper.TopX(e, topY);
        e = e.NextInAEL;
      }
      var isModified = true;
      while (isModified && this.m_SortedEdges !== null) {
        isModified = false;
        e = this.m_SortedEdges;
        while (e.NextInSEL !== null) {
          var eNext = e.NextInSEL;
          var pt = new ClipperLib.IntPoint();
          if (e.Curr.X > eNext.Curr.X) {
            if (!this.IntersectPoint(e, eNext, pt) && e.Curr.X > eNext.Curr.X + 1) {
              ClipperLib.Error("Intersection error");
            }
            if (pt.Y > botY) {
              pt.Y = botY;
              if (Math.abs(e.Dx) > Math.abs(eNext.Dx))
                pt.X = ClipperLib.Clipper.TopX(eNext, botY);
              else
                pt.X = ClipperLib.Clipper.TopX(e, botY);
            }
            var newNode = new ClipperLib.IntersectNode();
            newNode.Edge1 = e;
            newNode.Edge2 = eNext;
            newNode.Pt.X = pt.X;
            newNode.Pt.Y = pt.Y;
            this.m_IntersectList.push(newNode);
            this.SwapPositionsInSEL(e, eNext);
            isModified = true;
          } else
            e = eNext;
        }
        if (e.PrevInSEL !== null)
          e.PrevInSEL.NextInSEL = null;
        else
          break;
      }
      this.m_SortedEdges = null;
    };
    ClipperLib.Clipper.prototype.EdgesAdjacent = function(inode) {
      return inode.Edge1.NextInSEL == inode.Edge2 || inode.Edge1.PrevInSEL == inode.Edge2;
    };
    ClipperLib.Clipper.IntersectNodeSort = function(node1, node2) {
      return node2.Pt.Y - node1.Pt.Y;
    };
    ClipperLib.Clipper.prototype.FixupIntersectionOrder = function() {
      this.m_IntersectList.sort(this.m_IntersectNodeComparer);
      this.CopyAELToSEL();
      var cnt = this.m_IntersectList.length;
      for (var i = 0; i < cnt; i++) {
        if (!this.EdgesAdjacent(this.m_IntersectList[i])) {
          var j = i + 1;
          while (j < cnt && !this.EdgesAdjacent(this.m_IntersectList[j]))
            j++;
          if (j == cnt)
            return false;
          var tmp = this.m_IntersectList[i];
          this.m_IntersectList[i] = this.m_IntersectList[j];
          this.m_IntersectList[j] = tmp;
        }
        this.SwapPositionsInSEL(this.m_IntersectList[i].Edge1, this.m_IntersectList[i].Edge2);
      }
      return true;
    };
    ClipperLib.Clipper.prototype.ProcessIntersectList = function() {
      for (var i = 0, ilen = this.m_IntersectList.length; i < ilen; i++) {
        var iNode = this.m_IntersectList[i];
        this.IntersectEdges(iNode.Edge1, iNode.Edge2, iNode.Pt, true);
        this.SwapPositionsInAEL(iNode.Edge1, iNode.Edge2);
      }
      this.m_IntersectList.length = 0;
    };
    var R1 = function(a) {
      return a < 0 ? Math.ceil(a - 0.5) : Math.round(a);
    };
    var R2 = function(a) {
      return a < 0 ? Math.ceil(a - 0.5) : Math.floor(a + 0.5);
    };
    var R3 = function(a) {
      return a < 0 ? -Math.round(Math.abs(a)) : Math.round(a);
    };
    var R4 = function(a) {
      if (a < 0) {
        a -= 0.5;
        return a < -2147483648 ? Math.ceil(a) : a | 0;
      } else {
        a += 0.5;
        return a > 2147483647 ? Math.floor(a) : a | 0;
      }
    };
    if (browser.msie) ClipperLib.Clipper.Round = R1;
    else if (browser.chromium) ClipperLib.Clipper.Round = R3;
    else if (browser.safari) ClipperLib.Clipper.Round = R4;
    else ClipperLib.Clipper.Round = R2;
    ClipperLib.Clipper.TopX = function(edge, currentY) {
      if (currentY == edge.Top.Y)
        return edge.Top.X;
      return edge.Bot.X + ClipperLib.Clipper.Round(edge.Dx * (currentY - edge.Bot.Y));
    };
    ClipperLib.Clipper.prototype.IntersectPoint = function(edge1, edge2, ip) {
      ip.X = 0;
      ip.Y = 0;
      var b1, b2;
      if (ClipperLib.ClipperBase.SlopesEqual(edge1, edge2, this.m_UseFullRange) || edge1.Dx == edge2.Dx) {
        if (edge2.Bot.Y > edge1.Bot.Y) {
          ip.X = edge2.Bot.X;
          ip.Y = edge2.Bot.Y;
        } else {
          ip.X = edge1.Bot.X;
          ip.Y = edge1.Bot.Y;
        }
        return false;
      } else if (edge1.Delta.X === 0) {
        ip.X = edge1.Bot.X;
        if (ClipperLib.ClipperBase.IsHorizontal(edge2)) {
          ip.Y = edge2.Bot.Y;
        } else {
          b2 = edge2.Bot.Y - edge2.Bot.X / edge2.Dx;
          ip.Y = ClipperLib.Clipper.Round(ip.X / edge2.Dx + b2);
        }
      } else if (edge2.Delta.X === 0) {
        ip.X = edge2.Bot.X;
        if (ClipperLib.ClipperBase.IsHorizontal(edge1)) {
          ip.Y = edge1.Bot.Y;
        } else {
          b1 = edge1.Bot.Y - edge1.Bot.X / edge1.Dx;
          ip.Y = ClipperLib.Clipper.Round(ip.X / edge1.Dx + b1);
        }
      } else {
        b1 = edge1.Bot.X - edge1.Bot.Y * edge1.Dx;
        b2 = edge2.Bot.X - edge2.Bot.Y * edge2.Dx;
        var q = (b2 - b1) / (edge1.Dx - edge2.Dx);
        ip.Y = ClipperLib.Clipper.Round(q);
        if (Math.abs(edge1.Dx) < Math.abs(edge2.Dx))
          ip.X = ClipperLib.Clipper.Round(edge1.Dx * q + b1);
        else
          ip.X = ClipperLib.Clipper.Round(edge2.Dx * q + b2);
      }
      if (ip.Y < edge1.Top.Y || ip.Y < edge2.Top.Y) {
        if (edge1.Top.Y > edge2.Top.Y) {
          ip.Y = edge1.Top.Y;
          ip.X = ClipperLib.Clipper.TopX(edge2, edge1.Top.Y);
          return ip.X < edge1.Top.X;
        } else
          ip.Y = edge2.Top.Y;
        if (Math.abs(edge1.Dx) < Math.abs(edge2.Dx))
          ip.X = ClipperLib.Clipper.TopX(edge1, ip.Y);
        else
          ip.X = ClipperLib.Clipper.TopX(edge2, ip.Y);
      }
      return true;
    };
    ClipperLib.Clipper.prototype.ProcessEdgesAtTopOfScanbeam = function(topY) {
      var e = this.m_ActiveEdges;
      while (e !== null) {
        var IsMaximaEdge = this.IsMaxima(e, topY);
        if (IsMaximaEdge) {
          var eMaxPair = this.GetMaximaPair(e);
          IsMaximaEdge = eMaxPair === null || !ClipperLib.ClipperBase.IsHorizontal(eMaxPair);
        }
        if (IsMaximaEdge) {
          var ePrev = e.PrevInAEL;
          this.DoMaxima(e);
          if (ePrev === null)
            e = this.m_ActiveEdges;
          else
            e = ePrev.NextInAEL;
        } else {
          if (this.IsIntermediate(e, topY) && ClipperLib.ClipperBase.IsHorizontal(e.NextInLML)) {
            e = this.UpdateEdgeIntoAEL(e);
            if (e.OutIdx >= 0)
              this.AddOutPt(e, e.Bot);
            this.AddEdgeToSEL(e);
          } else {
            e.Curr.X = ClipperLib.Clipper.TopX(e, topY);
            e.Curr.Y = topY;
          }
          if (this.StrictlySimple) {
            var ePrev = e.PrevInAEL;
            if (e.OutIdx >= 0 && e.WindDelta !== 0 && ePrev !== null && ePrev.OutIdx >= 0 && ePrev.Curr.X == e.Curr.X && ePrev.WindDelta !== 0) {
              var op = this.AddOutPt(ePrev, e.Curr);
              var op2 = this.AddOutPt(e, e.Curr);
              this.AddJoin(op, op2, e.Curr);
            }
          }
          e = e.NextInAEL;
        }
      }
      this.ProcessHorizontals(true);
      e = this.m_ActiveEdges;
      while (e !== null) {
        if (this.IsIntermediate(e, topY)) {
          var op = null;
          if (e.OutIdx >= 0)
            op = this.AddOutPt(e, e.Top);
          e = this.UpdateEdgeIntoAEL(e);
          var ePrev = e.PrevInAEL;
          var eNext = e.NextInAEL;
          if (ePrev !== null && ePrev.Curr.X == e.Bot.X && ePrev.Curr.Y == e.Bot.Y && op !== null && ePrev.OutIdx >= 0 && ePrev.Curr.Y > ePrev.Top.Y && ClipperLib.ClipperBase.SlopesEqual(e, ePrev, this.m_UseFullRange) && e.WindDelta !== 0 && ePrev.WindDelta !== 0) {
            var op2 = this.AddOutPt(ePrev, e.Bot);
            this.AddJoin(op, op2, e.Top);
          } else if (eNext !== null && eNext.Curr.X == e.Bot.X && eNext.Curr.Y == e.Bot.Y && op !== null && eNext.OutIdx >= 0 && eNext.Curr.Y > eNext.Top.Y && ClipperLib.ClipperBase.SlopesEqual(e, eNext, this.m_UseFullRange) && e.WindDelta !== 0 && eNext.WindDelta !== 0) {
            var op2 = this.AddOutPt(eNext, e.Bot);
            this.AddJoin(op, op2, e.Top);
          }
        }
        e = e.NextInAEL;
      }
    };
    ClipperLib.Clipper.prototype.DoMaxima = function(e) {
      var eMaxPair = this.GetMaximaPair(e);
      if (eMaxPair === null) {
        if (e.OutIdx >= 0)
          this.AddOutPt(e, e.Top);
        this.DeleteFromAEL(e);
        return;
      }
      var eNext = e.NextInAEL;
      var use_lines2 = true;
      while (eNext !== null && eNext != eMaxPair) {
        this.IntersectEdges(e, eNext, e.Top, true);
        this.SwapPositionsInAEL(e, eNext);
        eNext = e.NextInAEL;
      }
      if (e.OutIdx == -1 && eMaxPair.OutIdx == -1) {
        this.DeleteFromAEL(e);
        this.DeleteFromAEL(eMaxPair);
      } else if (e.OutIdx >= 0 && eMaxPair.OutIdx >= 0) {
        this.IntersectEdges(e, eMaxPair, e.Top, false);
      } else if (use_lines2 && e.WindDelta === 0) {
        if (e.OutIdx >= 0) {
          this.AddOutPt(e, e.Top);
          e.OutIdx = -1;
        }
        this.DeleteFromAEL(e);
        if (eMaxPair.OutIdx >= 0) {
          this.AddOutPt(eMaxPair, e.Top);
          eMaxPair.OutIdx = -1;
        }
        this.DeleteFromAEL(eMaxPair);
      } else
        ClipperLib.Error("DoMaxima error");
    };
    ClipperLib.Clipper.ReversePaths = function(polys) {
      for (var i = 0, len = polys.length; i < len; i++)
        polys[i].reverse();
    };
    ClipperLib.Clipper.Orientation = function(poly) {
      return ClipperLib.Clipper.Area(poly) >= 0;
    };
    ClipperLib.Clipper.prototype.PointCount = function(pts) {
      if (pts === null)
        return 0;
      var result = 0;
      var p = pts;
      do {
        result++;
        p = p.Next;
      } while (p != pts);
      return result;
    };
    ClipperLib.Clipper.prototype.BuildResult = function(polyg) {
      ClipperLib.Clear(polyg);
      for (var i = 0, ilen = this.m_PolyOuts.length; i < ilen; i++) {
        var outRec = this.m_PolyOuts[i];
        if (outRec.Pts === null)
          continue;
        var p = outRec.Pts.Prev;
        var cnt = this.PointCount(p);
        if (cnt < 2)
          continue;
        var pg = new Array(cnt);
        for (var j = 0; j < cnt; j++) {
          pg[j] = p.Pt;
          p = p.Prev;
        }
        polyg.push(pg);
      }
    };
    ClipperLib.Clipper.prototype.BuildResult2 = function(polytree) {
      polytree.Clear();
      for (var i = 0, ilen = this.m_PolyOuts.length; i < ilen; i++) {
        var outRec = this.m_PolyOuts[i];
        var cnt = this.PointCount(outRec.Pts);
        if (outRec.IsOpen && cnt < 2 || !outRec.IsOpen && cnt < 3)
          continue;
        this.FixHoleLinkage(outRec);
        var pn = new ClipperLib.PolyNode();
        polytree.m_AllPolys.push(pn);
        outRec.PolyNode = pn;
        pn.m_polygon.length = cnt;
        var op = outRec.Pts.Prev;
        for (var j = 0; j < cnt; j++) {
          pn.m_polygon[j] = op.Pt;
          op = op.Prev;
        }
      }
      for (var i = 0, ilen = this.m_PolyOuts.length; i < ilen; i++) {
        var outRec = this.m_PolyOuts[i];
        if (outRec.PolyNode === null)
          continue;
        else if (outRec.IsOpen) {
          outRec.PolyNode.IsOpen = true;
          polytree.AddChild(outRec.PolyNode);
        } else if (outRec.FirstLeft !== null && outRec.FirstLeft.PolyNode != null)
          outRec.FirstLeft.PolyNode.AddChild(outRec.PolyNode);
        else
          polytree.AddChild(outRec.PolyNode);
      }
    };
    ClipperLib.Clipper.prototype.FixupOutPolygon = function(outRec) {
      var lastOK = null;
      outRec.BottomPt = null;
      var pp = outRec.Pts;
      for (; ; ) {
        if (pp.Prev == pp || pp.Prev == pp.Next) {
          this.DisposeOutPts(pp);
          outRec.Pts = null;
          return;
        }
        if (ClipperLib.IntPoint.op_Equality(pp.Pt, pp.Next.Pt) || ClipperLib.IntPoint.op_Equality(pp.Pt, pp.Prev.Pt) || ClipperLib.ClipperBase.SlopesEqual(pp.Prev.Pt, pp.Pt, pp.Next.Pt, this.m_UseFullRange) && (!this.PreserveCollinear || !this.Pt2IsBetweenPt1AndPt3(pp.Prev.Pt, pp.Pt, pp.Next.Pt))) {
          lastOK = null;
          var tmp = pp;
          pp.Prev.Next = pp.Next;
          pp.Next.Prev = pp.Prev;
          pp = pp.Prev;
          tmp = null;
        } else if (pp == lastOK)
          break;
        else {
          if (lastOK === null)
            lastOK = pp;
          pp = pp.Next;
        }
      }
      outRec.Pts = pp;
    };
    ClipperLib.Clipper.prototype.DupOutPt = function(outPt, InsertAfter) {
      var result = new ClipperLib.OutPt();
      result.Pt.X = outPt.Pt.X;
      result.Pt.Y = outPt.Pt.Y;
      result.Idx = outPt.Idx;
      if (InsertAfter) {
        result.Next = outPt.Next;
        result.Prev = outPt;
        outPt.Next.Prev = result;
        outPt.Next = result;
      } else {
        result.Prev = outPt.Prev;
        result.Next = outPt;
        outPt.Prev.Next = result;
        outPt.Prev = result;
      }
      return result;
    };
    ClipperLib.Clipper.prototype.GetOverlap = function(a1, a2, b1, b2, $val) {
      if (a1 < a2) {
        if (b1 < b2) {
          $val.Left = Math.max(a1, b1);
          $val.Right = Math.min(a2, b2);
        } else {
          $val.Left = Math.max(a1, b2);
          $val.Right = Math.min(a2, b1);
        }
      } else {
        if (b1 < b2) {
          $val.Left = Math.max(a2, b1);
          $val.Right = Math.min(a1, b2);
        } else {
          $val.Left = Math.max(a2, b2);
          $val.Right = Math.min(a1, b1);
        }
      }
      return $val.Left < $val.Right;
    };
    ClipperLib.Clipper.prototype.JoinHorz = function(op1, op1b, op2, op2b, Pt, DiscardLeft) {
      var Dir1 = op1.Pt.X > op1b.Pt.X ? ClipperLib.Direction.dRightToLeft : ClipperLib.Direction.dLeftToRight;
      var Dir2 = op2.Pt.X > op2b.Pt.X ? ClipperLib.Direction.dRightToLeft : ClipperLib.Direction.dLeftToRight;
      if (Dir1 == Dir2)
        return false;
      if (Dir1 == ClipperLib.Direction.dLeftToRight) {
        while (op1.Next.Pt.X <= Pt.X && op1.Next.Pt.X >= op1.Pt.X && op1.Next.Pt.Y == Pt.Y)
          op1 = op1.Next;
        if (DiscardLeft && op1.Pt.X != Pt.X)
          op1 = op1.Next;
        op1b = this.DupOutPt(op1, !DiscardLeft);
        if (ClipperLib.IntPoint.op_Inequality(op1b.Pt, Pt)) {
          op1 = op1b;
          op1.Pt.X = Pt.X;
          op1.Pt.Y = Pt.Y;
          op1b = this.DupOutPt(op1, !DiscardLeft);
        }
      } else {
        while (op1.Next.Pt.X >= Pt.X && op1.Next.Pt.X <= op1.Pt.X && op1.Next.Pt.Y == Pt.Y)
          op1 = op1.Next;
        if (!DiscardLeft && op1.Pt.X != Pt.X)
          op1 = op1.Next;
        op1b = this.DupOutPt(op1, DiscardLeft);
        if (ClipperLib.IntPoint.op_Inequality(op1b.Pt, Pt)) {
          op1 = op1b;
          op1.Pt.X = Pt.X;
          op1.Pt.Y = Pt.Y;
          op1b = this.DupOutPt(op1, DiscardLeft);
        }
      }
      if (Dir2 == ClipperLib.Direction.dLeftToRight) {
        while (op2.Next.Pt.X <= Pt.X && op2.Next.Pt.X >= op2.Pt.X && op2.Next.Pt.Y == Pt.Y)
          op2 = op2.Next;
        if (DiscardLeft && op2.Pt.X != Pt.X)
          op2 = op2.Next;
        op2b = this.DupOutPt(op2, !DiscardLeft);
        if (ClipperLib.IntPoint.op_Inequality(op2b.Pt, Pt)) {
          op2 = op2b;
          op2.Pt.X = Pt.X;
          op2.Pt.Y = Pt.Y;
          op2b = this.DupOutPt(op2, !DiscardLeft);
        }
      } else {
        while (op2.Next.Pt.X >= Pt.X && op2.Next.Pt.X <= op2.Pt.X && op2.Next.Pt.Y == Pt.Y)
          op2 = op2.Next;
        if (!DiscardLeft && op2.Pt.X != Pt.X)
          op2 = op2.Next;
        op2b = this.DupOutPt(op2, DiscardLeft);
        if (ClipperLib.IntPoint.op_Inequality(op2b.Pt, Pt)) {
          op2 = op2b;
          op2.Pt.X = Pt.X;
          op2.Pt.Y = Pt.Y;
          op2b = this.DupOutPt(op2, DiscardLeft);
        }
      }
      if (Dir1 == ClipperLib.Direction.dLeftToRight == DiscardLeft) {
        op1.Prev = op2;
        op2.Next = op1;
        op1b.Next = op2b;
        op2b.Prev = op1b;
      } else {
        op1.Next = op2;
        op2.Prev = op1;
        op1b.Prev = op2b;
        op2b.Next = op1b;
      }
      return true;
    };
    ClipperLib.Clipper.prototype.JoinPoints = function(j, outRec1, outRec2) {
      var op1 = j.OutPt1, op1b = new ClipperLib.OutPt();
      var op2 = j.OutPt2, op2b = new ClipperLib.OutPt();
      var isHorizontal = j.OutPt1.Pt.Y == j.OffPt.Y;
      if (isHorizontal && ClipperLib.IntPoint.op_Equality(j.OffPt, j.OutPt1.Pt) && ClipperLib.IntPoint.op_Equality(j.OffPt, j.OutPt2.Pt)) {
        op1b = j.OutPt1.Next;
        while (op1b != op1 && ClipperLib.IntPoint.op_Equality(op1b.Pt, j.OffPt))
          op1b = op1b.Next;
        var reverse1 = op1b.Pt.Y > j.OffPt.Y;
        op2b = j.OutPt2.Next;
        while (op2b != op2 && ClipperLib.IntPoint.op_Equality(op2b.Pt, j.OffPt))
          op2b = op2b.Next;
        var reverse2 = op2b.Pt.Y > j.OffPt.Y;
        if (reverse1 == reverse2)
          return false;
        if (reverse1) {
          op1b = this.DupOutPt(op1, false);
          op2b = this.DupOutPt(op2, true);
          op1.Prev = op2;
          op2.Next = op1;
          op1b.Next = op2b;
          op2b.Prev = op1b;
          j.OutPt1 = op1;
          j.OutPt2 = op1b;
          return true;
        } else {
          op1b = this.DupOutPt(op1, true);
          op2b = this.DupOutPt(op2, false);
          op1.Next = op2;
          op2.Prev = op1;
          op1b.Prev = op2b;
          op2b.Next = op1b;
          j.OutPt1 = op1;
          j.OutPt2 = op1b;
          return true;
        }
      } else if (isHorizontal) {
        op1b = op1;
        while (op1.Prev.Pt.Y == op1.Pt.Y && op1.Prev != op1b && op1.Prev != op2)
          op1 = op1.Prev;
        while (op1b.Next.Pt.Y == op1b.Pt.Y && op1b.Next != op1 && op1b.Next != op2)
          op1b = op1b.Next;
        if (op1b.Next == op1 || op1b.Next == op2)
          return false;
        op2b = op2;
        while (op2.Prev.Pt.Y == op2.Pt.Y && op2.Prev != op2b && op2.Prev != op1b)
          op2 = op2.Prev;
        while (op2b.Next.Pt.Y == op2b.Pt.Y && op2b.Next != op2 && op2b.Next != op1)
          op2b = op2b.Next;
        if (op2b.Next == op2 || op2b.Next == op1)
          return false;
        var $val = { Left: null, Right: null };
        if (!this.GetOverlap(op1.Pt.X, op1b.Pt.X, op2.Pt.X, op2b.Pt.X, $val))
          return false;
        var Left = $val.Left;
        var Right = $val.Right;
        var Pt = new ClipperLib.IntPoint();
        var DiscardLeftSide;
        if (op1.Pt.X >= Left && op1.Pt.X <= Right) {
          Pt.X = op1.Pt.X;
          Pt.Y = op1.Pt.Y;
          DiscardLeftSide = op1.Pt.X > op1b.Pt.X;
        } else if (op2.Pt.X >= Left && op2.Pt.X <= Right) {
          Pt.X = op2.Pt.X;
          Pt.Y = op2.Pt.Y;
          DiscardLeftSide = op2.Pt.X > op2b.Pt.X;
        } else if (op1b.Pt.X >= Left && op1b.Pt.X <= Right) {
          Pt.X = op1b.Pt.X;
          Pt.Y = op1b.Pt.Y;
          DiscardLeftSide = op1b.Pt.X > op1.Pt.X;
        } else {
          Pt.X = op2b.Pt.X;
          Pt.Y = op2b.Pt.Y;
          DiscardLeftSide = op2b.Pt.X > op2.Pt.X;
        }
        j.OutPt1 = op1;
        j.OutPt2 = op2;
        return this.JoinHorz(op1, op1b, op2, op2b, Pt, DiscardLeftSide);
      } else {
        op1b = op1.Next;
        while (ClipperLib.IntPoint.op_Equality(op1b.Pt, op1.Pt) && op1b != op1)
          op1b = op1b.Next;
        var Reverse1 = op1b.Pt.Y > op1.Pt.Y || !ClipperLib.ClipperBase.SlopesEqual(op1.Pt, op1b.Pt, j.OffPt, this.m_UseFullRange);
        if (Reverse1) {
          op1b = op1.Prev;
          while (ClipperLib.IntPoint.op_Equality(op1b.Pt, op1.Pt) && op1b != op1)
            op1b = op1b.Prev;
          if (op1b.Pt.Y > op1.Pt.Y || !ClipperLib.ClipperBase.SlopesEqual(op1.Pt, op1b.Pt, j.OffPt, this.m_UseFullRange))
            return false;
        }
        op2b = op2.Next;
        while (ClipperLib.IntPoint.op_Equality(op2b.Pt, op2.Pt) && op2b != op2)
          op2b = op2b.Next;
        var Reverse2 = op2b.Pt.Y > op2.Pt.Y || !ClipperLib.ClipperBase.SlopesEqual(op2.Pt, op2b.Pt, j.OffPt, this.m_UseFullRange);
        if (Reverse2) {
          op2b = op2.Prev;
          while (ClipperLib.IntPoint.op_Equality(op2b.Pt, op2.Pt) && op2b != op2)
            op2b = op2b.Prev;
          if (op2b.Pt.Y > op2.Pt.Y || !ClipperLib.ClipperBase.SlopesEqual(op2.Pt, op2b.Pt, j.OffPt, this.m_UseFullRange))
            return false;
        }
        if (op1b == op1 || op2b == op2 || op1b == op2b || outRec1 == outRec2 && Reverse1 == Reverse2)
          return false;
        if (Reverse1) {
          op1b = this.DupOutPt(op1, false);
          op2b = this.DupOutPt(op2, true);
          op1.Prev = op2;
          op2.Next = op1;
          op1b.Next = op2b;
          op2b.Prev = op1b;
          j.OutPt1 = op1;
          j.OutPt2 = op1b;
          return true;
        } else {
          op1b = this.DupOutPt(op1, true);
          op2b = this.DupOutPt(op2, false);
          op1.Next = op2;
          op2.Prev = op1;
          op1b.Prev = op2b;
          op2b.Next = op1b;
          j.OutPt1 = op1;
          j.OutPt2 = op1b;
          return true;
        }
      }
    };
    ClipperLib.Clipper.GetBounds = function(paths) {
      var i = 0, cnt = paths.length;
      while (i < cnt && paths[i].length == 0) i++;
      if (i == cnt) return new ClipperLib.IntRect(0, 0, 0, 0);
      var result = new ClipperLib.IntRect();
      result.left = paths[i][0].X;
      result.right = result.left;
      result.top = paths[i][0].Y;
      result.bottom = result.top;
      for (; i < cnt; i++)
        for (var j = 0, jlen = paths[i].length; j < jlen; j++) {
          if (paths[i][j].X < result.left) result.left = paths[i][j].X;
          else if (paths[i][j].X > result.right) result.right = paths[i][j].X;
          if (paths[i][j].Y < result.top) result.top = paths[i][j].Y;
          else if (paths[i][j].Y > result.bottom) result.bottom = paths[i][j].Y;
        }
      return result;
    };
    ClipperLib.Clipper.prototype.GetBounds2 = function(ops) {
      var opStart = ops;
      var result = new ClipperLib.IntRect();
      result.left = ops.Pt.X;
      result.right = ops.Pt.X;
      result.top = ops.Pt.Y;
      result.bottom = ops.Pt.Y;
      ops = ops.Next;
      while (ops != opStart) {
        if (ops.Pt.X < result.left)
          result.left = ops.Pt.X;
        if (ops.Pt.X > result.right)
          result.right = ops.Pt.X;
        if (ops.Pt.Y < result.top)
          result.top = ops.Pt.Y;
        if (ops.Pt.Y > result.bottom)
          result.bottom = ops.Pt.Y;
        ops = ops.Next;
      }
      return result;
    };
    ClipperLib.Clipper.PointInPolygon = function(pt, path2) {
      var result = 0, cnt = path2.length;
      if (cnt < 3)
        return 0;
      var ip = path2[0];
      for (var i = 1; i <= cnt; ++i) {
        var ipNext = i == cnt ? path2[0] : path2[i];
        if (ipNext.Y == pt.Y) {
          if (ipNext.X == pt.X || ip.Y == pt.Y && ipNext.X > pt.X == ip.X < pt.X)
            return -1;
        }
        if (ip.Y < pt.Y != ipNext.Y < pt.Y) {
          if (ip.X >= pt.X) {
            if (ipNext.X > pt.X)
              result = 1 - result;
            else {
              var d = (ip.X - pt.X) * (ipNext.Y - pt.Y) - (ipNext.X - pt.X) * (ip.Y - pt.Y);
              if (d == 0)
                return -1;
              else if (d > 0 == ipNext.Y > ip.Y)
                result = 1 - result;
            }
          } else {
            if (ipNext.X > pt.X) {
              var d = (ip.X - pt.X) * (ipNext.Y - pt.Y) - (ipNext.X - pt.X) * (ip.Y - pt.Y);
              if (d == 0)
                return -1;
              else if (d > 0 == ipNext.Y > ip.Y)
                result = 1 - result;
            }
          }
        }
        ip = ipNext;
      }
      return result;
    };
    ClipperLib.Clipper.prototype.PointInPolygon = function(pt, op) {
      var result = 0;
      var startOp = op;
      for (; ; ) {
        var poly0x = op.Pt.X, poly0y = op.Pt.Y;
        var poly1x = op.Next.Pt.X, poly1y = op.Next.Pt.Y;
        if (poly1y == pt.Y) {
          if (poly1x == pt.X || poly0y == pt.Y && poly1x > pt.X == poly0x < pt.X)
            return -1;
        }
        if (poly0y < pt.Y != poly1y < pt.Y) {
          if (poly0x >= pt.X) {
            if (poly1x > pt.X)
              result = 1 - result;
            else {
              var d = (poly0x - pt.X) * (poly1y - pt.Y) - (poly1x - pt.X) * (poly0y - pt.Y);
              if (d == 0)
                return -1;
              if (d > 0 == poly1y > poly0y)
                result = 1 - result;
            }
          } else {
            if (poly1x > pt.X) {
              var d = (poly0x - pt.X) * (poly1y - pt.Y) - (poly1x - pt.X) * (poly0y - pt.Y);
              if (d == 0)
                return -1;
              if (d > 0 == poly1y > poly0y)
                result = 1 - result;
            }
          }
        }
        op = op.Next;
        if (startOp == op)
          break;
      }
      return result;
    };
    ClipperLib.Clipper.prototype.Poly2ContainsPoly1 = function(outPt1, outPt2) {
      var op = outPt1;
      do {
        var res = this.PointInPolygon(op.Pt, outPt2);
        if (res >= 0)
          return res != 0;
        op = op.Next;
      } while (op != outPt1);
      return true;
    };
    ClipperLib.Clipper.prototype.FixupFirstLefts1 = function(OldOutRec, NewOutRec) {
      for (var i = 0, ilen = this.m_PolyOuts.length; i < ilen; i++) {
        var outRec = this.m_PolyOuts[i];
        if (outRec.Pts !== null && outRec.FirstLeft == OldOutRec) {
          if (this.Poly2ContainsPoly1(outRec.Pts, NewOutRec.Pts))
            outRec.FirstLeft = NewOutRec;
        }
      }
    };
    ClipperLib.Clipper.prototype.FixupFirstLefts2 = function(OldOutRec, NewOutRec) {
      for (var $i2 = 0, $t2 = this.m_PolyOuts, $l2 = $t2.length, outRec = $t2[$i2]; $i2 < $l2; $i2++, outRec = $t2[$i2])
        if (outRec.FirstLeft == OldOutRec)
          outRec.FirstLeft = NewOutRec;
    };
    ClipperLib.Clipper.ParseFirstLeft = function(FirstLeft) {
      while (FirstLeft != null && FirstLeft.Pts == null)
        FirstLeft = FirstLeft.FirstLeft;
      return FirstLeft;
    };
    ClipperLib.Clipper.prototype.JoinCommonEdges = function() {
      for (var i = 0, ilen = this.m_Joins.length; i < ilen; i++) {
        var join = this.m_Joins[i];
        var outRec1 = this.GetOutRec(join.OutPt1.Idx);
        var outRec2 = this.GetOutRec(join.OutPt2.Idx);
        if (outRec1.Pts == null || outRec2.Pts == null)
          continue;
        var holeStateRec;
        if (outRec1 == outRec2)
          holeStateRec = outRec1;
        else if (this.Param1RightOfParam2(outRec1, outRec2))
          holeStateRec = outRec2;
        else if (this.Param1RightOfParam2(outRec2, outRec1))
          holeStateRec = outRec1;
        else
          holeStateRec = this.GetLowermostRec(outRec1, outRec2);
        if (!this.JoinPoints(join, outRec1, outRec2)) continue;
        if (outRec1 == outRec2) {
          outRec1.Pts = join.OutPt1;
          outRec1.BottomPt = null;
          outRec2 = this.CreateOutRec();
          outRec2.Pts = join.OutPt2;
          this.UpdateOutPtIdxs(outRec2);
          if (this.m_UsingPolyTree)
            for (var j = 0, jlen = this.m_PolyOuts.length; j < jlen - 1; j++) {
              var oRec = this.m_PolyOuts[j];
              if (oRec.Pts == null || ClipperLib.Clipper.ParseFirstLeft(oRec.FirstLeft) != outRec1 || oRec.IsHole == outRec1.IsHole)
                continue;
              if (this.Poly2ContainsPoly1(oRec.Pts, join.OutPt2))
                oRec.FirstLeft = outRec2;
            }
          if (this.Poly2ContainsPoly1(outRec2.Pts, outRec1.Pts)) {
            outRec2.IsHole = !outRec1.IsHole;
            outRec2.FirstLeft = outRec1;
            if (this.m_UsingPolyTree)
              this.FixupFirstLefts2(outRec2, outRec1);
            if ((outRec2.IsHole ^ this.ReverseSolution) == this.Area(outRec2) > 0)
              this.ReversePolyPtLinks(outRec2.Pts);
          } else if (this.Poly2ContainsPoly1(outRec1.Pts, outRec2.Pts)) {
            outRec2.IsHole = outRec1.IsHole;
            outRec1.IsHole = !outRec2.IsHole;
            outRec2.FirstLeft = outRec1.FirstLeft;
            outRec1.FirstLeft = outRec2;
            if (this.m_UsingPolyTree)
              this.FixupFirstLefts2(outRec1, outRec2);
            if ((outRec1.IsHole ^ this.ReverseSolution) == this.Area(outRec1) > 0)
              this.ReversePolyPtLinks(outRec1.Pts);
          } else {
            outRec2.IsHole = outRec1.IsHole;
            outRec2.FirstLeft = outRec1.FirstLeft;
            if (this.m_UsingPolyTree)
              this.FixupFirstLefts1(outRec1, outRec2);
          }
        } else {
          outRec2.Pts = null;
          outRec2.BottomPt = null;
          outRec2.Idx = outRec1.Idx;
          outRec1.IsHole = holeStateRec.IsHole;
          if (holeStateRec == outRec2)
            outRec1.FirstLeft = outRec2.FirstLeft;
          outRec2.FirstLeft = outRec1;
          if (this.m_UsingPolyTree)
            this.FixupFirstLefts2(outRec2, outRec1);
        }
      }
    };
    ClipperLib.Clipper.prototype.UpdateOutPtIdxs = function(outrec) {
      var op = outrec.Pts;
      do {
        op.Idx = outrec.Idx;
        op = op.Prev;
      } while (op != outrec.Pts);
    };
    ClipperLib.Clipper.prototype.DoSimplePolygons = function() {
      var i = 0;
      while (i < this.m_PolyOuts.length) {
        var outrec = this.m_PolyOuts[i++];
        var op = outrec.Pts;
        if (op === null)
          continue;
        do {
          var op2 = op.Next;
          while (op2 != outrec.Pts) {
            if (ClipperLib.IntPoint.op_Equality(op.Pt, op2.Pt) && op2.Next != op && op2.Prev != op) {
              var op3 = op.Prev;
              var op4 = op2.Prev;
              op.Prev = op4;
              op4.Next = op;
              op2.Prev = op3;
              op3.Next = op2;
              outrec.Pts = op;
              var outrec2 = this.CreateOutRec();
              outrec2.Pts = op2;
              this.UpdateOutPtIdxs(outrec2);
              if (this.Poly2ContainsPoly1(outrec2.Pts, outrec.Pts)) {
                outrec2.IsHole = !outrec.IsHole;
                outrec2.FirstLeft = outrec;
              } else if (this.Poly2ContainsPoly1(outrec.Pts, outrec2.Pts)) {
                outrec2.IsHole = outrec.IsHole;
                outrec.IsHole = !outrec2.IsHole;
                outrec2.FirstLeft = outrec.FirstLeft;
                outrec.FirstLeft = outrec2;
              } else {
                outrec2.IsHole = outrec.IsHole;
                outrec2.FirstLeft = outrec.FirstLeft;
              }
              op2 = op;
            }
            op2 = op2.Next;
          }
          op = op.Next;
        } while (op != outrec.Pts);
      }
    };
    ClipperLib.Clipper.Area = function(poly) {
      var cnt = poly.length;
      if (cnt < 3)
        return 0;
      var a = 0;
      for (var i = 0, j = cnt - 1; i < cnt; ++i) {
        a += (poly[j].X + poly[i].X) * (poly[j].Y - poly[i].Y);
        j = i;
      }
      return -a * 0.5;
    };
    ClipperLib.Clipper.prototype.Area = function(outRec) {
      var op = outRec.Pts;
      if (op == null)
        return 0;
      var a = 0;
      do {
        a = a + (op.Prev.Pt.X + op.Pt.X) * (op.Prev.Pt.Y - op.Pt.Y);
        op = op.Next;
      } while (op != outRec.Pts);
      return a * 0.5;
    };
    if (use_deprecated) {
      ClipperLib.Clipper.OffsetPaths = function(polys, delta, jointype, endtype, MiterLimit) {
        var result = new ClipperLib.Paths();
        var co = new ClipperLib.ClipperOffset(MiterLimit, MiterLimit);
        co.AddPaths(polys, jointype, endtype);
        co.Execute(result, delta);
        return result;
      };
    }
    ClipperLib.Clipper.SimplifyPolygon = function(poly, fillType) {
      var result = new Array();
      var c = new ClipperLib.Clipper(0);
      c.StrictlySimple = true;
      c.AddPath(poly, ClipperLib.PolyType.ptSubject, true);
      c.Execute(ClipperLib.ClipType.ctUnion, result, fillType, fillType);
      return result;
    };
    ClipperLib.Clipper.SimplifyPolygons = function(polys, fillType) {
      if (typeof fillType == "undefined") fillType = ClipperLib.PolyFillType.pftEvenOdd;
      var result = new Array();
      var c = new ClipperLib.Clipper(0);
      c.StrictlySimple = true;
      c.AddPaths(polys, ClipperLib.PolyType.ptSubject, true);
      c.Execute(ClipperLib.ClipType.ctUnion, result, fillType, fillType);
      return result;
    };
    ClipperLib.Clipper.DistanceSqrd = function(pt1, pt2) {
      var dx = pt1.X - pt2.X;
      var dy = pt1.Y - pt2.Y;
      return dx * dx + dy * dy;
    };
    ClipperLib.Clipper.DistanceFromLineSqrd = function(pt, ln1, ln2) {
      var A = ln1.Y - ln2.Y;
      var B = ln2.X - ln1.X;
      var C = A * ln1.X + B * ln1.Y;
      C = A * pt.X + B * pt.Y - C;
      return C * C / (A * A + B * B);
    };
    ClipperLib.Clipper.SlopesNearCollinear = function(pt1, pt2, pt3, distSqrd) {
      return ClipperLib.Clipper.DistanceFromLineSqrd(pt2, pt1, pt3) < distSqrd;
    };
    ClipperLib.Clipper.PointsAreClose = function(pt1, pt2, distSqrd) {
      var dx = pt1.X - pt2.X;
      var dy = pt1.Y - pt2.Y;
      return dx * dx + dy * dy <= distSqrd;
    };
    ClipperLib.Clipper.ExcludeOp = function(op) {
      var result = op.Prev;
      result.Next = op.Next;
      op.Next.Prev = result;
      result.Idx = 0;
      return result;
    };
    ClipperLib.Clipper.CleanPolygon = function(path2, distance) {
      if (typeof distance == "undefined") distance = 1.415;
      var cnt = path2.length;
      if (cnt == 0)
        return new Array();
      var outPts = new Array(cnt);
      for (var i = 0; i < cnt; ++i)
        outPts[i] = new ClipperLib.OutPt();
      for (var i = 0; i < cnt; ++i) {
        outPts[i].Pt = path2[i];
        outPts[i].Next = outPts[(i + 1) % cnt];
        outPts[i].Next.Prev = outPts[i];
        outPts[i].Idx = 0;
      }
      var distSqrd = distance * distance;
      var op = outPts[0];
      while (op.Idx == 0 && op.Next != op.Prev) {
        if (ClipperLib.Clipper.PointsAreClose(op.Pt, op.Prev.Pt, distSqrd)) {
          op = ClipperLib.Clipper.ExcludeOp(op);
          cnt--;
        } else if (ClipperLib.Clipper.PointsAreClose(op.Prev.Pt, op.Next.Pt, distSqrd)) {
          ClipperLib.Clipper.ExcludeOp(op.Next);
          op = ClipperLib.Clipper.ExcludeOp(op);
          cnt -= 2;
        } else if (ClipperLib.Clipper.SlopesNearCollinear(op.Prev.Pt, op.Pt, op.Next.Pt, distSqrd)) {
          op = ClipperLib.Clipper.ExcludeOp(op);
          cnt--;
        } else {
          op.Idx = 1;
          op = op.Next;
        }
      }
      if (cnt < 3)
        cnt = 0;
      var result = new Array(cnt);
      for (var i = 0; i < cnt; ++i) {
        result[i] = new ClipperLib.IntPoint(op.Pt);
        op = op.Next;
      }
      outPts = null;
      return result;
    };
    ClipperLib.Clipper.CleanPolygons = function(polys, distance) {
      var result = new Array(polys.length);
      for (var i = 0, ilen = polys.length; i < ilen; i++)
        result[i] = ClipperLib.Clipper.CleanPolygon(polys[i], distance);
      return result;
    };
    ClipperLib.Clipper.Minkowski = function(pattern, path2, IsSum, IsClosed) {
      var delta = IsClosed ? 1 : 0;
      var polyCnt = pattern.length;
      var pathCnt = path2.length;
      var result = new Array();
      if (IsSum)
        for (var i = 0; i < pathCnt; i++) {
          var p = new Array(polyCnt);
          for (var j = 0, jlen = pattern.length, ip = pattern[j]; j < jlen; j++, ip = pattern[j])
            p[j] = new ClipperLib.IntPoint(path2[i].X + ip.X, path2[i].Y + ip.Y);
          result.push(p);
        }
      else
        for (var i = 0; i < pathCnt; i++) {
          var p = new Array(polyCnt);
          for (var j = 0, jlen = pattern.length, ip = pattern[j]; j < jlen; j++, ip = pattern[j])
            p[j] = new ClipperLib.IntPoint(path2[i].X - ip.X, path2[i].Y - ip.Y);
          result.push(p);
        }
      var quads = new Array();
      for (var i = 0; i < pathCnt - 1 + delta; i++)
        for (var j = 0; j < polyCnt; j++) {
          var quad = new Array();
          quad.push(result[i % pathCnt][j % polyCnt]);
          quad.push(result[(i + 1) % pathCnt][j % polyCnt]);
          quad.push(result[(i + 1) % pathCnt][(j + 1) % polyCnt]);
          quad.push(result[i % pathCnt][(j + 1) % polyCnt]);
          if (!ClipperLib.Clipper.Orientation(quad))
            quad.reverse();
          quads.push(quad);
        }
      var c = new ClipperLib.Clipper(0);
      c.AddPaths(quads, ClipperLib.PolyType.ptSubject, true);
      c.Execute(ClipperLib.ClipType.ctUnion, result, ClipperLib.PolyFillType.pftNonZero, ClipperLib.PolyFillType.pftNonZero);
      return result;
    };
    ClipperLib.Clipper.MinkowskiSum = function() {
      var a = arguments, alen = a.length;
      if (alen == 3) {
        var pattern = a[0], path2 = a[1], pathIsClosed = a[2];
        return ClipperLib.Clipper.Minkowski(pattern, path2, true, pathIsClosed);
      } else if (alen == 4) {
        var pattern = a[0], paths = a[1], pathFillType = a[2], pathIsClosed = a[3];
        var c = new ClipperLib.Clipper(), tmp;
        for (var i = 0, ilen = paths.length; i < ilen; ++i) {
          var tmp = ClipperLib.Clipper.Minkowski(pattern, paths[i], true, pathIsClosed);
          c.AddPaths(tmp, ClipperLib.PolyType.ptSubject, true);
        }
        if (pathIsClosed) c.AddPaths(paths, ClipperLib.PolyType.ptClip, true);
        var solution = new ClipperLib.Paths();
        c.Execute(ClipperLib.ClipType.ctUnion, solution, pathFillType, pathFillType);
        return solution;
      }
    };
    ClipperLib.Clipper.MinkowskiDiff = function(pattern, path2, pathIsClosed) {
      return ClipperLib.Clipper.Minkowski(pattern, path2, false, pathIsClosed);
    };
    ClipperLib.Clipper.PolyTreeToPaths = function(polytree) {
      var result = new Array();
      ClipperLib.Clipper.AddPolyNodeToPaths(polytree, ClipperLib.Clipper.NodeType.ntAny, result);
      return result;
    };
    ClipperLib.Clipper.AddPolyNodeToPaths = function(polynode, nt, paths) {
      var match = true;
      switch (nt) {
        case ClipperLib.Clipper.NodeType.ntOpen:
          return;
        case ClipperLib.Clipper.NodeType.ntClosed:
          match = !polynode.IsOpen;
          break;
        default:
          break;
      }
      if (polynode.m_polygon.length > 0 && match)
        paths.push(polynode.m_polygon);
      for (var $i3 = 0, $t3 = polynode.Childs(), $l3 = $t3.length, pn = $t3[$i3]; $i3 < $l3; $i3++, pn = $t3[$i3])
        ClipperLib.Clipper.AddPolyNodeToPaths(pn, nt, paths);
    };
    ClipperLib.Clipper.OpenPathsFromPolyTree = function(polytree) {
      var result = new ClipperLib.Paths();
      for (var i = 0, ilen = polytree.ChildCount(); i < ilen; i++)
        if (polytree.Childs()[i].IsOpen)
          result.push(polytree.Childs()[i].m_polygon);
      return result;
    };
    ClipperLib.Clipper.ClosedPathsFromPolyTree = function(polytree) {
      var result = new ClipperLib.Paths();
      ClipperLib.Clipper.AddPolyNodeToPaths(polytree, ClipperLib.Clipper.NodeType.ntClosed, result);
      return result;
    };
    Inherit(ClipperLib.Clipper, ClipperLib.ClipperBase);
    ClipperLib.Clipper.NodeType = {
      ntAny: 0,
      ntOpen: 1,
      ntClosed: 2
    };
    ClipperLib.ClipperOffset = function(miterLimit, arcTolerance) {
      if (typeof miterLimit == "undefined") miterLimit = 2;
      if (typeof arcTolerance == "undefined") arcTolerance = ClipperLib.ClipperOffset.def_arc_tolerance;
      this.m_destPolys = new ClipperLib.Paths();
      this.m_srcPoly = new ClipperLib.Path();
      this.m_destPoly = new ClipperLib.Path();
      this.m_normals = new Array();
      this.m_delta = 0;
      this.m_sinA = 0;
      this.m_sin = 0;
      this.m_cos = 0;
      this.m_miterLim = 0;
      this.m_StepsPerRad = 0;
      this.m_lowest = new ClipperLib.IntPoint();
      this.m_polyNodes = new ClipperLib.PolyNode();
      this.MiterLimit = miterLimit;
      this.ArcTolerance = arcTolerance;
      this.m_lowest.X = -1;
    };
    ClipperLib.ClipperOffset.two_pi = 6.28318530717959;
    ClipperLib.ClipperOffset.def_arc_tolerance = 0.25;
    ClipperLib.ClipperOffset.prototype.Clear = function() {
      ClipperLib.Clear(this.m_polyNodes.Childs());
      this.m_lowest.X = -1;
    };
    ClipperLib.ClipperOffset.Round = ClipperLib.Clipper.Round;
    ClipperLib.ClipperOffset.prototype.AddPath = function(path2, joinType, endType) {
      var highI = path2.length - 1;
      if (highI < 0)
        return;
      var newNode = new ClipperLib.PolyNode();
      newNode.m_jointype = joinType;
      newNode.m_endtype = endType;
      if (endType == ClipperLib.EndType.etClosedLine || endType == ClipperLib.EndType.etClosedPolygon)
        while (highI > 0 && ClipperLib.IntPoint.op_Equality(path2[0], path2[highI]))
          highI--;
      newNode.m_polygon.push(path2[0]);
      var j = 0, k = 0;
      for (var i = 1; i <= highI; i++)
        if (ClipperLib.IntPoint.op_Inequality(newNode.m_polygon[j], path2[i])) {
          j++;
          newNode.m_polygon.push(path2[i]);
          if (path2[i].Y > newNode.m_polygon[k].Y || path2[i].Y == newNode.m_polygon[k].Y && path2[i].X < newNode.m_polygon[k].X)
            k = j;
        }
      if (endType == ClipperLib.EndType.etClosedPolygon && j < 2 || endType != ClipperLib.EndType.etClosedPolygon && j < 0)
        return;
      this.m_polyNodes.AddChild(newNode);
      if (endType != ClipperLib.EndType.etClosedPolygon)
        return;
      if (this.m_lowest.X < 0)
        this.m_lowest = new ClipperLib.IntPoint(0, k);
      else {
        var ip = this.m_polyNodes.Childs()[this.m_lowest.X].m_polygon[this.m_lowest.Y];
        if (newNode.m_polygon[k].Y > ip.Y || newNode.m_polygon[k].Y == ip.Y && newNode.m_polygon[k].X < ip.X)
          this.m_lowest = new ClipperLib.IntPoint(this.m_polyNodes.ChildCount() - 1, k);
      }
    };
    ClipperLib.ClipperOffset.prototype.AddPaths = function(paths, joinType, endType) {
      for (var i = 0, ilen = paths.length; i < ilen; i++)
        this.AddPath(paths[i], joinType, endType);
    };
    ClipperLib.ClipperOffset.prototype.FixOrientations = function() {
      if (this.m_lowest.X >= 0 && !ClipperLib.Clipper.Orientation(this.m_polyNodes.Childs()[this.m_lowest.X].m_polygon)) {
        for (var i = 0; i < this.m_polyNodes.ChildCount(); i++) {
          var node = this.m_polyNodes.Childs()[i];
          if (node.m_endtype == ClipperLib.EndType.etClosedPolygon || node.m_endtype == ClipperLib.EndType.etClosedLine && ClipperLib.Clipper.Orientation(node.m_polygon))
            node.m_polygon.reverse();
        }
      } else {
        for (var i = 0; i < this.m_polyNodes.ChildCount(); i++) {
          var node = this.m_polyNodes.Childs()[i];
          if (node.m_endtype == ClipperLib.EndType.etClosedLine && !ClipperLib.Clipper.Orientation(node.m_polygon))
            node.m_polygon.reverse();
        }
      }
    };
    ClipperLib.ClipperOffset.GetUnitNormal = function(pt1, pt2) {
      var dx = pt2.X - pt1.X;
      var dy = pt2.Y - pt1.Y;
      if (dx == 0 && dy == 0)
        return new ClipperLib.DoublePoint(0, 0);
      var f = 1 / Math.sqrt(dx * dx + dy * dy);
      dx *= f;
      dy *= f;
      return new ClipperLib.DoublePoint(dy, -dx);
    };
    ClipperLib.ClipperOffset.prototype.DoOffset = function(delta) {
      this.m_destPolys = new Array();
      this.m_delta = delta;
      if (ClipperLib.ClipperBase.near_zero(delta)) {
        for (var i = 0; i < this.m_polyNodes.ChildCount(); i++) {
          var node = this.m_polyNodes.Childs()[i];
          if (node.m_endtype == ClipperLib.EndType.etClosedPolygon)
            this.m_destPolys.push(node.m_polygon);
        }
        return;
      }
      if (this.MiterLimit > 2)
        this.m_miterLim = 2 / (this.MiterLimit * this.MiterLimit);
      else
        this.m_miterLim = 0.5;
      var y;
      if (this.ArcTolerance <= 0)
        y = ClipperLib.ClipperOffset.def_arc_tolerance;
      else if (this.ArcTolerance > Math.abs(delta) * ClipperLib.ClipperOffset.def_arc_tolerance)
        y = Math.abs(delta) * ClipperLib.ClipperOffset.def_arc_tolerance;
      else
        y = this.ArcTolerance;
      var steps = 3.14159265358979 / Math.acos(1 - y / Math.abs(delta));
      this.m_sin = Math.sin(ClipperLib.ClipperOffset.two_pi / steps);
      this.m_cos = Math.cos(ClipperLib.ClipperOffset.two_pi / steps);
      this.m_StepsPerRad = steps / ClipperLib.ClipperOffset.two_pi;
      if (delta < 0)
        this.m_sin = -this.m_sin;
      for (var i = 0; i < this.m_polyNodes.ChildCount(); i++) {
        var node = this.m_polyNodes.Childs()[i];
        this.m_srcPoly = node.m_polygon;
        var len = this.m_srcPoly.length;
        if (len == 0 || delta <= 0 && (len < 3 || node.m_endtype != ClipperLib.EndType.etClosedPolygon))
          continue;
        this.m_destPoly = new Array();
        if (len == 1) {
          if (node.m_jointype == ClipperLib.JoinType.jtRound) {
            var X = 1, Y = 0;
            for (var j = 1; j <= steps; j++) {
              this.m_destPoly.push(new ClipperLib.IntPoint(ClipperLib.ClipperOffset.Round(this.m_srcPoly[0].X + X * delta), ClipperLib.ClipperOffset.Round(this.m_srcPoly[0].Y + Y * delta)));
              var X2 = X;
              X = X * this.m_cos - this.m_sin * Y;
              Y = X2 * this.m_sin + Y * this.m_cos;
            }
          } else {
            var X = -1, Y = -1;
            for (var j = 0; j < 4; ++j) {
              this.m_destPoly.push(new ClipperLib.IntPoint(ClipperLib.ClipperOffset.Round(this.m_srcPoly[0].X + X * delta), ClipperLib.ClipperOffset.Round(this.m_srcPoly[0].Y + Y * delta)));
              if (X < 0)
                X = 1;
              else if (Y < 0)
                Y = 1;
              else
                X = -1;
            }
          }
          this.m_destPolys.push(this.m_destPoly);
          continue;
        }
        this.m_normals.length = 0;
        for (var j = 0; j < len - 1; j++)
          this.m_normals.push(ClipperLib.ClipperOffset.GetUnitNormal(this.m_srcPoly[j], this.m_srcPoly[j + 1]));
        if (node.m_endtype == ClipperLib.EndType.etClosedLine || node.m_endtype == ClipperLib.EndType.etClosedPolygon)
          this.m_normals.push(ClipperLib.ClipperOffset.GetUnitNormal(this.m_srcPoly[len - 1], this.m_srcPoly[0]));
        else
          this.m_normals.push(new ClipperLib.DoublePoint(this.m_normals[len - 2]));
        if (node.m_endtype == ClipperLib.EndType.etClosedPolygon) {
          var k = len - 1;
          for (var j = 0; j < len; j++)
            k = this.OffsetPoint(j, k, node.m_jointype);
          this.m_destPolys.push(this.m_destPoly);
        } else if (node.m_endtype == ClipperLib.EndType.etClosedLine) {
          var k = len - 1;
          for (var j = 0; j < len; j++)
            k = this.OffsetPoint(j, k, node.m_jointype);
          this.m_destPolys.push(this.m_destPoly);
          this.m_destPoly = new Array();
          var n = this.m_normals[len - 1];
          for (var j = len - 1; j > 0; j--)
            this.m_normals[j] = new ClipperLib.DoublePoint(-this.m_normals[j - 1].X, -this.m_normals[j - 1].Y);
          this.m_normals[0] = new ClipperLib.DoublePoint(-n.X, -n.Y);
          k = 0;
          for (var j = len - 1; j >= 0; j--)
            k = this.OffsetPoint(j, k, node.m_jointype);
          this.m_destPolys.push(this.m_destPoly);
        } else {
          var k = 0;
          for (var j = 1; j < len - 1; ++j)
            k = this.OffsetPoint(j, k, node.m_jointype);
          var pt1;
          if (node.m_endtype == ClipperLib.EndType.etOpenButt) {
            var j = len - 1;
            pt1 = new ClipperLib.IntPoint(ClipperLib.ClipperOffset.Round(this.m_srcPoly[j].X + this.m_normals[j].X * delta), ClipperLib.ClipperOffset.Round(this.m_srcPoly[j].Y + this.m_normals[j].Y * delta));
            this.m_destPoly.push(pt1);
            pt1 = new ClipperLib.IntPoint(ClipperLib.ClipperOffset.Round(this.m_srcPoly[j].X - this.m_normals[j].X * delta), ClipperLib.ClipperOffset.Round(this.m_srcPoly[j].Y - this.m_normals[j].Y * delta));
            this.m_destPoly.push(pt1);
          } else {
            var j = len - 1;
            k = len - 2;
            this.m_sinA = 0;
            this.m_normals[j] = new ClipperLib.DoublePoint(-this.m_normals[j].X, -this.m_normals[j].Y);
            if (node.m_endtype == ClipperLib.EndType.etOpenSquare)
              this.DoSquare(j, k);
            else
              this.DoRound(j, k);
          }
          for (var j = len - 1; j > 0; j--)
            this.m_normals[j] = new ClipperLib.DoublePoint(-this.m_normals[j - 1].X, -this.m_normals[j - 1].Y);
          this.m_normals[0] = new ClipperLib.DoublePoint(-this.m_normals[1].X, -this.m_normals[1].Y);
          k = len - 1;
          for (var j = k - 1; j > 0; --j)
            k = this.OffsetPoint(j, k, node.m_jointype);
          if (node.m_endtype == ClipperLib.EndType.etOpenButt) {
            pt1 = new ClipperLib.IntPoint(ClipperLib.ClipperOffset.Round(this.m_srcPoly[0].X - this.m_normals[0].X * delta), ClipperLib.ClipperOffset.Round(this.m_srcPoly[0].Y - this.m_normals[0].Y * delta));
            this.m_destPoly.push(pt1);
            pt1 = new ClipperLib.IntPoint(ClipperLib.ClipperOffset.Round(this.m_srcPoly[0].X + this.m_normals[0].X * delta), ClipperLib.ClipperOffset.Round(this.m_srcPoly[0].Y + this.m_normals[0].Y * delta));
            this.m_destPoly.push(pt1);
          } else {
            k = 1;
            this.m_sinA = 0;
            if (node.m_endtype == ClipperLib.EndType.etOpenSquare)
              this.DoSquare(0, 1);
            else
              this.DoRound(0, 1);
          }
          this.m_destPolys.push(this.m_destPoly);
        }
      }
    };
    ClipperLib.ClipperOffset.prototype.Execute = function() {
      var a = arguments, ispolytree = a[0] instanceof ClipperLib.PolyTree;
      if (!ispolytree) {
        var solution = a[0], delta = a[1];
        ClipperLib.Clear(solution);
        this.FixOrientations();
        this.DoOffset(delta);
        var clpr = new ClipperLib.Clipper(0);
        clpr.AddPaths(this.m_destPolys, ClipperLib.PolyType.ptSubject, true);
        if (delta > 0) {
          clpr.Execute(ClipperLib.ClipType.ctUnion, solution, ClipperLib.PolyFillType.pftPositive, ClipperLib.PolyFillType.pftPositive);
        } else {
          var r = ClipperLib.Clipper.GetBounds(this.m_destPolys);
          var outer = new ClipperLib.Path();
          outer.push(new ClipperLib.IntPoint(r.left - 10, r.bottom + 10));
          outer.push(new ClipperLib.IntPoint(r.right + 10, r.bottom + 10));
          outer.push(new ClipperLib.IntPoint(r.right + 10, r.top - 10));
          outer.push(new ClipperLib.IntPoint(r.left - 10, r.top - 10));
          clpr.AddPath(outer, ClipperLib.PolyType.ptSubject, true);
          clpr.ReverseSolution = true;
          clpr.Execute(ClipperLib.ClipType.ctUnion, solution, ClipperLib.PolyFillType.pftNegative, ClipperLib.PolyFillType.pftNegative);
          if (solution.length > 0)
            solution.splice(0, 1);
        }
      } else {
        var solution = a[0], delta = a[1];
        solution.Clear();
        this.FixOrientations();
        this.DoOffset(delta);
        var clpr = new ClipperLib.Clipper(0);
        clpr.AddPaths(this.m_destPolys, ClipperLib.PolyType.ptSubject, true);
        if (delta > 0) {
          clpr.Execute(ClipperLib.ClipType.ctUnion, solution, ClipperLib.PolyFillType.pftPositive, ClipperLib.PolyFillType.pftPositive);
        } else {
          var r = ClipperLib.Clipper.GetBounds(this.m_destPolys);
          var outer = new ClipperLib.Path();
          outer.push(new ClipperLib.IntPoint(r.left - 10, r.bottom + 10));
          outer.push(new ClipperLib.IntPoint(r.right + 10, r.bottom + 10));
          outer.push(new ClipperLib.IntPoint(r.right + 10, r.top - 10));
          outer.push(new ClipperLib.IntPoint(r.left - 10, r.top - 10));
          clpr.AddPath(outer, ClipperLib.PolyType.ptSubject, true);
          clpr.ReverseSolution = true;
          clpr.Execute(ClipperLib.ClipType.ctUnion, solution, ClipperLib.PolyFillType.pftNegative, ClipperLib.PolyFillType.pftNegative);
          if (solution.ChildCount() == 1 && solution.Childs()[0].ChildCount() > 0) {
            var outerNode = solution.Childs()[0];
            solution.Childs()[0] = outerNode.Childs()[0];
            for (var i = 1; i < outerNode.ChildCount(); i++)
              solution.AddChild(outerNode.Childs()[i]);
          } else
            solution.Clear();
        }
      }
    };
    ClipperLib.ClipperOffset.prototype.OffsetPoint = function(j, k, jointype) {
      this.m_sinA = this.m_normals[k].X * this.m_normals[j].Y - this.m_normals[j].X * this.m_normals[k].Y;
      if (this.m_sinA < 5e-5 && this.m_sinA > -5e-5)
        return k;
      else if (this.m_sinA > 1)
        this.m_sinA = 1;
      else if (this.m_sinA < -1)
        this.m_sinA = -1;
      if (this.m_sinA * this.m_delta < 0) {
        this.m_destPoly.push(new ClipperLib.IntPoint(
          ClipperLib.ClipperOffset.Round(this.m_srcPoly[j].X + this.m_normals[k].X * this.m_delta),
          ClipperLib.ClipperOffset.Round(this.m_srcPoly[j].Y + this.m_normals[k].Y * this.m_delta)
        ));
        this.m_destPoly.push(new ClipperLib.IntPoint(this.m_srcPoly[j]));
        this.m_destPoly.push(new ClipperLib.IntPoint(
          ClipperLib.ClipperOffset.Round(this.m_srcPoly[j].X + this.m_normals[j].X * this.m_delta),
          ClipperLib.ClipperOffset.Round(this.m_srcPoly[j].Y + this.m_normals[j].Y * this.m_delta)
        ));
      } else
        switch (jointype) {
          case ClipperLib.JoinType.jtMiter: {
            var r = 1 + (this.m_normals[j].X * this.m_normals[k].X + this.m_normals[j].Y * this.m_normals[k].Y);
            if (r >= this.m_miterLim)
              this.DoMiter(j, k, r);
            else
              this.DoSquare(j, k);
            break;
          }
          case ClipperLib.JoinType.jtSquare:
            this.DoSquare(j, k);
            break;
          case ClipperLib.JoinType.jtRound:
            this.DoRound(j, k);
            break;
        }
      k = j;
      return k;
    };
    ClipperLib.ClipperOffset.prototype.DoSquare = function(j, k) {
      var dx = Math.tan(Math.atan2(
        this.m_sinA,
        this.m_normals[k].X * this.m_normals[j].X + this.m_normals[k].Y * this.m_normals[j].Y
      ) / 4);
      this.m_destPoly.push(new ClipperLib.IntPoint(
        ClipperLib.ClipperOffset.Round(this.m_srcPoly[j].X + this.m_delta * (this.m_normals[k].X - this.m_normals[k].Y * dx)),
        ClipperLib.ClipperOffset.Round(this.m_srcPoly[j].Y + this.m_delta * (this.m_normals[k].Y + this.m_normals[k].X * dx))
      ));
      this.m_destPoly.push(new ClipperLib.IntPoint(
        ClipperLib.ClipperOffset.Round(this.m_srcPoly[j].X + this.m_delta * (this.m_normals[j].X + this.m_normals[j].Y * dx)),
        ClipperLib.ClipperOffset.Round(this.m_srcPoly[j].Y + this.m_delta * (this.m_normals[j].Y - this.m_normals[j].X * dx))
      ));
    };
    ClipperLib.ClipperOffset.prototype.DoMiter = function(j, k, r) {
      var q = this.m_delta / r;
      this.m_destPoly.push(new ClipperLib.IntPoint(
        ClipperLib.ClipperOffset.Round(this.m_srcPoly[j].X + (this.m_normals[k].X + this.m_normals[j].X) * q),
        ClipperLib.ClipperOffset.Round(this.m_srcPoly[j].Y + (this.m_normals[k].Y + this.m_normals[j].Y) * q)
      ));
    };
    ClipperLib.ClipperOffset.prototype.DoRound = function(j, k) {
      var a = Math.atan2(
        this.m_sinA,
        this.m_normals[k].X * this.m_normals[j].X + this.m_normals[k].Y * this.m_normals[j].Y
      );
      var steps = ClipperLib.Cast_Int32(ClipperLib.ClipperOffset.Round(this.m_StepsPerRad * Math.abs(a)));
      var X = this.m_normals[k].X, Y = this.m_normals[k].Y, X2;
      for (var i = 0; i < steps; ++i) {
        this.m_destPoly.push(new ClipperLib.IntPoint(
          ClipperLib.ClipperOffset.Round(this.m_srcPoly[j].X + X * this.m_delta),
          ClipperLib.ClipperOffset.Round(this.m_srcPoly[j].Y + Y * this.m_delta)
        ));
        X2 = X;
        X = X * this.m_cos - this.m_sin * Y;
        Y = X2 * this.m_sin + Y * this.m_cos;
      }
      this.m_destPoly.push(new ClipperLib.IntPoint(
        ClipperLib.ClipperOffset.Round(this.m_srcPoly[j].X + this.m_normals[j].X * this.m_delta),
        ClipperLib.ClipperOffset.Round(this.m_srcPoly[j].Y + this.m_normals[j].Y * this.m_delta)
      ));
    };
    ClipperLib.Error = function(message) {
      try {
        throw new Error(message);
      } catch (err) {
        alert(err.message);
      }
    };
    ClipperLib.JS = {};
    ClipperLib.JS.AreaOfPolygon = function(poly, scale) {
      if (!scale) scale = 1;
      return ClipperLib.Clipper.Area(poly) / (scale * scale);
    };
    ClipperLib.JS.AreaOfPolygons = function(poly, scale) {
      if (!scale) scale = 1;
      var area = 0;
      for (var i = 0; i < poly.length; i++) {
        area += ClipperLib.Clipper.Area(poly[i]);
      }
      return area / (scale * scale);
    };
    ClipperLib.JS.BoundsOfPath = function(path2, scale) {
      return ClipperLib.JS.BoundsOfPaths([path2], scale);
    };
    ClipperLib.JS.BoundsOfPaths = function(paths, scale) {
      if (!scale) scale = 1;
      var bounds = ClipperLib.Clipper.GetBounds(paths);
      bounds.left /= scale;
      bounds.bottom /= scale;
      bounds.right /= scale;
      bounds.top /= scale;
      return bounds;
    };
    ClipperLib.JS.Clean = function(polygon, delta) {
      if (!(polygon instanceof Array)) return [];
      var isPolygons = polygon[0] instanceof Array;
      var polygon = ClipperLib.JS.Clone(polygon);
      if (typeof delta != "number" || delta === null) {
        ClipperLib.Error("Delta is not a number in Clean().");
        return polygon;
      }
      if (polygon.length === 0 || polygon.length == 1 && polygon[0].length === 0 || delta < 0) return polygon;
      if (!isPolygons) polygon = [polygon];
      var k_length = polygon.length;
      var len, poly, result, d, p, j, i;
      var results = [];
      for (var k = 0; k < k_length; k++) {
        poly = polygon[k];
        len = poly.length;
        if (len === 0) continue;
        else if (len < 3) {
          result = poly;
          results.push(result);
          continue;
        }
        result = poly;
        d = delta * delta;
        p = poly[0];
        j = 1;
        for (i = 1; i < len; i++) {
          if ((poly[i].X - p.X) * (poly[i].X - p.X) + (poly[i].Y - p.Y) * (poly[i].Y - p.Y) <= d)
            continue;
          result[j] = poly[i];
          p = poly[i];
          j++;
        }
        p = poly[j - 1];
        if ((poly[0].X - p.X) * (poly[0].X - p.X) + (poly[0].Y - p.Y) * (poly[0].Y - p.Y) <= d)
          j--;
        if (j < len)
          result.splice(j, len - j);
        if (result.length) results.push(result);
      }
      if (!isPolygons && results.length) results = results[0];
      else if (!isPolygons && results.length === 0) results = [];
      else if (isPolygons && results.length === 0) results = [
        []
      ];
      return results;
    };
    ClipperLib.JS.Clone = function(polygon) {
      if (!(polygon instanceof Array)) return [];
      if (polygon.length === 0) return [];
      else if (polygon.length == 1 && polygon[0].length === 0) return [[]];
      var isPolygons = polygon[0] instanceof Array;
      if (!isPolygons) polygon = [polygon];
      var len = polygon.length, plen, i, j, result;
      var results = new Array(len);
      for (i = 0; i < len; i++) {
        plen = polygon[i].length;
        result = new Array(plen);
        for (j = 0; j < plen; j++) {
          result[j] = {
            X: polygon[i][j].X,
            Y: polygon[i][j].Y
          };
        }
        results[i] = result;
      }
      if (!isPolygons) results = results[0];
      return results;
    };
    ClipperLib.JS.Lighten = function(polygon, tolerance) {
      if (!(polygon instanceof Array)) return [];
      if (typeof tolerance != "number" || tolerance === null) {
        ClipperLib.Error("Tolerance is not a number in Lighten().");
        return ClipperLib.JS.Clone(polygon);
      }
      if (polygon.length === 0 || polygon.length == 1 && polygon[0].length === 0 || tolerance < 0) {
        return ClipperLib.JS.Clone(polygon);
      }
      if (!(polygon[0] instanceof Array)) polygon = [polygon];
      var i, j, poly, k, poly2, plen, A, B, P, d, rem, addlast;
      var bxax, byay, l, ax, ay;
      var len = polygon.length;
      var toleranceSq = tolerance * tolerance;
      var results = [];
      for (i = 0; i < len; i++) {
        poly = polygon[i];
        plen = poly.length;
        if (plen == 0) continue;
        for (k = 0; k < 1e6; k++) {
          poly2 = [];
          plen = poly.length;
          if (poly[plen - 1].X != poly[0].X || poly[plen - 1].Y != poly[0].Y) {
            addlast = 1;
            poly.push(
              {
                X: poly[0].X,
                Y: poly[0].Y
              }
            );
            plen = poly.length;
          } else addlast = 0;
          rem = [];
          for (j = 0; j < plen - 2; j++) {
            A = poly[j];
            P = poly[j + 1];
            B = poly[j + 2];
            ax = A.X;
            ay = A.Y;
            bxax = B.X - ax;
            byay = B.Y - ay;
            if (bxax !== 0 || byay !== 0) {
              l = ((P.X - ax) * bxax + (P.Y - ay) * byay) / (bxax * bxax + byay * byay);
              if (l > 1) {
                ax = B.X;
                ay = B.Y;
              } else if (l > 0) {
                ax += bxax * l;
                ay += byay * l;
              }
            }
            bxax = P.X - ax;
            byay = P.Y - ay;
            d = bxax * bxax + byay * byay;
            if (d <= toleranceSq) {
              rem[j + 1] = 1;
              j++;
            }
          }
          poly2.push(
            {
              X: poly[0].X,
              Y: poly[0].Y
            }
          );
          for (j = 1; j < plen - 1; j++)
            if (!rem[j]) poly2.push(
              {
                X: poly[j].X,
                Y: poly[j].Y
              }
            );
          poly2.push(
            {
              X: poly[plen - 1].X,
              Y: poly[plen - 1].Y
            }
          );
          if (addlast) poly.pop();
          if (!rem.length) break;
          else poly = poly2;
        }
        plen = poly2.length;
        if (poly2[plen - 1].X == poly2[0].X && poly2[plen - 1].Y == poly2[0].Y) {
          poly2.pop();
        }
        if (poly2.length > 2)
          results.push(poly2);
      }
      if (!polygon[0] instanceof Array) results = results[0];
      if (typeof results == "undefined") results = [
        []
      ];
      return results;
    };
    ClipperLib.JS.PerimeterOfPath = function(path2, closed, scale) {
      if (typeof path2 == "undefined") return 0;
      var sqrt = Math.sqrt;
      var perimeter = 0;
      var p1, p2, p1x = 0, p1y = 0, p2x = 0, p2y = 0;
      var j = path2.length;
      if (j < 2) return 0;
      if (closed) {
        path2[j] = path2[0];
        j++;
      }
      while (--j) {
        p1 = path2[j];
        p1x = p1.X;
        p1y = p1.Y;
        p2 = path2[j - 1];
        p2x = p2.X;
        p2y = p2.Y;
        perimeter += sqrt((p1x - p2x) * (p1x - p2x) + (p1y - p2y) * (p1y - p2y));
      }
      if (closed) path2.pop();
      return perimeter / scale;
    };
    ClipperLib.JS.PerimeterOfPaths = function(paths, closed, scale) {
      if (!scale) scale = 1;
      var perimeter = 0;
      for (var i = 0; i < paths.length; i++) {
        perimeter += ClipperLib.JS.PerimeterOfPath(paths[i], closed, scale);
      }
      return perimeter;
    };
    ClipperLib.JS.ScaleDownPath = function(path2, scale) {
      var i, p;
      if (!scale) scale = 1;
      i = path2.length;
      while (i--) {
        p = path2[i];
        p.X = p.X / scale;
        p.Y = p.Y / scale;
      }
    };
    ClipperLib.JS.ScaleDownPaths = function(paths, scale) {
      var i, j, p, round = Math.round;
      if (!scale) scale = 1;
      i = paths.length;
      while (i--) {
        j = paths[i].length;
        while (j--) {
          p = paths[i][j];
          p.X = p.X / scale;
          p.Y = p.Y / scale;
        }
      }
    };
    ClipperLib.JS.ScaleUpPath = function(path2, scale) {
      var i, p, round = Math.round;
      if (!scale) scale = 1;
      i = path2.length;
      while (i--) {
        p = path2[i];
        p.X = round(p.X * scale);
        p.Y = round(p.Y * scale);
      }
    };
    ClipperLib.JS.ScaleUpPaths = function(paths, scale) {
      var i, j, p, round = Math.round;
      if (!scale) scale = 1;
      i = paths.length;
      while (i--) {
        j = paths[i].length;
        while (j--) {
          p = paths[i][j];
          p.X = round(p.X * scale);
          p.Y = round(p.Y * scale);
        }
      }
    };
    ClipperLib.ExPolygons = function() {
      return [];
    };
    ClipperLib.ExPolygon = function() {
      this.outer = null;
      this.holes = null;
    };
    ClipperLib.JS.AddOuterPolyNodeToExPolygons = function(polynode, expolygons) {
      var ep = new ClipperLib.ExPolygon();
      ep.outer = polynode.Contour();
      var childs = polynode.Childs();
      var ilen = childs.length;
      ep.holes = new Array(ilen);
      var node, n, i, j, childs2, jlen;
      for (i = 0; i < ilen; i++) {
        node = childs[i];
        ep.holes[i] = node.Contour();
        for (j = 0, childs2 = node.Childs(), jlen = childs2.length; j < jlen; j++) {
          n = childs2[j];
          ClipperLib.JS.AddOuterPolyNodeToExPolygons(n, expolygons);
        }
      }
      expolygons.push(ep);
    };
    ClipperLib.JS.ExPolygonsToPaths = function(expolygons) {
      var a, i, alen, ilen;
      var paths = new ClipperLib.Paths();
      for (a = 0, alen = expolygons.length; a < alen; a++) {
        paths.push(expolygons[a].outer);
        for (i = 0, ilen = expolygons[a].holes.length; i < ilen; i++) {
          paths.push(expolygons[a].holes[i]);
        }
      }
      return paths;
    };
    ClipperLib.JS.PolyTreeToExPolygons = function(polytree) {
      var expolygons = new ClipperLib.ExPolygons();
      var node, i, childs, ilen;
      for (i = 0, childs = polytree.Childs(), ilen = childs.length; i < ilen; i++) {
        node = childs[i];
        ClipperLib.JS.AddOuterPolyNodeToExPolygons(node, expolygons);
      }
      return expolygons;
    };
    module2.exports = ClipperLib;
  }
});

// node_modules/number-precision/build/index.js
var require_build = __commonJS({
  "node_modules/number-precision/build/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    function strip(num, precision) {
      if (precision === void 0) {
        precision = 15;
      }
      return +parseFloat(Number(num).toPrecision(precision));
    }
    function digitLength(num) {
      var eSplit = num.toString().split(/[eE]/);
      var len = (eSplit[0].split(".")[1] || "").length - +(eSplit[1] || 0);
      return len > 0 ? len : 0;
    }
    function float2Fixed(num) {
      if (num.toString().indexOf("e") === -1) {
        return Number(num.toString().replace(".", ""));
      }
      var dLen = digitLength(num);
      return dLen > 0 ? strip(Number(num) * Math.pow(10, dLen)) : Number(num);
    }
    function checkBoundary(num) {
      if (_boundaryCheckingState) {
        if (num > Number.MAX_SAFE_INTEGER || num < Number.MIN_SAFE_INTEGER) {
          console.warn(num + " is beyond boundary when transfer to integer, the results may not be accurate");
        }
      }
    }
    function createOperation(operation) {
      return function() {
        var nums = [];
        for (var _i = 0; _i < arguments.length; _i++) {
          nums[_i] = arguments[_i];
        }
        var first = nums[0], others = nums.slice(1);
        return others.reduce(function(prev, next) {
          return operation(prev, next);
        }, first);
      };
    }
    var times = createOperation(function(num1, num2) {
      var num1Changed = float2Fixed(num1);
      var num2Changed = float2Fixed(num2);
      var baseNum = digitLength(num1) + digitLength(num2);
      var leftValue = num1Changed * num2Changed;
      checkBoundary(leftValue);
      return leftValue / Math.pow(10, baseNum);
    });
    var plus = createOperation(function(num1, num2) {
      var baseNum = Math.pow(10, Math.max(digitLength(num1), digitLength(num2)));
      return (times(num1, baseNum) + times(num2, baseNum)) / baseNum;
    });
    var minus = createOperation(function(num1, num2) {
      var baseNum = Math.pow(10, Math.max(digitLength(num1), digitLength(num2)));
      return (times(num1, baseNum) - times(num2, baseNum)) / baseNum;
    });
    var divide = createOperation(function(num1, num2) {
      var num1Changed = float2Fixed(num1);
      var num2Changed = float2Fixed(num2);
      checkBoundary(num1Changed);
      checkBoundary(num2Changed);
      return times(num1Changed / num2Changed, strip(Math.pow(10, digitLength(num2) - digitLength(num1))));
    });
    function round(num, decimal) {
      var base = Math.pow(10, decimal);
      var result = divide(Math.round(Math.abs(times(num, base))), base);
      if (num < 0 && result !== 0) {
        result = times(result, -1);
      }
      return result;
    }
    var _boundaryCheckingState = true;
    function enableBoundaryChecking(flag) {
      if (flag === void 0) {
        flag = true;
      }
      _boundaryCheckingState = flag;
    }
    var index = {
      strip,
      plus,
      minus,
      times,
      divide,
      round,
      digitLength,
      float2Fixed,
      enableBoundaryChecking
    };
    exports2.strip = strip;
    exports2.plus = plus;
    exports2.minus = minus;
    exports2.times = times;
    exports2.divide = divide;
    exports2.round = round;
    exports2.digitLength = digitLength;
    exports2.float2Fixed = float2Fixed;
    exports2.enableBoundaryChecking = enableBoundaryChecking;
    exports2["default"] = index;
  }
});

// node_modules/d3-polygon/src/area.js
function area_default(polygon) {
  var i = -1, n = polygon.length, a, b = polygon[n - 1], area = 0;
  while (++i < n) {
    a = b;
    b = polygon[i];
    area += a[1] * b[0] - a[0] * b[1];
  }
  return area / 2;
}
var init_area = __esm({
  "node_modules/d3-polygon/src/area.js"() {
  }
});

// node_modules/d3-polygon/src/centroid.js
function centroid_default(polygon) {
  var i = -1, n = polygon.length, x = 0, y = 0, a, b = polygon[n - 1], c, k = 0;
  while (++i < n) {
    a = b;
    b = polygon[i];
    k += c = a[0] * b[1] - b[0] * a[1];
    x += (a[0] + b[0]) * c;
    y += (a[1] + b[1]) * c;
  }
  return k *= 3, [x / k, y / k];
}
var init_centroid = __esm({
  "node_modules/d3-polygon/src/centroid.js"() {
  }
});

// node_modules/d3-polygon/src/cross.js
function cross_default(a, b, c) {
  return (b[0] - a[0]) * (c[1] - a[1]) - (b[1] - a[1]) * (c[0] - a[0]);
}
var init_cross = __esm({
  "node_modules/d3-polygon/src/cross.js"() {
  }
});

// node_modules/d3-polygon/src/hull.js
function lexicographicOrder(a, b) {
  return a[0] - b[0] || a[1] - b[1];
}
function computeUpperHullIndexes(points) {
  const n = points.length, indexes = [0, 1];
  let size = 2, i;
  for (i = 2; i < n; ++i) {
    while (size > 1 && cross_default(points[indexes[size - 2]], points[indexes[size - 1]], points[i]) <= 0) --size;
    indexes[size++] = i;
  }
  return indexes.slice(0, size);
}
function hull_default(points) {
  if ((n = points.length) < 3) return null;
  var i, n, sortedPoints = new Array(n), flippedPoints = new Array(n);
  for (i = 0; i < n; ++i) sortedPoints[i] = [+points[i][0], +points[i][1], i];
  sortedPoints.sort(lexicographicOrder);
  for (i = 0; i < n; ++i) flippedPoints[i] = [sortedPoints[i][0], -sortedPoints[i][1]];
  var upperIndexes = computeUpperHullIndexes(sortedPoints), lowerIndexes = computeUpperHullIndexes(flippedPoints);
  var skipLeft = lowerIndexes[0] === upperIndexes[0], skipRight = lowerIndexes[lowerIndexes.length - 1] === upperIndexes[upperIndexes.length - 1], hull = [];
  for (i = upperIndexes.length - 1; i >= 0; --i) hull.push(points[sortedPoints[upperIndexes[i]][2]]);
  for (i = +skipLeft; i < lowerIndexes.length - skipRight; ++i) hull.push(points[sortedPoints[lowerIndexes[i]][2]]);
  return hull;
}
var init_hull = __esm({
  "node_modules/d3-polygon/src/hull.js"() {
    init_cross();
  }
});

// node_modules/d3-polygon/src/contains.js
function contains_default(polygon, point) {
  var n = polygon.length, p = polygon[n - 1], x = point[0], y = point[1], x0 = p[0], y0 = p[1], x1, y1, inside = false;
  for (var i = 0; i < n; ++i) {
    p = polygon[i], x1 = p[0], y1 = p[1];
    if (y1 > y !== y0 > y && x < (x0 - x1) * (y - y1) / (y0 - y1) + x1) inside = !inside;
    x0 = x1, y0 = y1;
  }
  return inside;
}
var init_contains = __esm({
  "node_modules/d3-polygon/src/contains.js"() {
  }
});

// node_modules/d3-polygon/src/length.js
function length_default(polygon) {
  var i = -1, n = polygon.length, b = polygon[n - 1], xa, ya, xb = b[0], yb = b[1], perimeter = 0;
  while (++i < n) {
    xa = xb;
    ya = yb;
    b = polygon[i];
    xb = b[0];
    yb = b[1];
    xa -= xb;
    ya -= yb;
    perimeter += Math.hypot(xa, ya);
  }
  return perimeter;
}
var init_length = __esm({
  "node_modules/d3-polygon/src/length.js"() {
  }
});

// node_modules/d3-polygon/src/index.js
var src_exports = {};
__export(src_exports, {
  polygonArea: () => area_default,
  polygonCentroid: () => centroid_default,
  polygonContains: () => contains_default,
  polygonHull: () => hull_default,
  polygonLength: () => length_default
});
var init_src = __esm({
  "node_modules/d3-polygon/src/index.js"() {
    init_area();
    init_centroid();
    init_hull();
    init_contains();
    init_length();
  }
});

// node_modules/@paddle-js-models/ocr/lib/index.js
Object.defineProperty(exports, "__esModule", { value: true });
var paddlejsCore = require_lib();
require_lib2();
var clipper = require_clipper();
var numberPrecision = require_build();
var path = require("path");
var fs = require("fs");
var crypto$1 = require("crypto");
var d3Polygon = (init_src(), __toCommonJS(src_exports));
function _interopDefaultLegacy(e) {
  return e && typeof e === "object" && "default" in e ? e : { "default": e };
}
function _interopNamespace(e) {
  if (e && e.__esModule) return e;
  var n = /* @__PURE__ */ Object.create(null);
  if (e) {
    Object.keys(e).forEach(function(k) {
      if (k !== "default") {
        var d = Object.getOwnPropertyDescriptor(e, k);
        Object.defineProperty(n, k, d.get ? d : {
          enumerable: true,
          get: function() {
            return e[k];
          }
        });
      }
    });
  }
  n["default"] = e;
  return Object.freeze(n);
}
var clipper__default = /* @__PURE__ */ _interopDefaultLegacy(clipper);
var path__default = /* @__PURE__ */ _interopDefaultLegacy(path);
var fs__default = /* @__PURE__ */ _interopDefaultLegacy(fs);
var crypto__default = /* @__PURE__ */ _interopDefaultLegacy(crypto$1);
var d3Polygon__namespace = /* @__PURE__ */ _interopNamespace(d3Polygon);
function _regeneratorRuntime() {
  _regeneratorRuntime = function() {
    return exports2;
  };
  var exports2 = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, $Symbol = "function" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || "@@iterator", asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator", toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";
  function define2(obj, key, value) {
    return Object.defineProperty(obj, key, {
      value,
      enumerable: true,
      configurable: true,
      writable: true
    }), obj[key];
  }
  try {
    define2({}, "");
  } catch (err) {
    define2 = function(obj, key, value) {
      return obj[key] = value;
    };
  }
  function wrap(innerFn, outerFn, self2, tryLocsList) {
    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []);
    return generator._invoke = /* @__PURE__ */ function(innerFn2, self3, context2) {
      var state = "suspendedStart";
      return function(method, arg) {
        if ("executing" === state) throw new Error("Generator is already running");
        if ("completed" === state) {
          if ("throw" === method) throw arg;
          return doneResult();
        }
        for (context2.method = method, context2.arg = arg; ; ) {
          var delegate = context2.delegate;
          if (delegate) {
            var delegateResult = maybeInvokeDelegate(delegate, context2);
            if (delegateResult) {
              if (delegateResult === ContinueSentinel) continue;
              return delegateResult;
            }
          }
          if ("next" === context2.method) context2.sent = context2._sent = context2.arg;
          else if ("throw" === context2.method) {
            if ("suspendedStart" === state) throw state = "completed", context2.arg;
            context2.dispatchException(context2.arg);
          } else "return" === context2.method && context2.abrupt("return", context2.arg);
          state = "executing";
          var record = tryCatch(innerFn2, self3, context2);
          if ("normal" === record.type) {
            if (state = context2.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue;
            return {
              value: record.arg,
              done: context2.done
            };
          }
          "throw" === record.type && (state = "completed", context2.method = "throw", context2.arg = record.arg);
        }
      };
    }(innerFn, self2, context), generator;
  }
  function tryCatch(fn, obj, arg) {
    try {
      return {
        type: "normal",
        arg: fn.call(obj, arg)
      };
    } catch (err) {
      return {
        type: "throw",
        arg: err
      };
    }
  }
  exports2.wrap = wrap;
  var ContinueSentinel = {};
  function Generator() {
  }
  function GeneratorFunction() {
  }
  function GeneratorFunctionPrototype() {
  }
  var IteratorPrototype = {};
  define2(IteratorPrototype, iteratorSymbol, function() {
    return this;
  });
  var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([])));
  NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype);
  var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);
  function defineIteratorMethods(prototype) {
    ["next", "throw", "return"].forEach(function(method) {
      define2(prototype, method, function(arg) {
        return this._invoke(method, arg);
      });
    });
  }
  function AsyncIterator(generator, PromiseImpl) {
    function invoke(method, arg, resolve, reject) {
      var record = tryCatch(generator[method], generator, arg);
      if ("throw" !== record.type) {
        var result = record.arg, value = result.value;
        return value && "object" == typeof value && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function(value2) {
          invoke("next", value2, resolve, reject);
        }, function(err) {
          invoke("throw", err, resolve, reject);
        }) : PromiseImpl.resolve(value).then(function(unwrapped) {
          result.value = unwrapped, resolve(result);
        }, function(error) {
          return invoke("throw", error, resolve, reject);
        });
      }
      reject(record.arg);
    }
    var previousPromise;
    this._invoke = function(method, arg) {
      function callInvokeWithMethodAndArg() {
        return new PromiseImpl(function(resolve, reject) {
          invoke(method, arg, resolve, reject);
        });
      }
      return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
    };
  }
  function maybeInvokeDelegate(delegate, context) {
    var method = delegate.iterator[context.method];
    if (void 0 === method) {
      if (context.delegate = null, "throw" === context.method) {
        if (delegate.iterator.return && (context.method = "return", context.arg = void 0, maybeInvokeDelegate(delegate, context), "throw" === context.method)) return ContinueSentinel;
        context.method = "throw", context.arg = new TypeError("The iterator does not provide a 'throw' method");
      }
      return ContinueSentinel;
    }
    var record = tryCatch(method, delegate.iterator, context.arg);
    if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel;
    var info = record.arg;
    return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = void 0), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel);
  }
  function pushTryEntry(locs) {
    var entry = {
      tryLoc: locs[0]
    };
    1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry);
  }
  function resetTryEntry(entry) {
    var record = entry.completion || {};
    record.type = "normal", delete record.arg, entry.completion = record;
  }
  function Context(tryLocsList) {
    this.tryEntries = [{
      tryLoc: "root"
    }], tryLocsList.forEach(pushTryEntry, this), this.reset(true);
  }
  function values(iterable) {
    if (iterable) {
      var iteratorMethod = iterable[iteratorSymbol];
      if (iteratorMethod) return iteratorMethod.call(iterable);
      if ("function" == typeof iterable.next) return iterable;
      if (!isNaN(iterable.length)) {
        var i = -1, next = function next2() {
          for (; ++i < iterable.length; ) if (hasOwn.call(iterable, i)) return next2.value = iterable[i], next2.done = false, next2;
          return next2.value = void 0, next2.done = true, next2;
        };
        return next.next = next;
      }
    }
    return {
      next: doneResult
    };
  }
  function doneResult() {
    return {
      value: void 0,
      done: true
    };
  }
  return GeneratorFunction.prototype = GeneratorFunctionPrototype, define2(Gp, "constructor", GeneratorFunctionPrototype), define2(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = define2(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports2.isGeneratorFunction = function(genFun) {
    var ctor = "function" == typeof genFun && genFun.constructor;
    return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name));
  }, exports2.mark = function(genFun) {
    return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define2(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun;
  }, exports2.awrap = function(arg) {
    return {
      __await: arg
    };
  }, defineIteratorMethods(AsyncIterator.prototype), define2(AsyncIterator.prototype, asyncIteratorSymbol, function() {
    return this;
  }), exports2.AsyncIterator = AsyncIterator, exports2.async = function(innerFn, outerFn, self2, tryLocsList, PromiseImpl) {
    void 0 === PromiseImpl && (PromiseImpl = Promise);
    var iter = new AsyncIterator(wrap(innerFn, outerFn, self2, tryLocsList), PromiseImpl);
    return exports2.isGeneratorFunction(outerFn) ? iter : iter.next().then(function(result) {
      return result.done ? result.value : iter.next();
    });
  }, defineIteratorMethods(Gp), define2(Gp, toStringTagSymbol, "Generator"), define2(Gp, iteratorSymbol, function() {
    return this;
  }), define2(Gp, "toString", function() {
    return "[object Generator]";
  }), exports2.keys = function(object) {
    var keys = [];
    for (var key in object) keys.push(key);
    return keys.reverse(), function next() {
      for (; keys.length; ) {
        var key2 = keys.pop();
        if (key2 in object) return next.value = key2, next.done = false, next;
      }
      return next.done = true, next;
    };
  }, exports2.values = values, Context.prototype = {
    constructor: Context,
    reset: function(skipTempReset) {
      if (this.prev = 0, this.next = 0, this.sent = this._sent = void 0, this.done = false, this.delegate = null, this.method = "next", this.arg = void 0, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = void 0);
    },
    stop: function() {
      this.done = true;
      var rootRecord = this.tryEntries[0].completion;
      if ("throw" === rootRecord.type) throw rootRecord.arg;
      return this.rval;
    },
    dispatchException: function(exception) {
      if (this.done) throw exception;
      var context = this;
      function handle(loc, caught) {
        return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = void 0), !!caught;
      }
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i], record = entry.completion;
        if ("root" === entry.tryLoc) return handle("end");
        if (entry.tryLoc <= this.prev) {
          var hasCatch = hasOwn.call(entry, "catchLoc"), hasFinally = hasOwn.call(entry, "finallyLoc");
          if (hasCatch && hasFinally) {
            if (this.prev < entry.catchLoc) return handle(entry.catchLoc, true);
            if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);
          } else if (hasCatch) {
            if (this.prev < entry.catchLoc) return handle(entry.catchLoc, true);
          } else {
            if (!hasFinally) throw new Error("try statement without catch or finally");
            if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);
          }
        }
      }
    },
    abrupt: function(type, arg) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
          var finallyEntry = entry;
          break;
        }
      }
      finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null);
      var record = finallyEntry ? finallyEntry.completion : {};
      return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record);
    },
    complete: function(record, afterLoc) {
      if ("throw" === record.type) throw record.arg;
      return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel;
    },
    finish: function(finallyLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel;
      }
    },
    catch: function(tryLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc === tryLoc) {
          var record = entry.completion;
          if ("throw" === record.type) {
            var thrown = record.arg;
            resetTryEntry(entry);
          }
          return thrown;
        }
      }
      throw new Error("illegal catch attempt");
    },
    delegateYield: function(iterable, resultName, nextLoc) {
      return this.delegate = {
        iterator: values(iterable),
        resultName,
        nextLoc
      }, "next" === this.method && (this.arg = void 0), ContinueSentinel;
    }
  }, exports2;
}
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
  try {
    var info = gen[key](arg);
    var value = info.value;
  } catch (error) {
    reject(error);
    return;
  }
  if (info.done) {
    resolve(value);
  } else {
    Promise.resolve(value).then(_next, _throw);
  }
}
function _asyncToGenerator(fn) {
  return function() {
    var self2 = this, args = arguments;
    return new Promise(function(resolve, reject) {
      var gen = fn.apply(self2, args);
      function _next(value) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
      }
      function _throw(err) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
      }
      _next(void 0);
    });
  };
}
function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {
    writable: false
  });
  return Constructor;
}
function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }
  return obj;
}
function _toConsumableArray(arr) {
  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
}
function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr)) return _arrayLikeToArray(arr);
}
function _iterableToArray(iter) {
  if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
}
function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}
function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];
  return arr2;
}
function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
var commonjsGlobal = typeof globalThis !== "undefined" ? globalThis : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : {};
function createCommonjsModule(fn, module2) {
  return module2 = { exports: {} }, fn(module2, module2.exports), module2.exports;
}
var opencv_ocr = createCommonjsModule(function(module2, exports2) {
  (function(root, factory) {
    if (module2.exports) {
      module2.exports = factory();
    } else if (typeof window === "object") {
      root.cv = factory();
    } else if (typeof importScripts === "function") {
      root.cv = factory();
    } else {
      root.cv = factory();
    }
  })(commonjsGlobal, function() {
    var cv = function() {
      var _scriptDir = typeof document !== "undefined" && document.currentScript ? document.currentScript.src : void 0;
      if (typeof __filename !== "undefined") _scriptDir = _scriptDir || __filename;
      return function(cv2) {
        cv2 = cv2 || {};
        var Module2 = typeof cv2 !== "undefined" ? cv2 : {};
        var readyPromiseResolve, readyPromiseReject;
        Module2["ready"] = new Promise(function(resolve, reject) {
          readyPromiseResolve = resolve;
          readyPromiseReject = reject;
        });
        var moduleOverrides = {};
        var key;
        for (key in Module2) {
          if (Module2.hasOwnProperty(key)) {
            moduleOverrides[key] = Module2[key];
          }
        }
        var thisProgram = "./this.program";
        var ENVIRONMENT_IS_WEB = false;
        var ENVIRONMENT_IS_WORKER = false;
        var ENVIRONMENT_IS_NODE = false;
        var ENVIRONMENT_IS_SHELL = false;
        ENVIRONMENT_IS_WEB = typeof window === "object";
        ENVIRONMENT_IS_WORKER = typeof importScripts === "function";
        ENVIRONMENT_IS_NODE = typeof process === "object" && typeof process.versions === "object" && typeof process.versions.node === "string";
        ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;
        var scriptDirectory = "";
        function locateFile(path2) {
          if (Module2["locateFile"]) {
            return Module2["locateFile"](path2, scriptDirectory);
          }
          return scriptDirectory + path2;
        }
        var read_, readAsync, readBinary;
        var nodeFS;
        var nodePath;
        if (ENVIRONMENT_IS_NODE) {
          if (ENVIRONMENT_IS_WORKER) {
            scriptDirectory = path__default["default"].dirname(scriptDirectory) + "/";
          } else {
            scriptDirectory = __dirname + "/";
          }
          read_ = function shell_read(filename, binary) {
            var ret = tryParseAsDataURI(filename);
            if (ret) {
              return binary ? ret : ret.toString();
            }
            if (!nodeFS) nodeFS = fs__default["default"];
            if (!nodePath) nodePath = path__default["default"];
            filename = nodePath["normalize"](filename);
            return nodeFS["readFileSync"](filename, binary ? null : "utf8");
          };
          readBinary = function readBinary2(filename) {
            var ret = read_(filename, true);
            if (!ret.buffer) {
              ret = new Uint8Array(ret);
            }
            assert(ret.buffer);
            return ret;
          };
          if (process["argv"].length > 1) {
            thisProgram = process["argv"][1].replace(/\\/g, "/");
          }
          process["argv"].slice(2);
          process["on"]("uncaughtException", function(ex) {
            if (!(ex instanceof ExitStatus)) {
              throw ex;
            }
          });
          process["on"]("unhandledRejection", abort);
          Module2["inspect"] = function() {
            return "[Emscripten Module object]";
          };
        } else if (ENVIRONMENT_IS_SHELL) {
          if (typeof read != "undefined") {
            read_ = function shell_read(f) {
              var data = tryParseAsDataURI(f);
              if (data) {
                return intArrayToString(data);
              }
              return read(f);
            };
          }
          readBinary = function readBinary2(f) {
            var data;
            data = tryParseAsDataURI(f);
            if (data) {
              return data;
            }
            if (typeof readbuffer === "function") {
              return new Uint8Array(readbuffer(f));
            }
            data = read(f, "binary");
            assert(typeof data === "object");
            return data;
          };
          if (typeof scriptArgs != "undefined") {
            scriptArgs;
          }
          if (typeof print !== "undefined") {
            if (typeof console === "undefined") console = {};
            console.log = print;
            console.warn = console.error = typeof printErr !== "undefined" ? printErr : print;
          }
        } else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
          if (ENVIRONMENT_IS_WORKER) {
            scriptDirectory = self.location.href;
          } else if (document.currentScript) {
            scriptDirectory = document.currentScript.src;
          }
          if (_scriptDir) {
            scriptDirectory = _scriptDir;
          }
          if (scriptDirectory.indexOf("blob:") !== 0) {
            scriptDirectory = scriptDirectory.substr(0, scriptDirectory.lastIndexOf("/") + 1);
          } else {
            scriptDirectory = "";
          }
          {
            read_ = function shell_read(url) {
              try {
                var xhr = new XMLHttpRequest();
                xhr.open("GET", url, false);
                xhr.send(null);
                return xhr.responseText;
              } catch (err2) {
                var data = tryParseAsDataURI(url);
                if (data) {
                  return intArrayToString(data);
                }
                throw err2;
              }
            };
            if (ENVIRONMENT_IS_WORKER) {
              readBinary = function readBinary2(url) {
                try {
                  var xhr = new XMLHttpRequest();
                  xhr.open("GET", url, false);
                  xhr.responseType = "arraybuffer";
                  xhr.send(null);
                  return new Uint8Array(xhr.response);
                } catch (err2) {
                  var data = tryParseAsDataURI(url);
                  if (data) {
                    return data;
                  }
                  throw err2;
                }
              };
            }
            readAsync = function readAsync2(url, onload, onerror) {
              var xhr = new XMLHttpRequest();
              xhr.open("GET", url, true);
              xhr.responseType = "arraybuffer";
              xhr.onload = function xhr_onload() {
                if (xhr.status == 200 || xhr.status == 0 && xhr.response) {
                  onload(xhr.response);
                  return;
                }
                var data = tryParseAsDataURI(url);
                if (data) {
                  onload(data.buffer);
                  return;
                }
                onerror();
              };
              xhr.onerror = onerror;
              xhr.send(null);
            };
          }
        } else ;
        var out = Module2["print"] || console.log.bind(console);
        var err = Module2["printErr"] || console.warn.bind(console);
        for (key in moduleOverrides) {
          if (moduleOverrides.hasOwnProperty(key)) {
            Module2[key] = moduleOverrides[key];
          }
        }
        moduleOverrides = null;
        if (Module2["arguments"]) Module2["arguments"];
        if (Module2["thisProgram"]) thisProgram = Module2["thisProgram"];
        if (Module2["quit"]) Module2["quit"];
        var STACK_ALIGN = 16;
        function dynamicAlloc(size) {
          var ret = HEAP32[DYNAMICTOP_PTR >> 2];
          var end = ret + size + 15 & -16;
          HEAP32[DYNAMICTOP_PTR >> 2] = end;
          return ret;
        }
        function alignMemory(size, factor) {
          if (!factor) factor = STACK_ALIGN;
          return Math.ceil(size / factor) * factor;
        }
        function warnOnce(text) {
          if (!warnOnce.shown) warnOnce.shown = {};
          if (!warnOnce.shown[text]) {
            warnOnce.shown[text] = 1;
            err(text);
          }
        }
        var wasmBinary;
        if (Module2["wasmBinary"]) wasmBinary = Module2["wasmBinary"];
        if (Module2["noExitRuntime"]) Module2["noExitRuntime"];
        if (typeof WebAssembly !== "object") {
          abort("no native wasm support detected");
        }
        var wasmMemory;
        var wasmTable = new WebAssembly.Table({ "initial": 1631, "maximum": 1631 + 0, "element": "anyfunc" });
        var ABORT = false;
        function assert(condition, text) {
          if (!condition) {
            abort("Assertion failed: " + text);
          }
        }
        function getMemory(size) {
          if (!runtimeInitialized) return dynamicAlloc(size);
          return _malloc(size);
        }
        var UTF8Decoder = typeof TextDecoder !== "undefined" ? new TextDecoder("utf8") : void 0;
        function UTF8ArrayToString(heap, idx, maxBytesToRead) {
          var endIdx = idx + maxBytesToRead;
          var endPtr = idx;
          while (heap[endPtr] && !(endPtr >= endIdx)) ++endPtr;
          if (endPtr - idx > 16 && heap.subarray && UTF8Decoder) {
            return UTF8Decoder.decode(heap.subarray(idx, endPtr));
          } else {
            var str = "";
            while (idx < endPtr) {
              var u0 = heap[idx++];
              if (!(u0 & 128)) {
                str += String.fromCharCode(u0);
                continue;
              }
              var u1 = heap[idx++] & 63;
              if ((u0 & 224) == 192) {
                str += String.fromCharCode((u0 & 31) << 6 | u1);
                continue;
              }
              var u2 = heap[idx++] & 63;
              if ((u0 & 240) == 224) {
                u0 = (u0 & 15) << 12 | u1 << 6 | u2;
              } else {
                u0 = (u0 & 7) << 18 | u1 << 12 | u2 << 6 | heap[idx++] & 63;
              }
              if (u0 < 65536) {
                str += String.fromCharCode(u0);
              } else {
                var ch = u0 - 65536;
                str += String.fromCharCode(55296 | ch >> 10, 56320 | ch & 1023);
              }
            }
          }
          return str;
        }
        function UTF8ToString(ptr, maxBytesToRead) {
          return ptr ? UTF8ArrayToString(HEAPU8, ptr, maxBytesToRead) : "";
        }
        function stringToUTF8Array(str, heap, outIdx, maxBytesToWrite) {
          if (!(maxBytesToWrite > 0)) return 0;
          var startIdx = outIdx;
          var endIdx = outIdx + maxBytesToWrite - 1;
          for (var i = 0; i < str.length; ++i) {
            var u = str.charCodeAt(i);
            if (u >= 55296 && u <= 57343) {
              var u1 = str.charCodeAt(++i);
              u = 65536 + ((u & 1023) << 10) | u1 & 1023;
            }
            if (u <= 127) {
              if (outIdx >= endIdx) break;
              heap[outIdx++] = u;
            } else if (u <= 2047) {
              if (outIdx + 1 >= endIdx) break;
              heap[outIdx++] = 192 | u >> 6;
              heap[outIdx++] = 128 | u & 63;
            } else if (u <= 65535) {
              if (outIdx + 2 >= endIdx) break;
              heap[outIdx++] = 224 | u >> 12;
              heap[outIdx++] = 128 | u >> 6 & 63;
              heap[outIdx++] = 128 | u & 63;
            } else {
              if (outIdx + 3 >= endIdx) break;
              heap[outIdx++] = 240 | u >> 18;
              heap[outIdx++] = 128 | u >> 12 & 63;
              heap[outIdx++] = 128 | u >> 6 & 63;
              heap[outIdx++] = 128 | u & 63;
            }
          }
          heap[outIdx] = 0;
          return outIdx - startIdx;
        }
        function stringToUTF8(str, outPtr, maxBytesToWrite) {
          return stringToUTF8Array(str, HEAPU8, outPtr, maxBytesToWrite);
        }
        function lengthBytesUTF8(str) {
          var len = 0;
          for (var i = 0; i < str.length; ++i) {
            var u = str.charCodeAt(i);
            if (u >= 55296 && u <= 57343) u = 65536 + ((u & 1023) << 10) | str.charCodeAt(++i) & 1023;
            if (u <= 127) ++len;
            else if (u <= 2047) len += 2;
            else if (u <= 65535) len += 3;
            else len += 4;
          }
          return len;
        }
        var UTF16Decoder = typeof TextDecoder !== "undefined" ? new TextDecoder("utf-16le") : void 0;
        function UTF16ToString(ptr, maxBytesToRead) {
          var endPtr = ptr;
          var idx = endPtr >> 1;
          var maxIdx = idx + maxBytesToRead / 2;
          while (!(idx >= maxIdx) && HEAPU16[idx]) ++idx;
          endPtr = idx << 1;
          if (endPtr - ptr > 32 && UTF16Decoder) {
            return UTF16Decoder.decode(HEAPU8.subarray(ptr, endPtr));
          } else {
            var i = 0;
            var str = "";
            while (1) {
              var codeUnit = HEAP16[ptr + i * 2 >> 1];
              if (codeUnit == 0 || i == maxBytesToRead / 2) return str;
              ++i;
              str += String.fromCharCode(codeUnit);
            }
          }
        }
        function stringToUTF16(str, outPtr, maxBytesToWrite) {
          if (maxBytesToWrite === void 0) {
            maxBytesToWrite = 2147483647;
          }
          if (maxBytesToWrite < 2) return 0;
          maxBytesToWrite -= 2;
          var startPtr = outPtr;
          var numCharsToWrite = maxBytesToWrite < str.length * 2 ? maxBytesToWrite / 2 : str.length;
          for (var i = 0; i < numCharsToWrite; ++i) {
            var codeUnit = str.charCodeAt(i);
            HEAP16[outPtr >> 1] = codeUnit;
            outPtr += 2;
          }
          HEAP16[outPtr >> 1] = 0;
          return outPtr - startPtr;
        }
        function lengthBytesUTF16(str) {
          return str.length * 2;
        }
        function UTF32ToString(ptr, maxBytesToRead) {
          var i = 0;
          var str = "";
          while (!(i >= maxBytesToRead / 4)) {
            var utf32 = HEAP32[ptr + i * 4 >> 2];
            if (utf32 == 0) break;
            ++i;
            if (utf32 >= 65536) {
              var ch = utf32 - 65536;
              str += String.fromCharCode(55296 | ch >> 10, 56320 | ch & 1023);
            } else {
              str += String.fromCharCode(utf32);
            }
          }
          return str;
        }
        function stringToUTF32(str, outPtr, maxBytesToWrite) {
          if (maxBytesToWrite === void 0) {
            maxBytesToWrite = 2147483647;
          }
          if (maxBytesToWrite < 4) return 0;
          var startPtr = outPtr;
          var endPtr = startPtr + maxBytesToWrite - 4;
          for (var i = 0; i < str.length; ++i) {
            var codeUnit = str.charCodeAt(i);
            if (codeUnit >= 55296 && codeUnit <= 57343) {
              var trailSurrogate = str.charCodeAt(++i);
              codeUnit = 65536 + ((codeUnit & 1023) << 10) | trailSurrogate & 1023;
            }
            HEAP32[outPtr >> 2] = codeUnit;
            outPtr += 4;
            if (outPtr + 4 > endPtr) break;
          }
          HEAP32[outPtr >> 2] = 0;
          return outPtr - startPtr;
        }
        function lengthBytesUTF32(str) {
          var len = 0;
          for (var i = 0; i < str.length; ++i) {
            var codeUnit = str.charCodeAt(i);
            if (codeUnit >= 55296 && codeUnit <= 57343) ++i;
            len += 4;
          }
          return len;
        }
        function writeArrayToMemory(array, buffer2) {
          HEAP8.set(array, buffer2);
        }
        function writeAsciiToMemory(str, buffer2, dontAddNull) {
          for (var i = 0; i < str.length; ++i) {
            HEAP8[buffer2++ >> 0] = str.charCodeAt(i);
          }
          if (!dontAddNull) HEAP8[buffer2 >> 0] = 0;
        }
        var WASM_PAGE_SIZE = 65536;
        function alignUp(x, multiple) {
          if (x % multiple > 0) {
            x += multiple - x % multiple;
          }
          return x;
        }
        var buffer, HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;
        function updateGlobalBufferAndViews(buf) {
          buffer = buf;
          Module2["HEAP8"] = HEAP8 = new Int8Array(buf);
          Module2["HEAP16"] = HEAP16 = new Int16Array(buf);
          Module2["HEAP32"] = HEAP32 = new Int32Array(buf);
          Module2["HEAPU8"] = HEAPU8 = new Uint8Array(buf);
          Module2["HEAPU16"] = HEAPU16 = new Uint16Array(buf);
          Module2["HEAPU32"] = HEAPU32 = new Uint32Array(buf);
          Module2["HEAPF32"] = HEAPF32 = new Float32Array(buf);
          Module2["HEAPF64"] = HEAPF64 = new Float64Array(buf);
        }
        var DYNAMIC_BASE = 5870016, DYNAMICTOP_PTR = 626976;
        var INITIAL_INITIAL_MEMORY = Module2["INITIAL_MEMORY"] || 134217728;
        if (Module2["wasmMemory"]) {
          wasmMemory = Module2["wasmMemory"];
        } else {
          wasmMemory = new WebAssembly.Memory({ "initial": INITIAL_INITIAL_MEMORY / WASM_PAGE_SIZE, "maximum": 1073741824 / WASM_PAGE_SIZE });
        }
        if (wasmMemory) {
          buffer = wasmMemory.buffer;
        }
        INITIAL_INITIAL_MEMORY = buffer.byteLength;
        updateGlobalBufferAndViews(buffer);
        HEAP32[DYNAMICTOP_PTR >> 2] = DYNAMIC_BASE;
        function callRuntimeCallbacks(callbacks) {
          while (callbacks.length > 0) {
            var callback = callbacks.shift();
            if (typeof callback == "function") {
              callback(Module2);
              continue;
            }
            var func = callback.func;
            if (typeof func === "number") {
              if (callback.arg === void 0) {
                Module2["dynCall_v"](func);
              } else {
                Module2["dynCall_vi"](func, callback.arg);
              }
            } else {
              func(callback.arg === void 0 ? null : callback.arg);
            }
          }
        }
        var __ATPRERUN__ = [];
        var __ATINIT__ = [];
        var __ATMAIN__ = [];
        var __ATPOSTRUN__ = [];
        var runtimeInitialized = false;
        function preRun() {
          if (Module2["preRun"]) {
            if (typeof Module2["preRun"] == "function") Module2["preRun"] = [Module2["preRun"]];
            while (Module2["preRun"].length) {
              addOnPreRun(Module2["preRun"].shift());
            }
          }
          callRuntimeCallbacks(__ATPRERUN__);
        }
        function initRuntime() {
          runtimeInitialized = true;
          if (!Module2["noFSInit"] && !FS.init.initialized) FS.init();
          callRuntimeCallbacks(__ATINIT__);
        }
        function preMain() {
          FS.ignorePermissions = false;
          callRuntimeCallbacks(__ATMAIN__);
        }
        function postRun() {
          if (Module2["postRun"]) {
            if (typeof Module2["postRun"] == "function") Module2["postRun"] = [Module2["postRun"]];
            while (Module2["postRun"].length) {
              addOnPostRun(Module2["postRun"].shift());
            }
          }
          callRuntimeCallbacks(__ATPOSTRUN__);
        }
        function addOnPreRun(cb) {
          __ATPRERUN__.unshift(cb);
        }
        function addOnPostRun(cb) {
          __ATPOSTRUN__.unshift(cb);
        }
        var Math_abs = Math.abs;
        var Math_ceil = Math.ceil;
        var Math_floor = Math.floor;
        var Math_min = Math.min;
        var runDependencies = 0;
        var dependenciesFulfilled = null;
        function getUniqueRunDependency(id) {
          return id;
        }
        function addRunDependency(id) {
          runDependencies++;
          if (Module2["monitorRunDependencies"]) {
            Module2["monitorRunDependencies"](runDependencies);
          }
        }
        function removeRunDependency(id) {
          runDependencies--;
          if (Module2["monitorRunDependencies"]) {
            Module2["monitorRunDependencies"](runDependencies);
          }
          if (runDependencies == 0) {
            if (dependenciesFulfilled) {
              var callback = dependenciesFulfilled;
              dependenciesFulfilled = null;
              callback();
            }
          }
        }
        Module2["preloadedImages"] = {};
        Module2["preloadedAudios"] = {};
        function abort(what) {
          if (Module2["onAbort"]) {
            Module2["onAbort"](what);
          }
          what += "";
          err(what);
          ABORT = true;
          what = "abort(" + what + "). Build with -s ASSERTIONS=1 for more info.";
          var e = new WebAssembly.RuntimeError(what);
          readyPromiseReject(e);
          throw e;
        }
        function hasPrefix(str, prefix) {
          return String.prototype.startsWith ? str.startsWith(prefix) : str.indexOf(prefix) === 0;
        }
        var dataURIPrefix = "data:application/octet-stream;base64,";
        function isDataURI(filename) {
          return hasPrefix(filename, dataURIPrefix);
        }
        var fileURIPrefix = "file://";
        function isFileURI(filename) {
          return hasPrefix(filename, fileURIPrefix);
        }
        var wasmBinaryFile = "data:application/octet-stream;base64,";
        if (!isDataURI(wasmBinaryFile)) {
          wasmBinaryFile = locateFile(wasmBinaryFile);
        }
        function getBinary() {
          try {
            if (wasmBinary) {
              return new Uint8Array(wasmBinary);
            }
            var binary = tryParseAsDataURI(wasmBinaryFile);
            if (binary) {
              return binary;
            }
            if (readBinary) {
              return readBinary(wasmBinaryFile);
            } else {
              throw "both async and sync fetching of the wasm failed";
            }
          } catch (err2) {
            abort(err2);
          }
        }
        function getBinaryPromise() {
          if (!wasmBinary && (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) && typeof fetch === "function" && !isFileURI(wasmBinaryFile)) {
            return fetch(wasmBinaryFile, { credentials: "same-origin" }).then(function(response) {
              if (!response["ok"]) {
                throw "failed to load wasm binary file at '" + wasmBinaryFile + "'";
              }
              return response["arrayBuffer"]();
            }).catch(function() {
              return getBinary();
            });
          }
          return new Promise(function(resolve, reject) {
            resolve(getBinary());
          });
        }
        function createWasm() {
          var info = { "env": asmLibraryArg, "wasi_snapshot_preview1": asmLibraryArg };
          function receiveInstance(instance, module3) {
            var exports4 = instance.exports;
            Module2["asm"] = exports4;
            removeRunDependency();
          }
          addRunDependency();
          function receiveInstantiatedSource(output) {
            receiveInstance(output["instance"]);
          }
          function instantiateArrayBuffer(receiver) {
            return getBinaryPromise().then(function(binary) {
              return WebAssembly.instantiate(binary, info);
            }).then(receiver, function(reason) {
              err("failed to asynchronously prepare wasm: " + reason);
              abort(reason);
            });
          }
          function instantiateAsync() {
            if (!wasmBinary && typeof WebAssembly.instantiateStreaming === "function" && !isDataURI(wasmBinaryFile) && !isFileURI(wasmBinaryFile) && typeof fetch === "function") {
              fetch(wasmBinaryFile, { credentials: "same-origin" }).then(function(response) {
                var result = WebAssembly.instantiateStreaming(response, info);
                return result.then(receiveInstantiatedSource, function(reason) {
                  err("wasm streaming compile failed: " + reason);
                  err("falling back to ArrayBuffer instantiation");
                  return instantiateArrayBuffer(receiveInstantiatedSource);
                });
              });
            } else {
              return instantiateArrayBuffer(receiveInstantiatedSource);
            }
          }
          if (Module2["instantiateWasm"]) {
            try {
              var exports3 = Module2["instantiateWasm"](info, receiveInstance);
              return exports3;
            } catch (e) {
              err("Module.instantiateWasm callback failed with error: " + e);
              return false;
            }
          }
          instantiateAsync();
          return {};
        }
        var tempDouble;
        var tempI64;
        __ATINIT__.push({ func: function() {
          ___wasm_call_ctors();
        } });
        function _emscripten_set_main_loop_timing(mode, value) {
          Browser.mainLoop.timingMode = mode;
          Browser.mainLoop.timingValue = value;
          if (!Browser.mainLoop.func) {
            return 1;
          }
          if (mode == 0) {
            Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_setTimeout() {
              var timeUntilNextTick = Math.max(0, Browser.mainLoop.tickStartTime + value - _emscripten_get_now()) | 0;
              setTimeout(Browser.mainLoop.runner, timeUntilNextTick);
            };
            Browser.mainLoop.method = "timeout";
          } else if (mode == 1) {
            Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_rAF() {
              Browser.requestAnimationFrame(Browser.mainLoop.runner);
            };
            Browser.mainLoop.method = "rAF";
          } else if (mode == 2) {
            if (typeof setImmediate === "undefined") {
              var setImmediates = [];
              var emscriptenMainLoopMessageId = "setimmediate";
              var Browser_setImmediate_messageHandler = function(event) {
                if (event.data === emscriptenMainLoopMessageId || event.data.target === emscriptenMainLoopMessageId) {
                  event.stopPropagation();
                  setImmediates.shift()();
                }
              };
              addEventListener("message", Browser_setImmediate_messageHandler, true);
              setImmediate = function Browser_emulated_setImmediate(func) {
                setImmediates.push(func);
                if (ENVIRONMENT_IS_WORKER) {
                  if (Module2["setImmediates"] === void 0) Module2["setImmediates"] = [];
                  Module2["setImmediates"].push(func);
                  postMessage({ target: emscriptenMainLoopMessageId });
                } else postMessage(emscriptenMainLoopMessageId, "*");
              };
            }
            Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_setImmediate() {
              setImmediate(Browser.mainLoop.runner);
            };
            Browser.mainLoop.method = "immediate";
          }
          return 0;
        }
        var _emscripten_get_now;
        if (ENVIRONMENT_IS_NODE) {
          _emscripten_get_now = function() {
            var t = process["hrtime"]();
            return t[0] * 1e3 + t[1] / 1e6;
          };
        } else if (typeof dateNow !== "undefined") {
          _emscripten_get_now = dateNow;
        } else _emscripten_get_now = function() {
          return performance.now();
        };
        function _emscripten_set_main_loop(func, fps, simulateInfiniteLoop, arg, noSetTiming) {
          assert(!Browser.mainLoop.func, "emscripten_set_main_loop: there can only be one main loop function at once: call emscripten_cancel_main_loop to cancel the previous one before setting a new one with different parameters.");
          Browser.mainLoop.func = func;
          Browser.mainLoop.arg = arg;
          var browserIterationFunc;
          if (typeof arg !== "undefined") {
            browserIterationFunc = function() {
              Module2["dynCall_vi"](func, arg);
            };
          } else {
            browserIterationFunc = function() {
              Module2["dynCall_v"](func);
            };
          }
          var thisMainLoopId = Browser.mainLoop.currentlyRunningMainloop;
          Browser.mainLoop.runner = function Browser_mainLoop_runner() {
            if (ABORT) return;
            if (Browser.mainLoop.queue.length > 0) {
              var start = Date.now();
              var blocker = Browser.mainLoop.queue.shift();
              blocker.func(blocker.arg);
              if (Browser.mainLoop.remainingBlockers) {
                var remaining = Browser.mainLoop.remainingBlockers;
                var next = remaining % 1 == 0 ? remaining - 1 : Math.floor(remaining);
                if (blocker.counted) {
                  Browser.mainLoop.remainingBlockers = next;
                } else {
                  next = next + 0.5;
                  Browser.mainLoop.remainingBlockers = (8 * remaining + next) / 9;
                }
              }
              console.log('main loop blocker "' + blocker.name + '" took ' + (Date.now() - start) + " ms");
              Browser.mainLoop.updateStatus();
              if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
              setTimeout(Browser.mainLoop.runner, 0);
              return;
            }
            if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
            Browser.mainLoop.currentFrameNumber = Browser.mainLoop.currentFrameNumber + 1 | 0;
            if (Browser.mainLoop.timingMode == 1 && Browser.mainLoop.timingValue > 1 && Browser.mainLoop.currentFrameNumber % Browser.mainLoop.timingValue != 0) {
              Browser.mainLoop.scheduler();
              return;
            } else if (Browser.mainLoop.timingMode == 0) {
              Browser.mainLoop.tickStartTime = _emscripten_get_now();
            }
            Browser.mainLoop.runIter(browserIterationFunc);
            if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
            if (typeof SDL === "object" && SDL.audio && SDL.audio.queueNewAudioData) SDL.audio.queueNewAudioData();
            Browser.mainLoop.scheduler();
          };
          if (!noSetTiming) {
            if (fps && fps > 0) _emscripten_set_main_loop_timing(0, 1e3 / fps);
            else _emscripten_set_main_loop_timing(1, 1);
            Browser.mainLoop.scheduler();
          }
          if (simulateInfiniteLoop) {
            throw "unwind";
          }
        }
        var Browser = { mainLoop: { scheduler: null, method: "", currentlyRunningMainloop: 0, func: null, arg: 0, timingMode: 0, timingValue: 0, currentFrameNumber: 0, queue: [], pause: function() {
          Browser.mainLoop.scheduler = null;
          Browser.mainLoop.currentlyRunningMainloop++;
        }, resume: function() {
          Browser.mainLoop.currentlyRunningMainloop++;
          var timingMode = Browser.mainLoop.timingMode;
          var timingValue = Browser.mainLoop.timingValue;
          var func = Browser.mainLoop.func;
          Browser.mainLoop.func = null;
          _emscripten_set_main_loop(func, 0, false, Browser.mainLoop.arg, true);
          _emscripten_set_main_loop_timing(timingMode, timingValue);
          Browser.mainLoop.scheduler();
        }, updateStatus: function() {
          if (Module2["setStatus"]) {
            var message = Module2["statusMessage"] || "Please wait...";
            var remaining = Browser.mainLoop.remainingBlockers;
            var expected = Browser.mainLoop.expectedBlockers;
            if (remaining) {
              if (remaining < expected) {
                Module2["setStatus"](message + " (" + (expected - remaining) + "/" + expected + ")");
              } else {
                Module2["setStatus"](message);
              }
            } else {
              Module2["setStatus"]("");
            }
          }
        }, runIter: function(func) {
          if (ABORT) return;
          if (Module2["preMainLoop"]) {
            var preRet = Module2["preMainLoop"]();
            if (preRet === false) {
              return;
            }
          }
          try {
            func();
          } catch (e) {
            if (e instanceof ExitStatus) {
              return;
            } else {
              if (e && typeof e === "object" && e.stack) err("exception thrown: " + [e, e.stack]);
              throw e;
            }
          }
          if (Module2["postMainLoop"]) Module2["postMainLoop"]();
        } }, isFullscreen: false, pointerLock: false, moduleContextCreatedCallbacks: [], workers: [], init: function() {
          if (!Module2["preloadPlugins"]) Module2["preloadPlugins"] = [];
          if (Browser.initted) return;
          Browser.initted = true;
          try {
            new Blob();
            Browser.hasBlobConstructor = true;
          } catch (e) {
            Browser.hasBlobConstructor = false;
            console.log("warning: no blob constructor, cannot create blobs with mimetypes");
          }
          Browser.BlobBuilder = typeof MozBlobBuilder != "undefined" ? MozBlobBuilder : typeof WebKitBlobBuilder != "undefined" ? WebKitBlobBuilder : !Browser.hasBlobConstructor ? console.log("warning: no BlobBuilder") : null;
          Browser.URLObject = typeof window != "undefined" ? window.URL ? window.URL : window.webkitURL : void 0;
          if (!Module2.noImageDecoding && typeof Browser.URLObject === "undefined") {
            console.log("warning: Browser does not support creating object URLs. Built-in browser image decoding will not be available.");
            Module2.noImageDecoding = true;
          }
          var imagePlugin = {};
          imagePlugin["canHandle"] = function imagePlugin_canHandle(name) {
            return !Module2.noImageDecoding && /\.(jpg|jpeg|png|bmp)$/i.test(name);
          };
          imagePlugin["handle"] = function imagePlugin_handle(byteArray, name, onload, onerror) {
            var b = null;
            if (Browser.hasBlobConstructor) {
              try {
                b = new Blob([byteArray], { type: Browser.getMimetype(name) });
                if (b.size !== byteArray.length) {
                  b = new Blob([new Uint8Array(byteArray).buffer], { type: Browser.getMimetype(name) });
                }
              } catch (e) {
                warnOnce("Blob constructor present but fails: " + e + "; falling back to blob builder");
              }
            }
            if (!b) {
              var bb = new Browser.BlobBuilder();
              bb.append(new Uint8Array(byteArray).buffer);
              b = bb.getBlob();
            }
            var url = Browser.URLObject.createObjectURL(b);
            var img = new Image();
            img.onload = function img_onload() {
              assert(img.complete, "Image " + name + " could not be decoded");
              var canvas2 = document.createElement("canvas");
              canvas2.width = img.width;
              canvas2.height = img.height;
              var ctx = canvas2.getContext("2d");
              ctx.drawImage(img, 0, 0);
              Module2["preloadedImages"][name] = canvas2;
              Browser.URLObject.revokeObjectURL(url);
              if (onload) onload(byteArray);
            };
            img.onerror = function img_onerror(event) {
              console.log("Image " + url + " could not be decoded");
              if (onerror) onerror();
            };
            img.src = url;
          };
          Module2["preloadPlugins"].push(imagePlugin);
          var audioPlugin = {};
          audioPlugin["canHandle"] = function audioPlugin_canHandle(name) {
            return !Module2.noAudioDecoding && name.substr(-4) in { ".ogg": 1, ".wav": 1, ".mp3": 1 };
          };
          audioPlugin["handle"] = function audioPlugin_handle(byteArray, name, onload, onerror) {
            var done = false;
            function finish(audio2) {
              if (done) return;
              done = true;
              Module2["preloadedAudios"][name] = audio2;
              if (onload) onload(byteArray);
            }
            function fail() {
              if (done) return;
              done = true;
              Module2["preloadedAudios"][name] = new Audio();
              if (onerror) onerror();
            }
            if (Browser.hasBlobConstructor) {
              try {
                var b = new Blob([byteArray], { type: Browser.getMimetype(name) });
              } catch (e) {
                return fail();
              }
              var url = Browser.URLObject.createObjectURL(b);
              var audio = new Audio();
              audio.addEventListener("canplaythrough", function() {
                finish(audio);
              }, false);
              audio.onerror = function audio_onerror(event) {
                if (done) return;
                console.log("warning: browser could not fully decode audio " + name + ", trying slower base64 approach");
                function encode64(data) {
                  var BASE = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
                  var PAD = "=";
                  var ret = "";
                  var leftchar = 0;
                  var leftbits = 0;
                  for (var i = 0; i < data.length; i++) {
                    leftchar = leftchar << 8 | data[i];
                    leftbits += 8;
                    while (leftbits >= 6) {
                      var curr = leftchar >> leftbits - 6 & 63;
                      leftbits -= 6;
                      ret += BASE[curr];
                    }
                  }
                  if (leftbits == 2) {
                    ret += BASE[(leftchar & 3) << 4];
                    ret += PAD + PAD;
                  } else if (leftbits == 4) {
                    ret += BASE[(leftchar & 15) << 2];
                    ret += PAD;
                  }
                  return ret;
                }
                audio.src = "data:audio/x-" + name.substr(-3) + ";base64," + encode64(byteArray);
                finish(audio);
              };
              audio.src = url;
              Browser.safeSetTimeout(function() {
                finish(audio);
              }, 1e4);
            } else {
              return fail();
            }
          };
          Module2["preloadPlugins"].push(audioPlugin);
          function pointerLockChange() {
            Browser.pointerLock = document["pointerLockElement"] === Module2["canvas"] || document["mozPointerLockElement"] === Module2["canvas"] || document["webkitPointerLockElement"] === Module2["canvas"] || document["msPointerLockElement"] === Module2["canvas"];
          }
          var canvas = Module2["canvas"];
          if (canvas) {
            canvas.requestPointerLock = canvas["requestPointerLock"] || canvas["mozRequestPointerLock"] || canvas["webkitRequestPointerLock"] || canvas["msRequestPointerLock"] || function() {
            };
            canvas.exitPointerLock = document["exitPointerLock"] || document["mozExitPointerLock"] || document["webkitExitPointerLock"] || document["msExitPointerLock"] || function() {
            };
            canvas.exitPointerLock = canvas.exitPointerLock.bind(document);
            document.addEventListener("pointerlockchange", pointerLockChange, false);
            document.addEventListener("mozpointerlockchange", pointerLockChange, false);
            document.addEventListener("webkitpointerlockchange", pointerLockChange, false);
            document.addEventListener("mspointerlockchange", pointerLockChange, false);
            if (Module2["elementPointerLock"]) {
              canvas.addEventListener("click", function(ev) {
                if (!Browser.pointerLock && Module2["canvas"].requestPointerLock) {
                  Module2["canvas"].requestPointerLock();
                  ev.preventDefault();
                }
              }, false);
            }
          }
        }, createContext: function(canvas, useWebGL, setInModule, webGLContextAttributes) {
          if (useWebGL && Module2.ctx && canvas == Module2.canvas) return Module2.ctx;
          var ctx;
          var contextHandle;
          if (useWebGL) {
            var contextAttributes = { antialias: false, alpha: false, majorVersion: 1 };
            if (webGLContextAttributes) {
              for (var attribute in webGLContextAttributes) {
                contextAttributes[attribute] = webGLContextAttributes[attribute];
              }
            }
            if (typeof GL !== "undefined") {
              contextHandle = GL.createContext(canvas, contextAttributes);
              if (contextHandle) {
                ctx = GL.getContext(contextHandle).GLctx;
              }
            }
          } else {
            ctx = canvas.getContext("2d");
          }
          if (!ctx) return null;
          if (setInModule) {
            if (!useWebGL) assert(typeof GLctx === "undefined", "cannot set in module if GLctx is used, but we are a non-GL context that would replace it");
            Module2.ctx = ctx;
            if (useWebGL) GL.makeContextCurrent(contextHandle);
            Module2.useWebGL = useWebGL;
            Browser.moduleContextCreatedCallbacks.forEach(function(callback) {
              callback();
            });
            Browser.init();
          }
          return ctx;
        }, destroyContext: function(canvas, useWebGL, setInModule) {
        }, fullscreenHandlersInstalled: false, lockPointer: void 0, resizeCanvas: void 0, requestFullscreen: function(lockPointer, resizeCanvas) {
          Browser.lockPointer = lockPointer;
          Browser.resizeCanvas = resizeCanvas;
          if (typeof Browser.lockPointer === "undefined") Browser.lockPointer = true;
          if (typeof Browser.resizeCanvas === "undefined") Browser.resizeCanvas = false;
          var canvas = Module2["canvas"];
          function fullscreenChange() {
            Browser.isFullscreen = false;
            var canvasContainer2 = canvas.parentNode;
            if ((document["fullscreenElement"] || document["mozFullScreenElement"] || document["msFullscreenElement"] || document["webkitFullscreenElement"] || document["webkitCurrentFullScreenElement"]) === canvasContainer2) {
              canvas.exitFullscreen = Browser.exitFullscreen;
              if (Browser.lockPointer) canvas.requestPointerLock();
              Browser.isFullscreen = true;
              if (Browser.resizeCanvas) {
                Browser.setFullscreenCanvasSize();
              } else {
                Browser.updateCanvasDimensions(canvas);
              }
            } else {
              canvasContainer2.parentNode.insertBefore(canvas, canvasContainer2);
              canvasContainer2.parentNode.removeChild(canvasContainer2);
              if (Browser.resizeCanvas) {
                Browser.setWindowedCanvasSize();
              } else {
                Browser.updateCanvasDimensions(canvas);
              }
            }
            if (Module2["onFullScreen"]) Module2["onFullScreen"](Browser.isFullscreen);
            if (Module2["onFullscreen"]) Module2["onFullscreen"](Browser.isFullscreen);
          }
          if (!Browser.fullscreenHandlersInstalled) {
            Browser.fullscreenHandlersInstalled = true;
            document.addEventListener("fullscreenchange", fullscreenChange, false);
            document.addEventListener("mozfullscreenchange", fullscreenChange, false);
            document.addEventListener("webkitfullscreenchange", fullscreenChange, false);
            document.addEventListener("MSFullscreenChange", fullscreenChange, false);
          }
          var canvasContainer = document.createElement("div");
          canvas.parentNode.insertBefore(canvasContainer, canvas);
          canvasContainer.appendChild(canvas);
          canvasContainer.requestFullscreen = canvasContainer["requestFullscreen"] || canvasContainer["mozRequestFullScreen"] || canvasContainer["msRequestFullscreen"] || (canvasContainer["webkitRequestFullscreen"] ? function() {
            canvasContainer["webkitRequestFullscreen"](Element["ALLOW_KEYBOARD_INPUT"]);
          } : null) || (canvasContainer["webkitRequestFullScreen"] ? function() {
            canvasContainer["webkitRequestFullScreen"](Element["ALLOW_KEYBOARD_INPUT"]);
          } : null);
          canvasContainer.requestFullscreen();
        }, exitFullscreen: function() {
          if (!Browser.isFullscreen) {
            return false;
          }
          var CFS = document["exitFullscreen"] || document["cancelFullScreen"] || document["mozCancelFullScreen"] || document["msExitFullscreen"] || document["webkitCancelFullScreen"] || function() {
          };
          CFS.apply(document, []);
          return true;
        }, nextRAF: 0, fakeRequestAnimationFrame: function(func) {
          var now = Date.now();
          if (Browser.nextRAF === 0) {
            Browser.nextRAF = now + 1e3 / 60;
          } else {
            while (now + 2 >= Browser.nextRAF) {
              Browser.nextRAF += 1e3 / 60;
            }
          }
          var delay = Math.max(Browser.nextRAF - now, 0);
          setTimeout(func, delay);
        }, requestAnimationFrame: function(func) {
          if (typeof requestAnimationFrame === "function") {
            requestAnimationFrame(func);
            return;
          }
          var RAF = Browser.fakeRequestAnimationFrame;
          RAF(func);
        }, safeCallback: function(func) {
          return function() {
            if (!ABORT) return func.apply(null, arguments);
          };
        }, allowAsyncCallbacks: true, queuedAsyncCallbacks: [], pauseAsyncCallbacks: function() {
          Browser.allowAsyncCallbacks = false;
        }, resumeAsyncCallbacks: function() {
          Browser.allowAsyncCallbacks = true;
          if (Browser.queuedAsyncCallbacks.length > 0) {
            var callbacks = Browser.queuedAsyncCallbacks;
            Browser.queuedAsyncCallbacks = [];
            callbacks.forEach(function(func) {
              func();
            });
          }
        }, safeRequestAnimationFrame: function(func) {
          return Browser.requestAnimationFrame(function() {
            if (ABORT) return;
            if (Browser.allowAsyncCallbacks) {
              func();
            } else {
              Browser.queuedAsyncCallbacks.push(func);
            }
          });
        }, safeSetTimeout: function(func, timeout) {
          return setTimeout(function() {
            if (ABORT) return;
            if (Browser.allowAsyncCallbacks) {
              func();
            } else {
              Browser.queuedAsyncCallbacks.push(func);
            }
          }, timeout);
        }, safeSetInterval: function(func, timeout) {
          return setInterval(function() {
            if (ABORT) return;
            if (Browser.allowAsyncCallbacks) {
              func();
            }
          }, timeout);
        }, getMimetype: function(name) {
          return { "jpg": "image/jpeg", "jpeg": "image/jpeg", "png": "image/png", "bmp": "image/bmp", "ogg": "audio/ogg", "wav": "audio/wav", "mp3": "audio/mpeg" }[name.substr(name.lastIndexOf(".") + 1)];
        }, getUserMedia: function(func) {
          if (!window.getUserMedia) {
            window.getUserMedia = navigator["getUserMedia"] || navigator["mozGetUserMedia"];
          }
          window.getUserMedia(func);
        }, getMovementX: function(event) {
          return event["movementX"] || event["mozMovementX"] || event["webkitMovementX"] || 0;
        }, getMovementY: function(event) {
          return event["movementY"] || event["mozMovementY"] || event["webkitMovementY"] || 0;
        }, getMouseWheelDelta: function(event) {
          var delta = 0;
          switch (event.type) {
            case "DOMMouseScroll":
              delta = event.detail / 3;
              break;
            case "mousewheel":
              delta = event.wheelDelta / 120;
              break;
            case "wheel":
              delta = event.deltaY;
              switch (event.deltaMode) {
                case 0:
                  delta /= 100;
                  break;
                case 1:
                  delta /= 3;
                  break;
                case 2:
                  delta *= 80;
                  break;
                default:
                  throw "unrecognized mouse wheel delta mode: " + event.deltaMode;
              }
              break;
            default:
              throw "unrecognized mouse wheel event: " + event.type;
          }
          return delta;
        }, mouseX: 0, mouseY: 0, mouseMovementX: 0, mouseMovementY: 0, touches: {}, lastTouches: {}, calculateMouseEvent: function(event) {
          if (Browser.pointerLock) {
            if (event.type != "mousemove" && "mozMovementX" in event) {
              Browser.mouseMovementX = Browser.mouseMovementY = 0;
            } else {
              Browser.mouseMovementX = Browser.getMovementX(event);
              Browser.mouseMovementY = Browser.getMovementY(event);
            }
            if (typeof SDL != "undefined") {
              Browser.mouseX = SDL.mouseX + Browser.mouseMovementX;
              Browser.mouseY = SDL.mouseY + Browser.mouseMovementY;
            } else {
              Browser.mouseX += Browser.mouseMovementX;
              Browser.mouseY += Browser.mouseMovementY;
            }
          } else {
            var rect = Module2["canvas"].getBoundingClientRect();
            var cw = Module2["canvas"].width;
            var ch = Module2["canvas"].height;
            var scrollX = typeof window.scrollX !== "undefined" ? window.scrollX : window.pageXOffset;
            var scrollY = typeof window.scrollY !== "undefined" ? window.scrollY : window.pageYOffset;
            if (event.type === "touchstart" || event.type === "touchend" || event.type === "touchmove") {
              var touch = event.touch;
              if (touch === void 0) {
                return;
              }
              var adjustedX = touch.pageX - (scrollX + rect.left);
              var adjustedY = touch.pageY - (scrollY + rect.top);
              adjustedX = adjustedX * (cw / rect.width);
              adjustedY = adjustedY * (ch / rect.height);
              var coords = { x: adjustedX, y: adjustedY };
              if (event.type === "touchstart") {
                Browser.lastTouches[touch.identifier] = coords;
                Browser.touches[touch.identifier] = coords;
              } else if (event.type === "touchend" || event.type === "touchmove") {
                var last = Browser.touches[touch.identifier];
                if (!last) last = coords;
                Browser.lastTouches[touch.identifier] = last;
                Browser.touches[touch.identifier] = coords;
              }
              return;
            }
            var x = event.pageX - (scrollX + rect.left);
            var y = event.pageY - (scrollY + rect.top);
            x = x * (cw / rect.width);
            y = y * (ch / rect.height);
            Browser.mouseMovementX = x - Browser.mouseX;
            Browser.mouseMovementY = y - Browser.mouseY;
            Browser.mouseX = x;
            Browser.mouseY = y;
          }
        }, asyncLoad: function(url, onload, onerror, noRunDep) {
          var dep = !noRunDep ? getUniqueRunDependency("al " + url) : "";
          readAsync(url, function(arrayBuffer) {
            assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
            onload(new Uint8Array(arrayBuffer));
            if (dep) removeRunDependency();
          }, function(event) {
            if (onerror) {
              onerror();
            } else {
              throw 'Loading data file "' + url + '" failed.';
            }
          });
          if (dep) addRunDependency();
        }, resizeListeners: [], updateResizeListeners: function() {
          var canvas = Module2["canvas"];
          Browser.resizeListeners.forEach(function(listener) {
            listener(canvas.width, canvas.height);
          });
        }, setCanvasSize: function(width, height, noUpdates) {
          var canvas = Module2["canvas"];
          Browser.updateCanvasDimensions(canvas, width, height);
          if (!noUpdates) Browser.updateResizeListeners();
        }, windowedWidth: 0, windowedHeight: 0, setFullscreenCanvasSize: function() {
          if (typeof SDL != "undefined") {
            var flags = HEAPU32[SDL.screen >> 2];
            flags = flags | 8388608;
            HEAP32[SDL.screen >> 2] = flags;
          }
          Browser.updateCanvasDimensions(Module2["canvas"]);
          Browser.updateResizeListeners();
        }, setWindowedCanvasSize: function() {
          if (typeof SDL != "undefined") {
            var flags = HEAPU32[SDL.screen >> 2];
            flags = flags & ~8388608;
            HEAP32[SDL.screen >> 2] = flags;
          }
          Browser.updateCanvasDimensions(Module2["canvas"]);
          Browser.updateResizeListeners();
        }, updateCanvasDimensions: function(canvas, wNative, hNative) {
          if (wNative && hNative) {
            canvas.widthNative = wNative;
            canvas.heightNative = hNative;
          } else {
            wNative = canvas.widthNative;
            hNative = canvas.heightNative;
          }
          var w = wNative;
          var h = hNative;
          if (Module2["forcedAspectRatio"] && Module2["forcedAspectRatio"] > 0) {
            if (w / h < Module2["forcedAspectRatio"]) {
              w = Math.round(h * Module2["forcedAspectRatio"]);
            } else {
              h = Math.round(w / Module2["forcedAspectRatio"]);
            }
          }
          if ((document["fullscreenElement"] || document["mozFullScreenElement"] || document["msFullscreenElement"] || document["webkitFullscreenElement"] || document["webkitCurrentFullScreenElement"]) === canvas.parentNode && typeof screen != "undefined") {
            var factor = Math.min(screen.width / w, screen.height / h);
            w = Math.round(w * factor);
            h = Math.round(h * factor);
          }
          if (Browser.resizeCanvas) {
            if (canvas.width != w) canvas.width = w;
            if (canvas.height != h) canvas.height = h;
            if (typeof canvas.style != "undefined") {
              canvas.style.removeProperty("width");
              canvas.style.removeProperty("height");
            }
          } else {
            if (canvas.width != wNative) canvas.width = wNative;
            if (canvas.height != hNative) canvas.height = hNative;
            if (typeof canvas.style != "undefined") {
              if (w != wNative || h != hNative) {
                canvas.style.setProperty("width", w + "px", "important");
                canvas.style.setProperty("height", h + "px", "important");
              } else {
                canvas.style.removeProperty("width");
                canvas.style.removeProperty("height");
              }
            }
          }
        }, wgetRequests: {}, nextWgetRequestHandle: 0, getNextWgetRequestHandle: function() {
          var handle = Browser.nextWgetRequestHandle;
          Browser.nextWgetRequestHandle++;
          return handle;
        } };
        function demangle(func) {
          demangle.recursionGuard = (demangle.recursionGuard | 0) + 1;
          if (demangle.recursionGuard > 1) return func;
          var __cxa_demangle_func = Module2["___cxa_demangle"] || Module2["__cxa_demangle"];
          assert(__cxa_demangle_func);
          var stackTop = stackSave();
          try {
            var s = func;
            if (s.startsWith("__Z")) s = s.substr(1);
            var len = lengthBytesUTF8(s) + 1;
            var buf = stackAlloc(len);
            stringToUTF8(s, buf, len);
            var status = stackAlloc(4);
            var ret = __cxa_demangle_func(buf, 0, 0, status);
            if (HEAP32[status >> 2] === 0 && ret) {
              return UTF8ToString(ret);
            }
          } catch (e) {
          } finally {
            _free(ret);
            stackRestore(stackTop);
            if (demangle.recursionGuard < 2) --demangle.recursionGuard;
          }
          return func;
        }
        function demangleAll(text) {
          var regex = /\b_Z[\w\d_]+/g;
          return text.replace(regex, function(x) {
            var y = demangle(x);
            return x === y ? x : y + " [" + x + "]";
          });
        }
        function jsStackTrace() {
          var err2 = new Error();
          if (!err2.stack) {
            try {
              throw new Error();
            } catch (e) {
              err2 = e;
            }
            if (!err2.stack) {
              return "(no stack trace available)";
            }
          }
          return err2.stack.toString();
        }
        function stackTrace() {
          var js = jsStackTrace();
          if (Module2["extraStackTrace"]) js += "\n" + Module2["extraStackTrace"]();
          return demangleAll(js);
        }
        function ___cxa_allocate_exception(size) {
          return _malloc(size);
        }
        function _atexit(func, arg) {
        }
        function ___cxa_atexit(a0, a1) {
          return _atexit();
        }
        function __ZSt18uncaught_exceptionv() {
          return __ZSt18uncaught_exceptionv.uncaught_exceptions > 0;
        }
        function ___cxa_throw(ptr, type, destructor) {
          if (!("uncaught_exception" in __ZSt18uncaught_exceptionv)) {
            __ZSt18uncaught_exceptionv.uncaught_exceptions = 1;
          } else {
            __ZSt18uncaught_exceptionv.uncaught_exceptions++;
          }
          throw ptr;
        }
        function setErrNo(value) {
          HEAP32[___errno_location() >> 2] = value;
          return value;
        }
        function ___map_file(pathname, size) {
          setErrNo(63);
          return -1;
        }
        var PATH = { splitPath: function(filename) {
          var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
          return splitPathRe.exec(filename).slice(1);
        }, normalizeArray: function(parts, allowAboveRoot) {
          var up = 0;
          for (var i = parts.length - 1; i >= 0; i--) {
            var last = parts[i];
            if (last === ".") {
              parts.splice(i, 1);
            } else if (last === "..") {
              parts.splice(i, 1);
              up++;
            } else if (up) {
              parts.splice(i, 1);
              up--;
            }
          }
          if (allowAboveRoot) {
            for (; up; up--) {
              parts.unshift("..");
            }
          }
          return parts;
        }, normalize: function(path2) {
          var isAbsolute = path2.charAt(0) === "/", trailingSlash = path2.substr(-1) === "/";
          path2 = PATH.normalizeArray(path2.split("/").filter(function(p) {
            return !!p;
          }), !isAbsolute).join("/");
          if (!path2 && !isAbsolute) {
            path2 = ".";
          }
          if (path2 && trailingSlash) {
            path2 += "/";
          }
          return (isAbsolute ? "/" : "") + path2;
        }, dirname: function(path2) {
          var result = PATH.splitPath(path2), root = result[0], dir = result[1];
          if (!root && !dir) {
            return ".";
          }
          if (dir) {
            dir = dir.substr(0, dir.length - 1);
          }
          return root + dir;
        }, basename: function(path2) {
          if (path2 === "/") return "/";
          var lastSlash = path2.lastIndexOf("/");
          if (lastSlash === -1) return path2;
          return path2.substr(lastSlash + 1);
        }, extname: function(path2) {
          return PATH.splitPath(path2)[3];
        }, join: function() {
          var paths = Array.prototype.slice.call(arguments, 0);
          return PATH.normalize(paths.join("/"));
        }, join2: function(l, r) {
          return PATH.normalize(l + "/" + r);
        } };
        var PATH_FS = { resolve: function() {
          var resolvedPath = "", resolvedAbsolute = false;
          for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
            var path2 = i >= 0 ? arguments[i] : FS.cwd();
            if (typeof path2 !== "string") {
              throw new TypeError("Arguments to path.resolve must be strings");
            } else if (!path2) {
              return "";
            }
            resolvedPath = path2 + "/" + resolvedPath;
            resolvedAbsolute = path2.charAt(0) === "/";
          }
          resolvedPath = PATH.normalizeArray(resolvedPath.split("/").filter(function(p) {
            return !!p;
          }), !resolvedAbsolute).join("/");
          return (resolvedAbsolute ? "/" : "") + resolvedPath || ".";
        }, relative: function(from, to) {
          from = PATH_FS.resolve(from).substr(1);
          to = PATH_FS.resolve(to).substr(1);
          function trim(arr) {
            var start = 0;
            for (; start < arr.length; start++) {
              if (arr[start] !== "") break;
            }
            var end = arr.length - 1;
            for (; end >= 0; end--) {
              if (arr[end] !== "") break;
            }
            if (start > end) return [];
            return arr.slice(start, end - start + 1);
          }
          var fromParts = trim(from.split("/"));
          var toParts = trim(to.split("/"));
          var length = Math.min(fromParts.length, toParts.length);
          var samePartsLength = length;
          for (var i = 0; i < length; i++) {
            if (fromParts[i] !== toParts[i]) {
              samePartsLength = i;
              break;
            }
          }
          var outputParts = [];
          for (var i = samePartsLength; i < fromParts.length; i++) {
            outputParts.push("..");
          }
          outputParts = outputParts.concat(toParts.slice(samePartsLength));
          return outputParts.join("/");
        } };
        var TTY = { ttys: [], init: function() {
        }, shutdown: function() {
        }, register: function(dev, ops) {
          TTY.ttys[dev] = { input: [], output: [], ops };
          FS.registerDevice(dev, TTY.stream_ops);
        }, stream_ops: { open: function(stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(43);
          }
          stream.tty = tty;
          stream.seekable = false;
        }, close: function(stream) {
          stream.tty.ops.flush(stream.tty);
        }, flush: function(stream) {
          stream.tty.ops.flush(stream.tty);
        }, read: function(stream, buffer2, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(60);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(29);
            }
            if (result === void 0 && bytesRead === 0) {
              throw new FS.ErrnoError(6);
            }
            if (result === null || result === void 0) break;
            bytesRead++;
            buffer2[offset + i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        }, write: function(stream, buffer2, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(60);
          }
          try {
            for (var i = 0; i < length; i++) {
              stream.tty.ops.put_char(stream.tty, buffer2[offset + i]);
            }
          } catch (e) {
            throw new FS.ErrnoError(29);
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        } }, default_tty_ops: { get_char: function(tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              var BUFSIZE = 256;
              var buf = Buffer.alloc ? Buffer.alloc(BUFSIZE) : new Buffer(BUFSIZE);
              var bytesRead = 0;
              try {
                bytesRead = nodeFS.readSync(process.stdin.fd, buf, 0, BUFSIZE, null);
              } catch (e) {
                if (e.toString().indexOf("EOF") != -1) bytesRead = 0;
                else throw e;
              }
              if (bytesRead > 0) {
                result = buf.slice(0, bytesRead).toString("utf-8");
              } else {
                result = null;
              }
            } else if (typeof window != "undefined" && typeof window.prompt == "function") {
              result = window.prompt("Input: ");
              if (result !== null) {
                result += "\n";
              }
            } else if (typeof readline == "function") {
              result = readline();
              if (result !== null) {
                result += "\n";
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        }, put_char: function(tty, val) {
          if (val === null || val === 10) {
            out(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val);
          }
        }, flush: function(tty) {
          if (tty.output && tty.output.length > 0) {
            out(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        } }, default_tty1_ops: { put_char: function(tty, val) {
          if (val === null || val === 10) {
            err(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val);
          }
        }, flush: function(tty) {
          if (tty.output && tty.output.length > 0) {
            err(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        } } };
        var MEMFS = { ops_table: null, mount: function(mount) {
          return MEMFS.createNode(null, "/", 16384 | 511, 0);
        }, createNode: function(parent, name, mode, dev) {
          if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
            throw new FS.ErrnoError(63);
          }
          if (!MEMFS.ops_table) {
            MEMFS.ops_table = { dir: { node: { getattr: MEMFS.node_ops.getattr, setattr: MEMFS.node_ops.setattr, lookup: MEMFS.node_ops.lookup, mknod: MEMFS.node_ops.mknod, rename: MEMFS.node_ops.rename, unlink: MEMFS.node_ops.unlink, rmdir: MEMFS.node_ops.rmdir, readdir: MEMFS.node_ops.readdir, symlink: MEMFS.node_ops.symlink }, stream: { llseek: MEMFS.stream_ops.llseek } }, file: { node: { getattr: MEMFS.node_ops.getattr, setattr: MEMFS.node_ops.setattr }, stream: { llseek: MEMFS.stream_ops.llseek, read: MEMFS.stream_ops.read, write: MEMFS.stream_ops.write, allocate: MEMFS.stream_ops.allocate, mmap: MEMFS.stream_ops.mmap, msync: MEMFS.stream_ops.msync } }, link: { node: { getattr: MEMFS.node_ops.getattr, setattr: MEMFS.node_ops.setattr, readlink: MEMFS.node_ops.readlink }, stream: {} }, chrdev: { node: { getattr: MEMFS.node_ops.getattr, setattr: MEMFS.node_ops.setattr }, stream: FS.chrdev_stream_ops } };
          }
          var node = FS.createNode(parent, name, mode, dev);
          if (FS.isDir(node.mode)) {
            node.node_ops = MEMFS.ops_table.dir.node;
            node.stream_ops = MEMFS.ops_table.dir.stream;
            node.contents = {};
          } else if (FS.isFile(node.mode)) {
            node.node_ops = MEMFS.ops_table.file.node;
            node.stream_ops = MEMFS.ops_table.file.stream;
            node.usedBytes = 0;
            node.contents = null;
          } else if (FS.isLink(node.mode)) {
            node.node_ops = MEMFS.ops_table.link.node;
            node.stream_ops = MEMFS.ops_table.link.stream;
          } else if (FS.isChrdev(node.mode)) {
            node.node_ops = MEMFS.ops_table.chrdev.node;
            node.stream_ops = MEMFS.ops_table.chrdev.stream;
          }
          node.timestamp = Date.now();
          if (parent) {
            parent.contents[name] = node;
          }
          return node;
        }, getFileDataAsRegularArray: function(node) {
          if (node.contents && node.contents.subarray) {
            var arr = [];
            for (var i = 0; i < node.usedBytes; ++i) arr.push(node.contents[i]);
            return arr;
          }
          return node.contents;
        }, getFileDataAsTypedArray: function(node) {
          if (!node.contents) return new Uint8Array(0);
          if (node.contents.subarray) return node.contents.subarray(0, node.usedBytes);
          return new Uint8Array(node.contents);
        }, expandFileStorage: function(node, newCapacity) {
          var prevCapacity = node.contents ? node.contents.length : 0;
          if (prevCapacity >= newCapacity) return;
          var CAPACITY_DOUBLING_MAX = 1024 * 1024;
          newCapacity = Math.max(newCapacity, prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2 : 1.125) >>> 0);
          if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256);
          var oldContents = node.contents;
          node.contents = new Uint8Array(newCapacity);
          if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0);
          return;
        }, resizeFileStorage: function(node, newSize) {
          if (node.usedBytes == newSize) return;
          if (newSize == 0) {
            node.contents = null;
            node.usedBytes = 0;
            return;
          }
          if (!node.contents || node.contents.subarray) {
            var oldContents = node.contents;
            node.contents = new Uint8Array(newSize);
            if (oldContents) {
              node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes)));
            }
            node.usedBytes = newSize;
            return;
          }
          if (!node.contents) node.contents = [];
          if (node.contents.length > newSize) node.contents.length = newSize;
          else while (node.contents.length < newSize) node.contents.push(0);
          node.usedBytes = newSize;
        }, node_ops: { getattr: function(node) {
          var attr = {};
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.usedBytes;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        }, setattr: function(node, attr) {
          if (attr.mode !== void 0) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== void 0) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== void 0) {
            MEMFS.resizeFileStorage(node, attr.size);
          }
        }, lookup: function(parent, name) {
          throw FS.genericErrors[44];
        }, mknod: function(parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        }, rename: function(old_node, new_dir, new_name) {
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(55);
              }
            }
          }
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          old_node.parent = new_dir;
        }, unlink: function(parent, name) {
          delete parent.contents[name];
        }, rmdir: function(parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(55);
          }
          delete parent.contents[name];
        }, readdir: function(node) {
          var entries = [".", ".."];
          for (var key2 in node.contents) {
            if (!node.contents.hasOwnProperty(key2)) {
              continue;
            }
            entries.push(key2);
          }
          return entries;
        }, symlink: function(parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 511 | 40960, 0);
          node.link = oldpath;
          return node;
        }, readlink: function(node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(28);
          }
          return node.link;
        } }, stream_ops: { read: function(stream, buffer2, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= stream.node.usedBytes) return 0;
          var size = Math.min(stream.node.usedBytes - position, length);
          if (size > 8 && contents.subarray) {
            buffer2.set(contents.subarray(position, position + size), offset);
          } else {
            for (var i = 0; i < size; i++) buffer2[offset + i] = contents[position + i];
          }
          return size;
        }, write: function(stream, buffer2, offset, length, position, canOwn) {
          if (buffer2.buffer === HEAP8.buffer) {
            canOwn = false;
          }
          if (!length) return 0;
          var node = stream.node;
          node.timestamp = Date.now();
          if (buffer2.subarray && (!node.contents || node.contents.subarray)) {
            if (canOwn) {
              node.contents = buffer2.subarray(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (node.usedBytes === 0 && position === 0) {
              node.contents = buffer2.slice(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (position + length <= node.usedBytes) {
              node.contents.set(buffer2.subarray(offset, offset + length), position);
              return length;
            }
          }
          MEMFS.expandFileStorage(node, position + length);
          if (node.contents.subarray && buffer2.subarray) {
            node.contents.set(buffer2.subarray(offset, offset + length), position);
          } else {
            for (var i = 0; i < length; i++) {
              node.contents[position + i] = buffer2[offset + i];
            }
          }
          node.usedBytes = Math.max(node.usedBytes, position + length);
          return length;
        }, llseek: function(stream, offset, whence) {
          var position = offset;
          if (whence === 1) {
            position += stream.position;
          } else if (whence === 2) {
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.usedBytes;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(28);
          }
          return position;
        }, allocate: function(stream, offset, length) {
          MEMFS.expandFileStorage(stream.node, offset + length);
          stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);
        }, mmap: function(stream, address, length, position, prot, flags) {
          assert(address === 0);
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(43);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          if (!(flags & 2) && contents.buffer === buffer) {
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            if (position > 0 || position + length < contents.length) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            ptr = FS.mmapAlloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(48);
            }
            HEAP8.set(contents, ptr);
          }
          return { ptr, allocated };
        }, msync: function(stream, buffer2, offset, length, mmapFlags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(43);
          }
          if (mmapFlags & 2) {
            return 0;
          }
          MEMFS.stream_ops.write(stream, buffer2, 0, length, offset, false);
          return 0;
        } } };
        var FS = { root: null, mounts: [], devices: {}, streams: [], nextInode: 1, nameTable: null, currentPath: "/", initialized: false, ignorePermissions: true, trackingDelegate: {}, tracking: { openFlags: { READ: 1, WRITE: 2 } }, ErrnoError: null, genericErrors: {}, filesystems: null, syncFSRequests: 0, handleFSError: function(e) {
          if (!(e instanceof FS.ErrnoError)) throw e + " : " + stackTrace();
          return setErrNo(e.errno);
        }, lookupPath: function(path2, opts) {
          path2 = PATH_FS.resolve(FS.cwd(), path2);
          opts = opts || {};
          if (!path2) return { path: "", node: null };
          var defaults = { follow_mount: true, recurse_count: 0 };
          for (var key2 in defaults) {
            if (opts[key2] === void 0) {
              opts[key2] = defaults[key2];
            }
          }
          if (opts.recurse_count > 8) {
            throw new FS.ErrnoError(32);
          }
          var parts = PATH.normalizeArray(path2.split("/").filter(function(p) {
            return !!p;
          }), false);
          var current = FS.root;
          var current_path = "/";
          for (var i = 0; i < parts.length; i++) {
            var islast = i === parts.length - 1;
            if (islast && opts.parent) {
              break;
            }
            current = FS.lookupNode(current, parts[i]);
            current_path = PATH.join2(current_path, parts[i]);
            if (FS.isMountpoint(current)) {
              if (!islast || islast && opts.follow_mount) {
                current = current.mounted.root;
              }
            }
            if (!islast || opts.follow) {
              var count = 0;
              while (FS.isLink(current.mode)) {
                var link = FS.readlink(current_path);
                current_path = PATH_FS.resolve(PATH.dirname(current_path), link);
                var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
                current = lookup.node;
                if (count++ > 40) {
                  throw new FS.ErrnoError(32);
                }
              }
            }
          }
          return { path: current_path, node: current };
        }, getPath: function(node) {
          var path2;
          while (true) {
            if (FS.isRoot(node)) {
              var mount = node.mount.mountpoint;
              if (!path2) return mount;
              return mount[mount.length - 1] !== "/" ? mount + "/" + path2 : mount + path2;
            }
            path2 = path2 ? node.name + "/" + path2 : node.name;
            node = node.parent;
          }
        }, hashName: function(parentid, name) {
          var hash = 0;
          for (var i = 0; i < name.length; i++) {
            hash = (hash << 5) - hash + name.charCodeAt(i) | 0;
          }
          return (parentid + hash >>> 0) % FS.nameTable.length;
        }, hashAddNode: function(node) {
          var hash = FS.hashName(node.parent.id, node.name);
          node.name_next = FS.nameTable[hash];
          FS.nameTable[hash] = node;
        }, hashRemoveNode: function(node) {
          var hash = FS.hashName(node.parent.id, node.name);
          if (FS.nameTable[hash] === node) {
            FS.nameTable[hash] = node.name_next;
          } else {
            var current = FS.nameTable[hash];
            while (current) {
              if (current.name_next === node) {
                current.name_next = node.name_next;
                break;
              }
              current = current.name_next;
            }
          }
        }, lookupNode: function(parent, name) {
          var errCode = FS.mayLookup(parent);
          if (errCode) {
            throw new FS.ErrnoError(errCode, parent);
          }
          var hash = FS.hashName(parent.id, name);
          for (var node = FS.nameTable[hash]; node; node = node.name_next) {
            var nodeName = node.name;
            if (node.parent.id === parent.id && nodeName === name) {
              return node;
            }
          }
          return FS.lookup(parent, name);
        }, createNode: function(parent, name, mode, rdev) {
          var node = new FS.FSNode(parent, name, mode, rdev);
          FS.hashAddNode(node);
          return node;
        }, destroyNode: function(node) {
          FS.hashRemoveNode(node);
        }, isRoot: function(node) {
          return node === node.parent;
        }, isMountpoint: function(node) {
          return !!node.mounted;
        }, isFile: function(mode) {
          return (mode & 61440) === 32768;
        }, isDir: function(mode) {
          return (mode & 61440) === 16384;
        }, isLink: function(mode) {
          return (mode & 61440) === 40960;
        }, isChrdev: function(mode) {
          return (mode & 61440) === 8192;
        }, isBlkdev: function(mode) {
          return (mode & 61440) === 24576;
        }, isFIFO: function(mode) {
          return (mode & 61440) === 4096;
        }, isSocket: function(mode) {
          return (mode & 49152) === 49152;
        }, flagModes: { "r": 0, "rs": 1052672, "r+": 2, "w": 577, "wx": 705, "xw": 705, "w+": 578, "wx+": 706, "xw+": 706, "a": 1089, "ax": 1217, "xa": 1217, "a+": 1090, "ax+": 1218, "xa+": 1218 }, modeStringToFlags: function(str) {
          var flags = FS.flagModes[str];
          if (typeof flags === "undefined") {
            throw new Error("Unknown file open mode: " + str);
          }
          return flags;
        }, flagsToPermissionString: function(flag) {
          var perms = ["r", "w", "rw"][flag & 3];
          if (flag & 512) {
            perms += "w";
          }
          return perms;
        }, nodePermissions: function(node, perms) {
          if (FS.ignorePermissions) {
            return 0;
          }
          if (perms.indexOf("r") !== -1 && !(node.mode & 292)) {
            return 2;
          } else if (perms.indexOf("w") !== -1 && !(node.mode & 146)) {
            return 2;
          } else if (perms.indexOf("x") !== -1 && !(node.mode & 73)) {
            return 2;
          }
          return 0;
        }, mayLookup: function(dir) {
          var errCode = FS.nodePermissions(dir, "x");
          if (errCode) return errCode;
          if (!dir.node_ops.lookup) return 2;
          return 0;
        }, mayCreate: function(dir, name) {
          try {
            var node = FS.lookupNode(dir, name);
            return 20;
          } catch (e) {
          }
          return FS.nodePermissions(dir, "wx");
        }, mayDelete: function(dir, name, isdir) {
          var node;
          try {
            node = FS.lookupNode(dir, name);
          } catch (e) {
            return e.errno;
          }
          var errCode = FS.nodePermissions(dir, "wx");
          if (errCode) {
            return errCode;
          }
          if (isdir) {
            if (!FS.isDir(node.mode)) {
              return 54;
            }
            if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
              return 10;
            }
          } else {
            if (FS.isDir(node.mode)) {
              return 31;
            }
          }
          return 0;
        }, mayOpen: function(node, flags) {
          if (!node) {
            return 44;
          }
          if (FS.isLink(node.mode)) {
            return 32;
          } else if (FS.isDir(node.mode)) {
            if (FS.flagsToPermissionString(flags) !== "r" || flags & 512) {
              return 31;
            }
          }
          return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
        }, MAX_OPEN_FDS: 4096, nextfd: function(fd_start, fd_end) {
          fd_start = fd_start || 0;
          fd_end = fd_end || FS.MAX_OPEN_FDS;
          for (var fd = fd_start; fd <= fd_end; fd++) {
            if (!FS.streams[fd]) {
              return fd;
            }
          }
          throw new FS.ErrnoError(33);
        }, getStream: function(fd) {
          return FS.streams[fd];
        }, createStream: function(stream, fd_start, fd_end) {
          if (!FS.FSStream) {
            FS.FSStream = function() {
            };
            FS.FSStream.prototype = { object: { get: function() {
              return this.node;
            }, set: function(val) {
              this.node = val;
            } }, isRead: { get: function() {
              return (this.flags & 2097155) !== 1;
            } }, isWrite: { get: function() {
              return (this.flags & 2097155) !== 0;
            } }, isAppend: { get: function() {
              return this.flags & 1024;
            } } };
          }
          var newStream = new FS.FSStream();
          for (var p in stream) {
            newStream[p] = stream[p];
          }
          stream = newStream;
          var fd = FS.nextfd(fd_start, fd_end);
          stream.fd = fd;
          FS.streams[fd] = stream;
          return stream;
        }, closeStream: function(fd) {
          FS.streams[fd] = null;
        }, chrdev_stream_ops: { open: function(stream) {
          var device = FS.getDevice(stream.node.rdev);
          stream.stream_ops = device.stream_ops;
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        }, llseek: function() {
          throw new FS.ErrnoError(70);
        } }, major: function(dev) {
          return dev >> 8;
        }, minor: function(dev) {
          return dev & 255;
        }, makedev: function(ma, mi) {
          return ma << 8 | mi;
        }, registerDevice: function(dev, ops) {
          FS.devices[dev] = { stream_ops: ops };
        }, getDevice: function(dev) {
          return FS.devices[dev];
        }, getMounts: function(mount) {
          var mounts = [];
          var check = [mount];
          while (check.length) {
            var m = check.pop();
            mounts.push(m);
            check.push.apply(check, m.mounts);
          }
          return mounts;
        }, syncfs: function(populate, callback) {
          if (typeof populate === "function") {
            callback = populate;
            populate = false;
          }
          FS.syncFSRequests++;
          if (FS.syncFSRequests > 1) {
            err("warning: " + FS.syncFSRequests + " FS.syncfs operations in flight at once, probably just doing extra work");
          }
          var mounts = FS.getMounts(FS.root.mount);
          var completed = 0;
          function doCallback(errCode) {
            FS.syncFSRequests--;
            return callback(errCode);
          }
          function done(errCode) {
            if (errCode) {
              if (!done.errored) {
                done.errored = true;
                return doCallback(errCode);
              }
              return;
            }
            if (++completed >= mounts.length) {
              doCallback(null);
            }
          }
          mounts.forEach(function(mount) {
            if (!mount.type.syncfs) {
              return done(null);
            }
            mount.type.syncfs(mount, populate, done);
          });
        }, mount: function(type, opts, mountpoint) {
          var root = mountpoint === "/";
          var pseudo = !mountpoint;
          var node;
          if (root && FS.root) {
            throw new FS.ErrnoError(10);
          } else if (!root && !pseudo) {
            var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
            mountpoint = lookup.path;
            node = lookup.node;
            if (FS.isMountpoint(node)) {
              throw new FS.ErrnoError(10);
            }
            if (!FS.isDir(node.mode)) {
              throw new FS.ErrnoError(54);
            }
          }
          var mount = { type, opts, mountpoint, mounts: [] };
          var mountRoot = type.mount(mount);
          mountRoot.mount = mount;
          mount.root = mountRoot;
          if (root) {
            FS.root = mountRoot;
          } else if (node) {
            node.mounted = mount;
            if (node.mount) {
              node.mount.mounts.push(mount);
            }
          }
          return mountRoot;
        }, unmount: function(mountpoint) {
          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
          if (!FS.isMountpoint(lookup.node)) {
            throw new FS.ErrnoError(28);
          }
          var node = lookup.node;
          var mount = node.mounted;
          var mounts = FS.getMounts(mount);
          Object.keys(FS.nameTable).forEach(function(hash) {
            var current = FS.nameTable[hash];
            while (current) {
              var next = current.name_next;
              if (mounts.indexOf(current.mount) !== -1) {
                FS.destroyNode(current);
              }
              current = next;
            }
          });
          node.mounted = null;
          var idx = node.mount.mounts.indexOf(mount);
          node.mount.mounts.splice(idx, 1);
        }, lookup: function(parent, name) {
          return parent.node_ops.lookup(parent, name);
        }, mknod: function(path2, mode, dev) {
          var lookup = FS.lookupPath(path2, { parent: true });
          var parent = lookup.node;
          var name = PATH.basename(path2);
          if (!name || name === "." || name === "..") {
            throw new FS.ErrnoError(28);
          }
          var errCode = FS.mayCreate(parent, name);
          if (errCode) {
            throw new FS.ErrnoError(errCode);
          }
          if (!parent.node_ops.mknod) {
            throw new FS.ErrnoError(63);
          }
          return parent.node_ops.mknod(parent, name, mode, dev);
        }, create: function(path2, mode) {
          mode = mode !== void 0 ? mode : 438;
          mode &= 4095;
          mode |= 32768;
          return FS.mknod(path2, mode, 0);
        }, mkdir: function(path2, mode) {
          mode = mode !== void 0 ? mode : 511;
          mode &= 511 | 512;
          mode |= 16384;
          return FS.mknod(path2, mode, 0);
        }, mkdirTree: function(path2, mode) {
          var dirs = path2.split("/");
          var d = "";
          for (var i = 0; i < dirs.length; ++i) {
            if (!dirs[i]) continue;
            d += "/" + dirs[i];
            try {
              FS.mkdir(d, mode);
            } catch (e) {
              if (e.errno != 20) throw e;
            }
          }
        }, mkdev: function(path2, mode, dev) {
          if (typeof dev === "undefined") {
            dev = mode;
            mode = 438;
          }
          mode |= 8192;
          return FS.mknod(path2, mode, dev);
        }, symlink: function(oldpath, newpath) {
          if (!PATH_FS.resolve(oldpath)) {
            throw new FS.ErrnoError(44);
          }
          var lookup = FS.lookupPath(newpath, { parent: true });
          var parent = lookup.node;
          if (!parent) {
            throw new FS.ErrnoError(44);
          }
          var newname = PATH.basename(newpath);
          var errCode = FS.mayCreate(parent, newname);
          if (errCode) {
            throw new FS.ErrnoError(errCode);
          }
          if (!parent.node_ops.symlink) {
            throw new FS.ErrnoError(63);
          }
          return parent.node_ops.symlink(parent, newname, oldpath);
        }, rename: function(old_path, new_path) {
          var old_dirname = PATH.dirname(old_path);
          var new_dirname = PATH.dirname(new_path);
          var old_name = PATH.basename(old_path);
          var new_name = PATH.basename(new_path);
          var lookup, old_dir, new_dir;
          try {
            lookup = FS.lookupPath(old_path, { parent: true });
            old_dir = lookup.node;
            lookup = FS.lookupPath(new_path, { parent: true });
            new_dir = lookup.node;
          } catch (e) {
            throw new FS.ErrnoError(10);
          }
          if (!old_dir || !new_dir) throw new FS.ErrnoError(44);
          if (old_dir.mount !== new_dir.mount) {
            throw new FS.ErrnoError(75);
          }
          var old_node = FS.lookupNode(old_dir, old_name);
          var relative = PATH_FS.relative(old_path, new_dirname);
          if (relative.charAt(0) !== ".") {
            throw new FS.ErrnoError(28);
          }
          relative = PATH_FS.relative(new_path, old_dirname);
          if (relative.charAt(0) !== ".") {
            throw new FS.ErrnoError(55);
          }
          var new_node;
          try {
            new_node = FS.lookupNode(new_dir, new_name);
          } catch (e) {
          }
          if (old_node === new_node) {
            return;
          }
          var isdir = FS.isDir(old_node.mode);
          var errCode = FS.mayDelete(old_dir, old_name, isdir);
          if (errCode) {
            throw new FS.ErrnoError(errCode);
          }
          errCode = new_node ? FS.mayDelete(new_dir, new_name, isdir) : FS.mayCreate(new_dir, new_name);
          if (errCode) {
            throw new FS.ErrnoError(errCode);
          }
          if (!old_dir.node_ops.rename) {
            throw new FS.ErrnoError(63);
          }
          if (FS.isMountpoint(old_node) || new_node && FS.isMountpoint(new_node)) {
            throw new FS.ErrnoError(10);
          }
          if (new_dir !== old_dir) {
            errCode = FS.nodePermissions(old_dir, "w");
            if (errCode) {
              throw new FS.ErrnoError(errCode);
            }
          }
          try {
            if (FS.trackingDelegate["willMovePath"]) {
              FS.trackingDelegate["willMovePath"](old_path, new_path);
            }
          } catch (e) {
            err("FS.trackingDelegate['willMovePath']('" + old_path + "', '" + new_path + "') threw an exception: " + e.message);
          }
          FS.hashRemoveNode(old_node);
          try {
            old_dir.node_ops.rename(old_node, new_dir, new_name);
          } catch (e) {
            throw e;
          } finally {
            FS.hashAddNode(old_node);
          }
          try {
            if (FS.trackingDelegate["onMovePath"]) FS.trackingDelegate["onMovePath"](old_path, new_path);
          } catch (e) {
            err("FS.trackingDelegate['onMovePath']('" + old_path + "', '" + new_path + "') threw an exception: " + e.message);
          }
        }, rmdir: function(path2) {
          var lookup = FS.lookupPath(path2, { parent: true });
          var parent = lookup.node;
          var name = PATH.basename(path2);
          var node = FS.lookupNode(parent, name);
          var errCode = FS.mayDelete(parent, name, true);
          if (errCode) {
            throw new FS.ErrnoError(errCode);
          }
          if (!parent.node_ops.rmdir) {
            throw new FS.ErrnoError(63);
          }
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(10);
          }
          try {
            if (FS.trackingDelegate["willDeletePath"]) {
              FS.trackingDelegate["willDeletePath"](path2);
            }
          } catch (e) {
            err("FS.trackingDelegate['willDeletePath']('" + path2 + "') threw an exception: " + e.message);
          }
          parent.node_ops.rmdir(parent, name);
          FS.destroyNode(node);
          try {
            if (FS.trackingDelegate["onDeletePath"]) FS.trackingDelegate["onDeletePath"](path2);
          } catch (e) {
            err("FS.trackingDelegate['onDeletePath']('" + path2 + "') threw an exception: " + e.message);
          }
        }, readdir: function(path2) {
          var lookup = FS.lookupPath(path2, { follow: true });
          var node = lookup.node;
          if (!node.node_ops.readdir) {
            throw new FS.ErrnoError(54);
          }
          return node.node_ops.readdir(node);
        }, unlink: function(path2) {
          var lookup = FS.lookupPath(path2, { parent: true });
          var parent = lookup.node;
          var name = PATH.basename(path2);
          var node = FS.lookupNode(parent, name);
          var errCode = FS.mayDelete(parent, name, false);
          if (errCode) {
            throw new FS.ErrnoError(errCode);
          }
          if (!parent.node_ops.unlink) {
            throw new FS.ErrnoError(63);
          }
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(10);
          }
          try {
            if (FS.trackingDelegate["willDeletePath"]) {
              FS.trackingDelegate["willDeletePath"](path2);
            }
          } catch (e) {
            err("FS.trackingDelegate['willDeletePath']('" + path2 + "') threw an exception: " + e.message);
          }
          parent.node_ops.unlink(parent, name);
          FS.destroyNode(node);
          try {
            if (FS.trackingDelegate["onDeletePath"]) FS.trackingDelegate["onDeletePath"](path2);
          } catch (e) {
            err("FS.trackingDelegate['onDeletePath']('" + path2 + "') threw an exception: " + e.message);
          }
        }, readlink: function(path2) {
          var lookup = FS.lookupPath(path2);
          var link = lookup.node;
          if (!link) {
            throw new FS.ErrnoError(44);
          }
          if (!link.node_ops.readlink) {
            throw new FS.ErrnoError(28);
          }
          return PATH_FS.resolve(FS.getPath(link.parent), link.node_ops.readlink(link));
        }, stat: function(path2, dontFollow) {
          var lookup = FS.lookupPath(path2, { follow: !dontFollow });
          var node = lookup.node;
          if (!node) {
            throw new FS.ErrnoError(44);
          }
          if (!node.node_ops.getattr) {
            throw new FS.ErrnoError(63);
          }
          return node.node_ops.getattr(node);
        }, lstat: function(path2) {
          return FS.stat(path2, true);
        }, chmod: function(path2, mode, dontFollow) {
          var node;
          if (typeof path2 === "string") {
            var lookup = FS.lookupPath(path2, { follow: !dontFollow });
            node = lookup.node;
          } else {
            node = path2;
          }
          if (!node.node_ops.setattr) {
            throw new FS.ErrnoError(63);
          }
          node.node_ops.setattr(node, { mode: mode & 4095 | node.mode & ~4095, timestamp: Date.now() });
        }, lchmod: function(path2, mode) {
          FS.chmod(path2, mode, true);
        }, fchmod: function(fd, mode) {
          var stream = FS.getStream(fd);
          if (!stream) {
            throw new FS.ErrnoError(8);
          }
          FS.chmod(stream.node, mode);
        }, chown: function(path2, uid, gid, dontFollow) {
          var node;
          if (typeof path2 === "string") {
            var lookup = FS.lookupPath(path2, { follow: !dontFollow });
            node = lookup.node;
          } else {
            node = path2;
          }
          if (!node.node_ops.setattr) {
            throw new FS.ErrnoError(63);
          }
          node.node_ops.setattr(node, { timestamp: Date.now() });
        }, lchown: function(path2, uid, gid) {
          FS.chown(path2, uid, gid, true);
        }, fchown: function(fd, uid, gid) {
          var stream = FS.getStream(fd);
          if (!stream) {
            throw new FS.ErrnoError(8);
          }
          FS.chown(stream.node, uid, gid);
        }, truncate: function(path2, len) {
          if (len < 0) {
            throw new FS.ErrnoError(28);
          }
          var node;
          if (typeof path2 === "string") {
            var lookup = FS.lookupPath(path2, { follow: true });
            node = lookup.node;
          } else {
            node = path2;
          }
          if (!node.node_ops.setattr) {
            throw new FS.ErrnoError(63);
          }
          if (FS.isDir(node.mode)) {
            throw new FS.ErrnoError(31);
          }
          if (!FS.isFile(node.mode)) {
            throw new FS.ErrnoError(28);
          }
          var errCode = FS.nodePermissions(node, "w");
          if (errCode) {
            throw new FS.ErrnoError(errCode);
          }
          node.node_ops.setattr(node, { size: len, timestamp: Date.now() });
        }, ftruncate: function(fd, len) {
          var stream = FS.getStream(fd);
          if (!stream) {
            throw new FS.ErrnoError(8);
          }
          if ((stream.flags & 2097155) === 0) {
            throw new FS.ErrnoError(28);
          }
          FS.truncate(stream.node, len);
        }, utime: function(path2, atime, mtime) {
          var lookup = FS.lookupPath(path2, { follow: true });
          var node = lookup.node;
          node.node_ops.setattr(node, { timestamp: Math.max(atime, mtime) });
        }, open: function(path2, flags, mode, fd_start, fd_end) {
          if (path2 === "") {
            throw new FS.ErrnoError(44);
          }
          flags = typeof flags === "string" ? FS.modeStringToFlags(flags) : flags;
          mode = typeof mode === "undefined" ? 438 : mode;
          if (flags & 64) {
            mode = mode & 4095 | 32768;
          } else {
            mode = 0;
          }
          var node;
          if (typeof path2 === "object") {
            node = path2;
          } else {
            path2 = PATH.normalize(path2);
            try {
              var lookup = FS.lookupPath(path2, { follow: !(flags & 131072) });
              node = lookup.node;
            } catch (e) {
            }
          }
          var created = false;
          if (flags & 64) {
            if (node) {
              if (flags & 128) {
                throw new FS.ErrnoError(20);
              }
            } else {
              node = FS.mknod(path2, mode, 0);
              created = true;
            }
          }
          if (!node) {
            throw new FS.ErrnoError(44);
          }
          if (FS.isChrdev(node.mode)) {
            flags &= ~512;
          }
          if (flags & 65536 && !FS.isDir(node.mode)) {
            throw new FS.ErrnoError(54);
          }
          if (!created) {
            var errCode = FS.mayOpen(node, flags);
            if (errCode) {
              throw new FS.ErrnoError(errCode);
            }
          }
          if (flags & 512) {
            FS.truncate(node, 0);
          }
          flags &= ~(128 | 512 | 131072);
          var stream = FS.createStream({ node, path: FS.getPath(node), flags, seekable: true, position: 0, stream_ops: node.stream_ops, ungotten: [], error: false }, fd_start, fd_end);
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
          if (Module2["logReadFiles"] && !(flags & 1)) {
            if (!FS.readFiles) FS.readFiles = {};
            if (!(path2 in FS.readFiles)) {
              FS.readFiles[path2] = 1;
              err("FS.trackingDelegate error on read file: " + path2);
            }
          }
          try {
            if (FS.trackingDelegate["onOpenFile"]) {
              var trackingFlags = 0;
              if ((flags & 2097155) !== 1) {
                trackingFlags |= FS.tracking.openFlags.READ;
              }
              if ((flags & 2097155) !== 0) {
                trackingFlags |= FS.tracking.openFlags.WRITE;
              }
              FS.trackingDelegate["onOpenFile"](path2, trackingFlags);
            }
          } catch (e) {
            err("FS.trackingDelegate['onOpenFile']('" + path2 + "', flags) threw an exception: " + e.message);
          }
          return stream;
        }, close: function(stream) {
          if (FS.isClosed(stream)) {
            throw new FS.ErrnoError(8);
          }
          if (stream.getdents) stream.getdents = null;
          try {
            if (stream.stream_ops.close) {
              stream.stream_ops.close(stream);
            }
          } catch (e) {
            throw e;
          } finally {
            FS.closeStream(stream.fd);
          }
          stream.fd = null;
        }, isClosed: function(stream) {
          return stream.fd === null;
        }, llseek: function(stream, offset, whence) {
          if (FS.isClosed(stream)) {
            throw new FS.ErrnoError(8);
          }
          if (!stream.seekable || !stream.stream_ops.llseek) {
            throw new FS.ErrnoError(70);
          }
          if (whence != 0 && whence != 1 && whence != 2) {
            throw new FS.ErrnoError(28);
          }
          stream.position = stream.stream_ops.llseek(stream, offset, whence);
          stream.ungotten = [];
          return stream.position;
        }, read: function(stream, buffer2, offset, length, position) {
          if (length < 0 || position < 0) {
            throw new FS.ErrnoError(28);
          }
          if (FS.isClosed(stream)) {
            throw new FS.ErrnoError(8);
          }
          if ((stream.flags & 2097155) === 1) {
            throw new FS.ErrnoError(8);
          }
          if (FS.isDir(stream.node.mode)) {
            throw new FS.ErrnoError(31);
          }
          if (!stream.stream_ops.read) {
            throw new FS.ErrnoError(28);
          }
          var seeking = typeof position !== "undefined";
          if (!seeking) {
            position = stream.position;
          } else if (!stream.seekable) {
            throw new FS.ErrnoError(70);
          }
          var bytesRead = stream.stream_ops.read(stream, buffer2, offset, length, position);
          if (!seeking) stream.position += bytesRead;
          return bytesRead;
        }, write: function(stream, buffer2, offset, length, position, canOwn) {
          if (length < 0 || position < 0) {
            throw new FS.ErrnoError(28);
          }
          if (FS.isClosed(stream)) {
            throw new FS.ErrnoError(8);
          }
          if ((stream.flags & 2097155) === 0) {
            throw new FS.ErrnoError(8);
          }
          if (FS.isDir(stream.node.mode)) {
            throw new FS.ErrnoError(31);
          }
          if (!stream.stream_ops.write) {
            throw new FS.ErrnoError(28);
          }
          if (stream.seekable && stream.flags & 1024) {
            FS.llseek(stream, 0, 2);
          }
          var seeking = typeof position !== "undefined";
          if (!seeking) {
            position = stream.position;
          } else if (!stream.seekable) {
            throw new FS.ErrnoError(70);
          }
          var bytesWritten = stream.stream_ops.write(stream, buffer2, offset, length, position, canOwn);
          if (!seeking) stream.position += bytesWritten;
          try {
            if (stream.path && FS.trackingDelegate["onWriteToFile"]) FS.trackingDelegate["onWriteToFile"](stream.path);
          } catch (e) {
            err("FS.trackingDelegate['onWriteToFile']('" + stream.path + "') threw an exception: " + e.message);
          }
          return bytesWritten;
        }, allocate: function(stream, offset, length) {
          if (FS.isClosed(stream)) {
            throw new FS.ErrnoError(8);
          }
          if (offset < 0 || length <= 0) {
            throw new FS.ErrnoError(28);
          }
          if ((stream.flags & 2097155) === 0) {
            throw new FS.ErrnoError(8);
          }
          if (!FS.isFile(stream.node.mode) && !FS.isDir(stream.node.mode)) {
            throw new FS.ErrnoError(43);
          }
          if (!stream.stream_ops.allocate) {
            throw new FS.ErrnoError(138);
          }
          stream.stream_ops.allocate(stream, offset, length);
        }, mmap: function(stream, address, length, position, prot, flags) {
          if ((prot & 2) !== 0 && (flags & 2) === 0 && (stream.flags & 2097155) !== 2) {
            throw new FS.ErrnoError(2);
          }
          if ((stream.flags & 2097155) === 1) {
            throw new FS.ErrnoError(2);
          }
          if (!stream.stream_ops.mmap) {
            throw new FS.ErrnoError(43);
          }
          return stream.stream_ops.mmap(stream, address, length, position, prot, flags);
        }, msync: function(stream, buffer2, offset, length, mmapFlags) {
          if (!stream || !stream.stream_ops.msync) {
            return 0;
          }
          return stream.stream_ops.msync(stream, buffer2, offset, length, mmapFlags);
        }, munmap: function(stream) {
          return 0;
        }, ioctl: function(stream, cmd, arg) {
          if (!stream.stream_ops.ioctl) {
            throw new FS.ErrnoError(59);
          }
          return stream.stream_ops.ioctl(stream, cmd, arg);
        }, readFile: function(path2, opts) {
          opts = opts || {};
          opts.flags = opts.flags || "r";
          opts.encoding = opts.encoding || "binary";
          if (opts.encoding !== "utf8" && opts.encoding !== "binary") {
            throw new Error('Invalid encoding type "' + opts.encoding + '"');
          }
          var ret;
          var stream = FS.open(path2, opts.flags);
          var stat = FS.stat(path2);
          var length = stat.size;
          var buf = new Uint8Array(length);
          FS.read(stream, buf, 0, length, 0);
          if (opts.encoding === "utf8") {
            ret = UTF8ArrayToString(buf, 0);
          } else if (opts.encoding === "binary") {
            ret = buf;
          }
          FS.close(stream);
          return ret;
        }, writeFile: function(path2, data, opts) {
          opts = opts || {};
          opts.flags = opts.flags || "w";
          var stream = FS.open(path2, opts.flags, opts.mode);
          if (typeof data === "string") {
            var buf = new Uint8Array(lengthBytesUTF8(data) + 1);
            var actualNumBytes = stringToUTF8Array(data, buf, 0, buf.length);
            FS.write(stream, buf, 0, actualNumBytes, void 0, opts.canOwn);
          } else if (ArrayBuffer.isView(data)) {
            FS.write(stream, data, 0, data.byteLength, void 0, opts.canOwn);
          } else {
            throw new Error("Unsupported data type");
          }
          FS.close(stream);
        }, cwd: function() {
          return FS.currentPath;
        }, chdir: function(path2) {
          var lookup = FS.lookupPath(path2, { follow: true });
          if (lookup.node === null) {
            throw new FS.ErrnoError(44);
          }
          if (!FS.isDir(lookup.node.mode)) {
            throw new FS.ErrnoError(54);
          }
          var errCode = FS.nodePermissions(lookup.node, "x");
          if (errCode) {
            throw new FS.ErrnoError(errCode);
          }
          FS.currentPath = lookup.path;
        }, createDefaultDirectories: function() {
          FS.mkdir("/tmp");
          FS.mkdir("/home");
          FS.mkdir("/home/web_user");
        }, createDefaultDevices: function() {
          FS.mkdir("/dev");
          FS.registerDevice(FS.makedev(1, 3), { read: function() {
            return 0;
          }, write: function(stream, buffer2, offset, length, pos) {
            return length;
          } });
          FS.mkdev("/dev/null", FS.makedev(1, 3));
          TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
          TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
          FS.mkdev("/dev/tty", FS.makedev(5, 0));
          FS.mkdev("/dev/tty1", FS.makedev(6, 0));
          var random_device;
          if (typeof crypto === "object" && typeof crypto["getRandomValues"] === "function") {
            var randomBuffer = new Uint8Array(1);
            random_device = function() {
              crypto.getRandomValues(randomBuffer);
              return randomBuffer[0];
            };
          } else if (ENVIRONMENT_IS_NODE) {
            try {
              var crypto_module = crypto__default["default"];
              random_device = function() {
                return crypto_module["randomBytes"](1)[0];
              };
            } catch (e) {
            }
          } else ;
          if (!random_device) {
            random_device = function() {
              abort("random_device");
            };
          }
          FS.createDevice("/dev", "random", random_device);
          FS.createDevice("/dev", "urandom", random_device);
          FS.mkdir("/dev/shm");
          FS.mkdir("/dev/shm/tmp");
        }, createSpecialDirectories: function() {
          FS.mkdir("/proc");
          FS.mkdir("/proc/self");
          FS.mkdir("/proc/self/fd");
          FS.mount({ mount: function() {
            var node = FS.createNode("/proc/self", "fd", 16384 | 511, 73);
            node.node_ops = { lookup: function(parent, name) {
              var fd = +name;
              var stream = FS.getStream(fd);
              if (!stream) throw new FS.ErrnoError(8);
              var ret = { parent: null, mount: { mountpoint: "fake" }, node_ops: { readlink: function() {
                return stream.path;
              } } };
              ret.parent = ret;
              return ret;
            } };
            return node;
          } }, {}, "/proc/self/fd");
        }, createStandardStreams: function() {
          if (Module2["stdin"]) {
            FS.createDevice("/dev", "stdin", Module2["stdin"]);
          } else {
            FS.symlink("/dev/tty", "/dev/stdin");
          }
          if (Module2["stdout"]) {
            FS.createDevice("/dev", "stdout", null, Module2["stdout"]);
          } else {
            FS.symlink("/dev/tty", "/dev/stdout");
          }
          if (Module2["stderr"]) {
            FS.createDevice("/dev", "stderr", null, Module2["stderr"]);
          } else {
            FS.symlink("/dev/tty1", "/dev/stderr");
          }
          FS.open("/dev/stdin", "r");
          FS.open("/dev/stdout", "w");
          FS.open("/dev/stderr", "w");
        }, ensureErrnoError: function() {
          if (FS.ErrnoError) return;
          FS.ErrnoError = function ErrnoError(errno, node) {
            this.node = node;
            this.setErrno = function(errno2) {
              this.errno = errno2;
            };
            this.setErrno(errno);
            this.message = "FS error";
          };
          FS.ErrnoError.prototype = new Error();
          FS.ErrnoError.prototype.constructor = FS.ErrnoError;
          [44].forEach(function(code) {
            FS.genericErrors[code] = new FS.ErrnoError(code);
            FS.genericErrors[code].stack = "<generic error, no stack>";
          });
        }, staticInit: function() {
          FS.ensureErrnoError();
          FS.nameTable = new Array(4096);
          FS.mount(MEMFS, {}, "/");
          FS.createDefaultDirectories();
          FS.createDefaultDevices();
          FS.createSpecialDirectories();
          FS.filesystems = { "MEMFS": MEMFS };
        }, init: function(input, output, error) {
          FS.init.initialized = true;
          FS.ensureErrnoError();
          Module2["stdin"] = input || Module2["stdin"];
          Module2["stdout"] = output || Module2["stdout"];
          Module2["stderr"] = error || Module2["stderr"];
          FS.createStandardStreams();
        }, quit: function() {
          FS.init.initialized = false;
          var fflush = Module2["_fflush"];
          if (fflush) fflush(0);
          for (var i = 0; i < FS.streams.length; i++) {
            var stream = FS.streams[i];
            if (!stream) {
              continue;
            }
            FS.close(stream);
          }
        }, getMode: function(canRead, canWrite) {
          var mode = 0;
          if (canRead) mode |= 292 | 73;
          if (canWrite) mode |= 146;
          return mode;
        }, joinPath: function(parts, forceRelative) {
          var path2 = PATH.join.apply(null, parts);
          if (forceRelative && path2[0] == "/") path2 = path2.substr(1);
          return path2;
        }, absolutePath: function(relative, base) {
          return PATH_FS.resolve(base, relative);
        }, standardizePath: function(path2) {
          return PATH.normalize(path2);
        }, findObject: function(path2, dontResolveLastLink) {
          var ret = FS.analyzePath(path2, dontResolveLastLink);
          if (ret.exists) {
            return ret.object;
          } else {
            setErrNo(ret.error);
            return null;
          }
        }, analyzePath: function(path2, dontResolveLastLink) {
          try {
            var lookup = FS.lookupPath(path2, { follow: !dontResolveLastLink });
            path2 = lookup.path;
          } catch (e) {
          }
          var ret = { isRoot: false, exists: false, error: 0, name: null, path: null, object: null, parentExists: false, parentPath: null, parentObject: null };
          try {
            var lookup = FS.lookupPath(path2, { parent: true });
            ret.parentExists = true;
            ret.parentPath = lookup.path;
            ret.parentObject = lookup.node;
            ret.name = PATH.basename(path2);
            lookup = FS.lookupPath(path2, { follow: !dontResolveLastLink });
            ret.exists = true;
            ret.path = lookup.path;
            ret.object = lookup.node;
            ret.name = lookup.node.name;
            ret.isRoot = lookup.path === "/";
          } catch (e) {
            ret.error = e.errno;
          }
          return ret;
        }, createFolder: function(parent, name, canRead, canWrite) {
          var path2 = PATH.join2(typeof parent === "string" ? parent : FS.getPath(parent), name);
          var mode = FS.getMode(canRead, canWrite);
          return FS.mkdir(path2, mode);
        }, createPath: function(parent, path2, canRead, canWrite) {
          parent = typeof parent === "string" ? parent : FS.getPath(parent);
          var parts = path2.split("/").reverse();
          while (parts.length) {
            var part = parts.pop();
            if (!part) continue;
            var current = PATH.join2(parent, part);
            try {
              FS.mkdir(current);
            } catch (e) {
            }
            parent = current;
          }
          return current;
        }, createFile: function(parent, name, properties, canRead, canWrite) {
          var path2 = PATH.join2(typeof parent === "string" ? parent : FS.getPath(parent), name);
          var mode = FS.getMode(canRead, canWrite);
          return FS.create(path2, mode);
        }, createDataFile: function(parent, name, data, canRead, canWrite, canOwn) {
          var path2 = name ? PATH.join2(typeof parent === "string" ? parent : FS.getPath(parent), name) : parent;
          var mode = FS.getMode(canRead, canWrite);
          var node = FS.create(path2, mode);
          if (data) {
            if (typeof data === "string") {
              var arr = new Array(data.length);
              for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
              data = arr;
            }
            FS.chmod(node, mode | 146);
            var stream = FS.open(node, "w");
            FS.write(stream, data, 0, data.length, 0, canOwn);
            FS.close(stream);
            FS.chmod(node, mode);
          }
          return node;
        }, createDevice: function(parent, name, input, output) {
          var path2 = PATH.join2(typeof parent === "string" ? parent : FS.getPath(parent), name);
          var mode = FS.getMode(!!input, !!output);
          if (!FS.createDevice.major) FS.createDevice.major = 64;
          var dev = FS.makedev(FS.createDevice.major++, 0);
          FS.registerDevice(dev, { open: function(stream) {
            stream.seekable = false;
          }, close: function(stream) {
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          }, read: function(stream, buffer2, offset, length, pos) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(29);
              }
              if (result === void 0 && bytesRead === 0) {
                throw new FS.ErrnoError(6);
              }
              if (result === null || result === void 0) break;
              bytesRead++;
              buffer2[offset + i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          }, write: function(stream, buffer2, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer2[offset + i]);
              } catch (e) {
                throw new FS.ErrnoError(29);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          } });
          return FS.mkdev(path2, mode, dev);
        }, createLink: function(parent, name, target, canRead, canWrite) {
          var path2 = PATH.join2(typeof parent === "string" ? parent : FS.getPath(parent), name);
          return FS.symlink(target, path2);
        }, forceLoadFile: function(obj) {
          if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
          var success = true;
          if (typeof XMLHttpRequest !== "undefined") {
            throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
          } else if (read_) {
            try {
              obj.contents = intArrayFromString(read_(obj.url), true);
              obj.usedBytes = obj.contents.length;
            } catch (e) {
              success = false;
            }
          } else {
            throw new Error("Cannot load without read() or XMLHttpRequest.");
          }
          if (!success) setErrNo(29);
          return success;
        }, createLazyFile: function(parent, name, url, canRead, canWrite) {
          function LazyUint8Array() {
            this.lengthKnown = false;
            this.chunks = [];
          }
          LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
            if (idx > this.length - 1 || idx < 0) {
              return void 0;
            }
            var chunkOffset = idx % this.chunkSize;
            var chunkNum = idx / this.chunkSize | 0;
            return this.getter(chunkNum)[chunkOffset];
          };
          LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
            this.getter = getter;
          };
          LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
            var xhr = new XMLHttpRequest();
            xhr.open("HEAD", url, false);
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            var datalength = Number(xhr.getResponseHeader("Content-length"));
            var header;
            var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
            var usesGzip = (header = xhr.getResponseHeader("Content-Encoding")) && header === "gzip";
            var chunkSize = 1024 * 1024;
            if (!hasByteServing) chunkSize = datalength;
            var doXHR = function(from, to) {
              if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
              if (to > datalength - 1) throw new Error("only " + datalength + " bytes available! programmer error!");
              var xhr2 = new XMLHttpRequest();
              xhr2.open("GET", url, false);
              if (datalength !== chunkSize) xhr2.setRequestHeader("Range", "bytes=" + from + "-" + to);
              if (typeof Uint8Array != "undefined") xhr2.responseType = "arraybuffer";
              if (xhr2.overrideMimeType) {
                xhr2.overrideMimeType("text/plain; charset=x-user-defined");
              }
              xhr2.send(null);
              if (!(xhr2.status >= 200 && xhr2.status < 300 || xhr2.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr2.status);
              if (xhr2.response !== void 0) {
                return new Uint8Array(xhr2.response || []);
              } else {
                return intArrayFromString(xhr2.responseText || "", true);
              }
            };
            var lazyArray2 = this;
            lazyArray2.setDataGetter(function(chunkNum) {
              var start = chunkNum * chunkSize;
              var end = (chunkNum + 1) * chunkSize - 1;
              end = Math.min(end, datalength - 1);
              if (typeof lazyArray2.chunks[chunkNum] === "undefined") {
                lazyArray2.chunks[chunkNum] = doXHR(start, end);
              }
              if (typeof lazyArray2.chunks[chunkNum] === "undefined") throw new Error("doXHR failed!");
              return lazyArray2.chunks[chunkNum];
            });
            if (usesGzip || !datalength) {
              chunkSize = datalength = 1;
              datalength = this.getter(0).length;
              chunkSize = datalength;
              out("LazyFiles on gzip forces download of the whole file when length is accessed");
            }
            this._length = datalength;
            this._chunkSize = chunkSize;
            this.lengthKnown = true;
          };
          if (typeof XMLHttpRequest !== "undefined") {
            if (!ENVIRONMENT_IS_WORKER) throw "Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc";
            var lazyArray = new LazyUint8Array();
            Object.defineProperties(lazyArray, { length: { get: function() {
              if (!this.lengthKnown) {
                this.cacheLength();
              }
              return this._length;
            } }, chunkSize: { get: function() {
              if (!this.lengthKnown) {
                this.cacheLength();
              }
              return this._chunkSize;
            } } });
            var properties = { isDevice: false, contents: lazyArray };
          } else {
            var properties = { isDevice: false, url };
          }
          var node = FS.createFile(parent, name, properties, canRead, canWrite);
          if (properties.contents) {
            node.contents = properties.contents;
          } else if (properties.url) {
            node.contents = null;
            node.url = properties.url;
          }
          Object.defineProperties(node, { usedBytes: { get: function() {
            return this.contents.length;
          } } });
          var stream_ops = {};
          var keys = Object.keys(node.stream_ops);
          keys.forEach(function(key2) {
            var fn = node.stream_ops[key2];
            stream_ops[key2] = function forceLoadLazyFile() {
              if (!FS.forceLoadFile(node)) {
                throw new FS.ErrnoError(29);
              }
              return fn.apply(null, arguments);
            };
          });
          stream_ops.read = function stream_ops_read(stream, buffer2, offset, length, position) {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(29);
            }
            var contents = stream.node.contents;
            if (position >= contents.length) return 0;
            var size = Math.min(contents.length - position, length);
            if (contents.slice) {
              for (var i = 0; i < size; i++) {
                buffer2[offset + i] = contents[position + i];
              }
            } else {
              for (var i = 0; i < size; i++) {
                buffer2[offset + i] = contents.get(position + i);
              }
            }
            return size;
          };
          node.stream_ops = stream_ops;
          return node;
        }, createPreloadedFile: function(parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn, preFinish) {
          Browser.init();
          var fullname = name ? PATH_FS.resolve(PATH.join2(parent, name)) : parent;
          function processData(byteArray) {
            function finish(byteArray2) {
              if (preFinish) preFinish();
              if (!dontCreateFile) {
                FS.createDataFile(parent, name, byteArray2, canRead, canWrite, canOwn);
              }
              if (onload) onload();
              removeRunDependency();
            }
            var handled = false;
            Module2["preloadPlugins"].forEach(function(plugin) {
              if (handled) return;
              if (plugin["canHandle"](fullname)) {
                plugin["handle"](byteArray, fullname, finish, function() {
                  if (onerror) onerror();
                  removeRunDependency();
                });
                handled = true;
              }
            });
            if (!handled) finish(byteArray);
          }
          addRunDependency();
          if (typeof url == "string") {
            Browser.asyncLoad(url, function(byteArray) {
              processData(byteArray);
            }, onerror);
          } else {
            processData(url);
          }
        }, indexedDB: function() {
          return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
        }, DB_NAME: function() {
          return "EM_FS_" + window.location.pathname;
        }, DB_VERSION: 20, DB_STORE_NAME: "FILE_DATA", saveFilesToDB: function(paths, onload, onerror) {
          onload = onload || function() {
          };
          onerror = onerror || function() {
          };
          var indexedDB = FS.indexedDB();
          try {
            var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
          } catch (e) {
            return onerror(e);
          }
          openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
            out("creating db");
            var db = openRequest.result;
            db.createObjectStore(FS.DB_STORE_NAME);
          };
          openRequest.onsuccess = function openRequest_onsuccess() {
            var db = openRequest.result;
            var transaction = db.transaction([FS.DB_STORE_NAME], "readwrite");
            var files = transaction.objectStore(FS.DB_STORE_NAME);
            var ok = 0, fail = 0, total = paths.length;
            function finish() {
              if (fail == 0) onload();
              else onerror();
            }
            paths.forEach(function(path2) {
              var putRequest = files.put(FS.analyzePath(path2).object.contents, path2);
              putRequest.onsuccess = function putRequest_onsuccess() {
                ok++;
                if (ok + fail == total) finish();
              };
              putRequest.onerror = function putRequest_onerror() {
                fail++;
                if (ok + fail == total) finish();
              };
            });
            transaction.onerror = onerror;
          };
          openRequest.onerror = onerror;
        }, loadFilesFromDB: function(paths, onload, onerror) {
          onload = onload || function() {
          };
          onerror = onerror || function() {
          };
          var indexedDB = FS.indexedDB();
          try {
            var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
          } catch (e) {
            return onerror(e);
          }
          openRequest.onupgradeneeded = onerror;
          openRequest.onsuccess = function openRequest_onsuccess() {
            var db = openRequest.result;
            try {
              var transaction = db.transaction([FS.DB_STORE_NAME], "readonly");
            } catch (e) {
              onerror(e);
              return;
            }
            var files = transaction.objectStore(FS.DB_STORE_NAME);
            var ok = 0, fail = 0, total = paths.length;
            function finish() {
              if (fail == 0) onload();
              else onerror();
            }
            paths.forEach(function(path2) {
              var getRequest = files.get(path2);
              getRequest.onsuccess = function getRequest_onsuccess() {
                if (FS.analyzePath(path2).exists) {
                  FS.unlink(path2);
                }
                FS.createDataFile(PATH.dirname(path2), PATH.basename(path2), getRequest.result, true, true, true);
                ok++;
                if (ok + fail == total) finish();
              };
              getRequest.onerror = function getRequest_onerror() {
                fail++;
                if (ok + fail == total) finish();
              };
            });
            transaction.onerror = onerror;
          };
          openRequest.onerror = onerror;
        }, mmapAlloc: function(size) {
          var alignedSize = alignMemory(size, 16384);
          var ptr = _malloc(alignedSize);
          while (size < alignedSize) HEAP8[ptr + size++] = 0;
          return ptr;
        } };
        var SYSCALLS = { mappings: {}, DEFAULT_POLLMASK: 5, umask: 511, calculateAt: function(dirfd, path2) {
          if (path2[0] !== "/") {
            var dir;
            if (dirfd === -100) {
              dir = FS.cwd();
            } else {
              var dirstream = FS.getStream(dirfd);
              if (!dirstream) throw new FS.ErrnoError(8);
              dir = dirstream.path;
            }
            path2 = PATH.join2(dir, path2);
          }
          return path2;
        }, doStat: function(func, path2, buf) {
          try {
            var stat = func(path2);
          } catch (e) {
            if (e && e.node && PATH.normalize(path2) !== PATH.normalize(FS.getPath(e.node))) {
              return -54;
            }
            throw e;
          }
          HEAP32[buf >> 2] = stat.dev;
          HEAP32[buf + 4 >> 2] = 0;
          HEAP32[buf + 8 >> 2] = stat.ino;
          HEAP32[buf + 12 >> 2] = stat.mode;
          HEAP32[buf + 16 >> 2] = stat.nlink;
          HEAP32[buf + 20 >> 2] = stat.uid;
          HEAP32[buf + 24 >> 2] = stat.gid;
          HEAP32[buf + 28 >> 2] = stat.rdev;
          HEAP32[buf + 32 >> 2] = 0;
          tempI64 = [stat.size >>> 0, (tempDouble = stat.size, +Math_abs(tempDouble) >= 1 ? tempDouble > 0 ? (Math_min(+Math_floor(tempDouble / 4294967296), 4294967295) | 0) >>> 0 : ~~+Math_ceil((tempDouble - +(~~tempDouble >>> 0)) / 4294967296) >>> 0 : 0)], HEAP32[buf + 40 >> 2] = tempI64[0], HEAP32[buf + 44 >> 2] = tempI64[1];
          HEAP32[buf + 48 >> 2] = 4096;
          HEAP32[buf + 52 >> 2] = stat.blocks;
          HEAP32[buf + 56 >> 2] = stat.atime.getTime() / 1e3 | 0;
          HEAP32[buf + 60 >> 2] = 0;
          HEAP32[buf + 64 >> 2] = stat.mtime.getTime() / 1e3 | 0;
          HEAP32[buf + 68 >> 2] = 0;
          HEAP32[buf + 72 >> 2] = stat.ctime.getTime() / 1e3 | 0;
          HEAP32[buf + 76 >> 2] = 0;
          tempI64 = [stat.ino >>> 0, (tempDouble = stat.ino, +Math_abs(tempDouble) >= 1 ? tempDouble > 0 ? (Math_min(+Math_floor(tempDouble / 4294967296), 4294967295) | 0) >>> 0 : ~~+Math_ceil((tempDouble - +(~~tempDouble >>> 0)) / 4294967296) >>> 0 : 0)], HEAP32[buf + 80 >> 2] = tempI64[0], HEAP32[buf + 84 >> 2] = tempI64[1];
          return 0;
        }, doMsync: function(addr, stream, len, flags, offset) {
          var buffer2 = HEAPU8.slice(addr, addr + len);
          FS.msync(stream, buffer2, offset, len, flags);
        }, doMkdir: function(path2, mode) {
          path2 = PATH.normalize(path2);
          if (path2[path2.length - 1] === "/") path2 = path2.substr(0, path2.length - 1);
          FS.mkdir(path2, mode, 0);
          return 0;
        }, doMknod: function(path2, mode, dev) {
          switch (mode & 61440) {
            case 32768:
            case 8192:
            case 24576:
            case 4096:
            case 49152:
              break;
            default:
              return -28;
          }
          FS.mknod(path2, mode, dev);
          return 0;
        }, doReadlink: function(path2, buf, bufsize) {
          if (bufsize <= 0) return -28;
          var ret = FS.readlink(path2);
          var len = Math.min(bufsize, lengthBytesUTF8(ret));
          var endChar = HEAP8[buf + len];
          stringToUTF8(ret, buf, bufsize + 1);
          HEAP8[buf + len] = endChar;
          return len;
        }, doAccess: function(path2, amode) {
          if (amode & ~7) {
            return -28;
          }
          var node;
          var lookup = FS.lookupPath(path2, { follow: true });
          node = lookup.node;
          if (!node) {
            return -44;
          }
          var perms = "";
          if (amode & 4) perms += "r";
          if (amode & 2) perms += "w";
          if (amode & 1) perms += "x";
          if (perms && FS.nodePermissions(node, perms)) {
            return -2;
          }
          return 0;
        }, doDup: function(path2, flags, suggestFD) {
          var suggest = FS.getStream(suggestFD);
          if (suggest) FS.close(suggest);
          return FS.open(path2, flags, 0, suggestFD, suggestFD).fd;
        }, doReadv: function(stream, iov, iovcnt, offset) {
          var ret = 0;
          for (var i = 0; i < iovcnt; i++) {
            var ptr = HEAP32[iov + i * 8 >> 2];
            var len = HEAP32[iov + (i * 8 + 4) >> 2];
            var curr = FS.read(stream, HEAP8, ptr, len, offset);
            if (curr < 0) return -1;
            ret += curr;
            if (curr < len) break;
          }
          return ret;
        }, doWritev: function(stream, iov, iovcnt, offset) {
          var ret = 0;
          for (var i = 0; i < iovcnt; i++) {
            var ptr = HEAP32[iov + i * 8 >> 2];
            var len = HEAP32[iov + (i * 8 + 4) >> 2];
            var curr = FS.write(stream, HEAP8, ptr, len, offset);
            if (curr < 0) return -1;
            ret += curr;
          }
          return ret;
        }, varargs: void 0, get: function() {
          SYSCALLS.varargs += 4;
          var ret = HEAP32[SYSCALLS.varargs - 4 >> 2];
          return ret;
        }, getStr: function(ptr) {
          var ret = UTF8ToString(ptr);
          return ret;
        }, getStreamFromFD: function(fd) {
          var stream = FS.getStream(fd);
          if (!stream) throw new FS.ErrnoError(8);
          return stream;
        }, get64: function(low, high) {
          return low;
        } };
        function syscallMunmap(addr, len) {
          if ((addr | 0) === -1 || len === 0) {
            return -28;
          }
          var info = SYSCALLS.mappings[addr];
          if (!info) return 0;
          if (len === info.len) {
            var stream = FS.getStream(info.fd);
            if (info.prot & 2) {
              SYSCALLS.doMsync(addr, stream, len, info.flags, info.offset);
            }
            FS.munmap(stream);
            SYSCALLS.mappings[addr] = null;
            if (info.allocated) {
              _free(info.malloc);
            }
          }
          return 0;
        }
        function ___sys_munmap(addr, len) {
          try {
            return syscallMunmap(addr, len);
          } catch (e) {
            if (typeof FS === "undefined" || !(e instanceof FS.ErrnoError)) abort(e);
            return -e.errno;
          }
        }
        var tupleRegistrations = {};
        function runDestructors(destructors) {
          while (destructors.length) {
            var ptr = destructors.pop();
            var del = destructors.pop();
            del(ptr);
          }
        }
        function simpleReadValueFromPointer(pointer) {
          return this["fromWireType"](HEAPU32[pointer >> 2]);
        }
        var awaitingDependencies = {};
        var registeredTypes = {};
        var typeDependencies = {};
        var char_0 = 48;
        var char_9 = 57;
        function makeLegalFunctionName(name) {
          if (void 0 === name) {
            return "_unknown";
          }
          name = name.replace(/[^a-zA-Z0-9_]/g, "$");
          var f = name.charCodeAt(0);
          if (f >= char_0 && f <= char_9) {
            return "_" + name;
          } else {
            return name;
          }
        }
        function createNamedFunction(name, body) {
          name = makeLegalFunctionName(name);
          return new Function("body", "return function " + name + '() {\n    "use strict";    return body.apply(this, arguments);\n};\n')(body);
        }
        function extendError(baseErrorType, errorName) {
          var errorClass = createNamedFunction(errorName, function(message) {
            this.name = errorName;
            this.message = message;
            var stack = new Error(message).stack;
            if (stack !== void 0) {
              this.stack = this.toString() + "\n" + stack.replace(/^Error(:[^\n]*)?\n/, "");
            }
          });
          errorClass.prototype = Object.create(baseErrorType.prototype);
          errorClass.prototype.constructor = errorClass;
          errorClass.prototype.toString = function() {
            if (this.message === void 0) {
              return this.name;
            } else {
              return this.name + ": " + this.message;
            }
          };
          return errorClass;
        }
        var InternalError = void 0;
        function throwInternalError(message) {
          throw new InternalError(message);
        }
        function whenDependentTypesAreResolved(myTypes, dependentTypes, getTypeConverters) {
          myTypes.forEach(function(type) {
            typeDependencies[type] = dependentTypes;
          });
          function onComplete(typeConverters2) {
            var myTypeConverters = getTypeConverters(typeConverters2);
            if (myTypeConverters.length !== myTypes.length) {
              throwInternalError("Mismatched type converter count");
            }
            for (var i = 0; i < myTypes.length; ++i) {
              registerType(myTypes[i], myTypeConverters[i]);
            }
          }
          var typeConverters = new Array(dependentTypes.length);
          var unregisteredTypes = [];
          var registered = 0;
          dependentTypes.forEach(function(dt, i) {
            if (registeredTypes.hasOwnProperty(dt)) {
              typeConverters[i] = registeredTypes[dt];
            } else {
              unregisteredTypes.push(dt);
              if (!awaitingDependencies.hasOwnProperty(dt)) {
                awaitingDependencies[dt] = [];
              }
              awaitingDependencies[dt].push(function() {
                typeConverters[i] = registeredTypes[dt];
                ++registered;
                if (registered === unregisteredTypes.length) {
                  onComplete(typeConverters);
                }
              });
            }
          });
          if (0 === unregisteredTypes.length) {
            onComplete(typeConverters);
          }
        }
        function __embind_finalize_value_array(rawTupleType) {
          var reg = tupleRegistrations[rawTupleType];
          delete tupleRegistrations[rawTupleType];
          var elements = reg.elements;
          var elementsLength = elements.length;
          var elementTypes = elements.map(function(elt) {
            return elt.getterReturnType;
          }).concat(elements.map(function(elt) {
            return elt.setterArgumentType;
          }));
          var rawConstructor = reg.rawConstructor;
          var rawDestructor = reg.rawDestructor;
          whenDependentTypesAreResolved([rawTupleType], elementTypes, function(elementTypes2) {
            elements.forEach(function(elt, i) {
              var getterReturnType = elementTypes2[i];
              var getter = elt.getter;
              var getterContext = elt.getterContext;
              var setterArgumentType = elementTypes2[i + elementsLength];
              var setter = elt.setter;
              var setterContext = elt.setterContext;
              elt.read = function(ptr) {
                return getterReturnType["fromWireType"](getter(getterContext, ptr));
              };
              elt.write = function(ptr, o) {
                var destructors = [];
                setter(setterContext, ptr, setterArgumentType["toWireType"](destructors, o));
                runDestructors(destructors);
              };
            });
            return [{ name: reg.name, "fromWireType": function(ptr) {
              var rv = new Array(elementsLength);
              for (var i = 0; i < elementsLength; ++i) {
                rv[i] = elements[i].read(ptr);
              }
              rawDestructor(ptr);
              return rv;
            }, "toWireType": function(destructors, o) {
              if (elementsLength !== o.length) {
                throw new TypeError("Incorrect number of tuple elements for " + reg.name + ": expected=" + elementsLength + ", actual=" + o.length);
              }
              var ptr = rawConstructor();
              for (var i = 0; i < elementsLength; ++i) {
                elements[i].write(ptr, o[i]);
              }
              if (destructors !== null) {
                destructors.push(rawDestructor, ptr);
              }
              return ptr;
            }, "argPackAdvance": 8, "readValueFromPointer": simpleReadValueFromPointer, destructorFunction: rawDestructor }];
          });
        }
        var structRegistrations = {};
        function __embind_finalize_value_object(structType) {
          var reg = structRegistrations[structType];
          delete structRegistrations[structType];
          var rawConstructor = reg.rawConstructor;
          var rawDestructor = reg.rawDestructor;
          var fieldRecords = reg.fields;
          var fieldTypes = fieldRecords.map(function(field) {
            return field.getterReturnType;
          }).concat(fieldRecords.map(function(field) {
            return field.setterArgumentType;
          }));
          whenDependentTypesAreResolved([structType], fieldTypes, function(fieldTypes2) {
            var fields = {};
            fieldRecords.forEach(function(field, i) {
              var fieldName = field.fieldName;
              var getterReturnType = fieldTypes2[i];
              var getter = field.getter;
              var getterContext = field.getterContext;
              var setterArgumentType = fieldTypes2[i + fieldRecords.length];
              var setter = field.setter;
              var setterContext = field.setterContext;
              fields[fieldName] = { read: function(ptr) {
                return getterReturnType["fromWireType"](getter(getterContext, ptr));
              }, write: function(ptr, o) {
                var destructors = [];
                setter(setterContext, ptr, setterArgumentType["toWireType"](destructors, o));
                runDestructors(destructors);
              } };
            });
            return [{ name: reg.name, "fromWireType": function(ptr) {
              var rv = {};
              for (var i in fields) {
                rv[i] = fields[i].read(ptr);
              }
              rawDestructor(ptr);
              return rv;
            }, "toWireType": function(destructors, o) {
              for (var fieldName in fields) {
                if (!(fieldName in o)) {
                  throw new TypeError('Missing field:  "' + fieldName + '"');
                }
              }
              var ptr = rawConstructor();
              for (fieldName in fields) {
                fields[fieldName].write(ptr, o[fieldName]);
              }
              if (destructors !== null) {
                destructors.push(rawDestructor, ptr);
              }
              return ptr;
            }, "argPackAdvance": 8, "readValueFromPointer": simpleReadValueFromPointer, destructorFunction: rawDestructor }];
          });
        }
        function getShiftFromSize(size) {
          switch (size) {
            case 1:
              return 0;
            case 2:
              return 1;
            case 4:
              return 2;
            case 8:
              return 3;
            default:
              throw new TypeError("Unknown type size: " + size);
          }
        }
        function embind_init_charCodes() {
          var codes = new Array(256);
          for (var i = 0; i < 256; ++i) {
            codes[i] = String.fromCharCode(i);
          }
          embind_charCodes = codes;
        }
        var embind_charCodes = void 0;
        function readLatin1String(ptr) {
          var ret = "";
          var c = ptr;
          while (HEAPU8[c]) {
            ret += embind_charCodes[HEAPU8[c++]];
          }
          return ret;
        }
        var BindingError = void 0;
        function throwBindingError(message) {
          throw new BindingError(message);
        }
        function registerType(rawType, registeredInstance, options) {
          options = options || {};
          if (!("argPackAdvance" in registeredInstance)) {
            throw new TypeError("registerType registeredInstance requires argPackAdvance");
          }
          var name = registeredInstance.name;
          if (!rawType) {
            throwBindingError('type "' + name + '" must have a positive integer typeid pointer');
          }
          if (registeredTypes.hasOwnProperty(rawType)) {
            if (options.ignoreDuplicateRegistrations) {
              return;
            } else {
              throwBindingError("Cannot register type '" + name + "' twice");
            }
          }
          registeredTypes[rawType] = registeredInstance;
          delete typeDependencies[rawType];
          if (awaitingDependencies.hasOwnProperty(rawType)) {
            var callbacks = awaitingDependencies[rawType];
            delete awaitingDependencies[rawType];
            callbacks.forEach(function(cb) {
              cb();
            });
          }
        }
        function __embind_register_bool(rawType, name, size, trueValue, falseValue) {
          var shift = getShiftFromSize(size);
          name = readLatin1String(name);
          registerType(rawType, { name, "fromWireType": function(wt) {
            return !!wt;
          }, "toWireType": function(destructors, o) {
            return o ? trueValue : falseValue;
          }, "argPackAdvance": 8, "readValueFromPointer": function(pointer) {
            var heap;
            if (size === 1) {
              heap = HEAP8;
            } else if (size === 2) {
              heap = HEAP16;
            } else if (size === 4) {
              heap = HEAP32;
            } else {
              throw new TypeError("Unknown boolean type size: " + name);
            }
            return this["fromWireType"](heap[pointer >> shift]);
          }, destructorFunction: null });
        }
        function ClassHandle_isAliasOf(other) {
          if (!(this instanceof ClassHandle)) {
            return false;
          }
          if (!(other instanceof ClassHandle)) {
            return false;
          }
          var leftClass = this.$$.ptrType.registeredClass;
          var left = this.$$.ptr;
          var rightClass = other.$$.ptrType.registeredClass;
          var right = other.$$.ptr;
          while (leftClass.baseClass) {
            left = leftClass.upcast(left);
            leftClass = leftClass.baseClass;
          }
          while (rightClass.baseClass) {
            right = rightClass.upcast(right);
            rightClass = rightClass.baseClass;
          }
          return leftClass === rightClass && left === right;
        }
        function shallowCopyInternalPointer(o) {
          return { count: o.count, deleteScheduled: o.deleteScheduled, preservePointerOnDelete: o.preservePointerOnDelete, ptr: o.ptr, ptrType: o.ptrType, smartPtr: o.smartPtr, smartPtrType: o.smartPtrType };
        }
        function throwInstanceAlreadyDeleted(obj) {
          function getInstanceTypeName(handle) {
            return handle.$$.ptrType.registeredClass.name;
          }
          throwBindingError(getInstanceTypeName(obj) + " instance already deleted");
        }
        var finalizationGroup = false;
        function detachFinalizer(handle) {
        }
        function runDestructor($$) {
          if ($$.smartPtr) {
            $$.smartPtrType.rawDestructor($$.smartPtr);
          } else {
            $$.ptrType.registeredClass.rawDestructor($$.ptr);
          }
        }
        function releaseClassHandle($$) {
          $$.count.value -= 1;
          var toDelete = 0 === $$.count.value;
          if (toDelete) {
            runDestructor($$);
          }
        }
        function attachFinalizer(handle) {
          if ("undefined" === typeof FinalizationGroup) {
            attachFinalizer = function(handle2) {
              return handle2;
            };
            return handle;
          }
          finalizationGroup = new FinalizationGroup(function(iter) {
            for (var result = iter.next(); !result.done; result = iter.next()) {
              var $$ = result.value;
              if (!$$.ptr) {
                console.warn("object already deleted: " + $$.ptr);
              } else {
                releaseClassHandle($$);
              }
            }
          });
          attachFinalizer = function(handle2) {
            finalizationGroup.register(handle2, handle2.$$, handle2.$$);
            return handle2;
          };
          detachFinalizer = function(handle2) {
            finalizationGroup.unregister(handle2.$$);
          };
          return attachFinalizer(handle);
        }
        function ClassHandle_clone() {
          if (!this.$$.ptr) {
            throwInstanceAlreadyDeleted(this);
          }
          if (this.$$.preservePointerOnDelete) {
            this.$$.count.value += 1;
            return this;
          } else {
            var clone = attachFinalizer(Object.create(Object.getPrototypeOf(this), { $$: { value: shallowCopyInternalPointer(this.$$) } }));
            clone.$$.count.value += 1;
            clone.$$.deleteScheduled = false;
            return clone;
          }
        }
        function ClassHandle_delete() {
          if (!this.$$.ptr) {
            throwInstanceAlreadyDeleted(this);
          }
          if (this.$$.deleteScheduled && !this.$$.preservePointerOnDelete) {
            throwBindingError("Object already scheduled for deletion");
          }
          detachFinalizer(this);
          releaseClassHandle(this.$$);
          if (!this.$$.preservePointerOnDelete) {
            this.$$.smartPtr = void 0;
            this.$$.ptr = void 0;
          }
        }
        function ClassHandle_isDeleted() {
          return !this.$$.ptr;
        }
        var delayFunction = void 0;
        var deletionQueue = [];
        function flushPendingDeletes() {
          while (deletionQueue.length) {
            var obj = deletionQueue.pop();
            obj.$$.deleteScheduled = false;
            obj["delete"]();
          }
        }
        function ClassHandle_deleteLater() {
          if (!this.$$.ptr) {
            throwInstanceAlreadyDeleted(this);
          }
          if (this.$$.deleteScheduled && !this.$$.preservePointerOnDelete) {
            throwBindingError("Object already scheduled for deletion");
          }
          deletionQueue.push(this);
          if (deletionQueue.length === 1 && delayFunction) {
            delayFunction(flushPendingDeletes);
          }
          this.$$.deleteScheduled = true;
          return this;
        }
        function init_ClassHandle() {
          ClassHandle.prototype["isAliasOf"] = ClassHandle_isAliasOf;
          ClassHandle.prototype["clone"] = ClassHandle_clone;
          ClassHandle.prototype["delete"] = ClassHandle_delete;
          ClassHandle.prototype["isDeleted"] = ClassHandle_isDeleted;
          ClassHandle.prototype["deleteLater"] = ClassHandle_deleteLater;
        }
        function ClassHandle() {
        }
        var registeredPointers = {};
        function ensureOverloadTable(proto, methodName, humanName) {
          if (void 0 === proto[methodName].overloadTable) {
            var prevFunc = proto[methodName];
            proto[methodName] = function() {
              if (!proto[methodName].overloadTable.hasOwnProperty(arguments.length)) {
                throwBindingError("Function '" + humanName + "' called with an invalid number of arguments (" + arguments.length + ") - expects one of (" + proto[methodName].overloadTable + ")!");
              }
              return proto[methodName].overloadTable[arguments.length].apply(this, arguments);
            };
            proto[methodName].overloadTable = [];
            proto[methodName].overloadTable[prevFunc.argCount] = prevFunc;
          }
        }
        function exposePublicSymbol(name, value, numArguments) {
          if (Module2.hasOwnProperty(name)) {
            if (void 0 === numArguments || void 0 !== Module2[name].overloadTable && void 0 !== Module2[name].overloadTable[numArguments]) {
              throwBindingError("Cannot register public name '" + name + "' twice");
            }
            ensureOverloadTable(Module2, name, name);
            if (Module2.hasOwnProperty(numArguments)) {
              throwBindingError("Cannot register multiple overloads of a function with the same number of arguments (" + numArguments + ")!");
            }
            Module2[name].overloadTable[numArguments] = value;
          } else {
            Module2[name] = value;
            if (void 0 !== numArguments) {
              Module2[name].numArguments = numArguments;
            }
          }
        }
        function RegisteredClass(name, constructor, instancePrototype, rawDestructor, baseClass, getActualType, upcast, downcast) {
          this.name = name;
          this.constructor = constructor;
          this.instancePrototype = instancePrototype;
          this.rawDestructor = rawDestructor;
          this.baseClass = baseClass;
          this.getActualType = getActualType;
          this.upcast = upcast;
          this.downcast = downcast;
          this.pureVirtualFunctions = [];
        }
        function upcastPointer(ptr, ptrClass, desiredClass) {
          while (ptrClass !== desiredClass) {
            if (!ptrClass.upcast) {
              throwBindingError("Expected null or instance of " + desiredClass.name + ", got an instance of " + ptrClass.name);
            }
            ptr = ptrClass.upcast(ptr);
            ptrClass = ptrClass.baseClass;
          }
          return ptr;
        }
        function constNoSmartPtrRawPointerToWireType(destructors, handle) {
          if (handle === null) {
            if (this.isReference) {
              throwBindingError("null is not a valid " + this.name);
            }
            return 0;
          }
          if (!handle.$$) {
            throwBindingError('Cannot pass "' + _embind_repr(handle) + '" as a ' + this.name);
          }
          if (!handle.$$.ptr) {
            throwBindingError("Cannot pass deleted object as a pointer of type " + this.name);
          }
          var handleClass = handle.$$.ptrType.registeredClass;
          var ptr = upcastPointer(handle.$$.ptr, handleClass, this.registeredClass);
          return ptr;
        }
        function genericPointerToWireType(destructors, handle) {
          var ptr;
          if (handle === null) {
            if (this.isReference) {
              throwBindingError("null is not a valid " + this.name);
            }
            if (this.isSmartPointer) {
              ptr = this.rawConstructor();
              if (destructors !== null) {
                destructors.push(this.rawDestructor, ptr);
              }
              return ptr;
            } else {
              return 0;
            }
          }
          if (!handle.$$) {
            throwBindingError('Cannot pass "' + _embind_repr(handle) + '" as a ' + this.name);
          }
          if (!handle.$$.ptr) {
            throwBindingError("Cannot pass deleted object as a pointer of type " + this.name);
          }
          if (!this.isConst && handle.$$.ptrType.isConst) {
            throwBindingError("Cannot convert argument of type " + (handle.$$.smartPtrType ? handle.$$.smartPtrType.name : handle.$$.ptrType.name) + " to parameter type " + this.name);
          }
          var handleClass = handle.$$.ptrType.registeredClass;
          ptr = upcastPointer(handle.$$.ptr, handleClass, this.registeredClass);
          if (this.isSmartPointer) {
            if (void 0 === handle.$$.smartPtr) {
              throwBindingError("Passing raw pointer to smart pointer is illegal");
            }
            switch (this.sharingPolicy) {
              case 0:
                if (handle.$$.smartPtrType === this) {
                  ptr = handle.$$.smartPtr;
                } else {
                  throwBindingError("Cannot convert argument of type " + (handle.$$.smartPtrType ? handle.$$.smartPtrType.name : handle.$$.ptrType.name) + " to parameter type " + this.name);
                }
                break;
              case 1:
                ptr = handle.$$.smartPtr;
                break;
              case 2:
                if (handle.$$.smartPtrType === this) {
                  ptr = handle.$$.smartPtr;
                } else {
                  var clonedHandle = handle["clone"]();
                  ptr = this.rawShare(ptr, __emval_register(function() {
                    clonedHandle["delete"]();
                  }));
                  if (destructors !== null) {
                    destructors.push(this.rawDestructor, ptr);
                  }
                }
                break;
              default:
                throwBindingError("Unsupporting sharing policy");
            }
          }
          return ptr;
        }
        function nonConstNoSmartPtrRawPointerToWireType(destructors, handle) {
          if (handle === null) {
            if (this.isReference) {
              throwBindingError("null is not a valid " + this.name);
            }
            return 0;
          }
          if (!handle.$$) {
            throwBindingError('Cannot pass "' + _embind_repr(handle) + '" as a ' + this.name);
          }
          if (!handle.$$.ptr) {
            throwBindingError("Cannot pass deleted object as a pointer of type " + this.name);
          }
          if (handle.$$.ptrType.isConst) {
            throwBindingError("Cannot convert argument of type " + handle.$$.ptrType.name + " to parameter type " + this.name);
          }
          var handleClass = handle.$$.ptrType.registeredClass;
          var ptr = upcastPointer(handle.$$.ptr, handleClass, this.registeredClass);
          return ptr;
        }
        function RegisteredPointer_getPointee(ptr) {
          if (this.rawGetPointee) {
            ptr = this.rawGetPointee(ptr);
          }
          return ptr;
        }
        function RegisteredPointer_destructor(ptr) {
          if (this.rawDestructor) {
            this.rawDestructor(ptr);
          }
        }
        function RegisteredPointer_deleteObject(handle) {
          if (handle !== null) {
            handle["delete"]();
          }
        }
        function downcastPointer(ptr, ptrClass, desiredClass) {
          if (ptrClass === desiredClass) {
            return ptr;
          }
          if (void 0 === desiredClass.baseClass) {
            return null;
          }
          var rv = downcastPointer(ptr, ptrClass, desiredClass.baseClass);
          if (rv === null) {
            return null;
          }
          return desiredClass.downcast(rv);
        }
        function getInheritedInstanceCount() {
          return Object.keys(registeredInstances).length;
        }
        function getLiveInheritedInstances() {
          var rv = [];
          for (var k in registeredInstances) {
            if (registeredInstances.hasOwnProperty(k)) {
              rv.push(registeredInstances[k]);
            }
          }
          return rv;
        }
        function setDelayFunction(fn) {
          delayFunction = fn;
          if (deletionQueue.length && delayFunction) {
            delayFunction(flushPendingDeletes);
          }
        }
        function init_embind() {
          Module2["getInheritedInstanceCount"] = getInheritedInstanceCount;
          Module2["getLiveInheritedInstances"] = getLiveInheritedInstances;
          Module2["flushPendingDeletes"] = flushPendingDeletes;
          Module2["setDelayFunction"] = setDelayFunction;
        }
        var registeredInstances = {};
        function getBasestPointer(class_, ptr) {
          if (ptr === void 0) {
            throwBindingError("ptr should not be undefined");
          }
          while (class_.baseClass) {
            ptr = class_.upcast(ptr);
            class_ = class_.baseClass;
          }
          return ptr;
        }
        function getInheritedInstance(class_, ptr) {
          ptr = getBasestPointer(class_, ptr);
          return registeredInstances[ptr];
        }
        function makeClassHandle(prototype, record) {
          if (!record.ptrType || !record.ptr) {
            throwInternalError("makeClassHandle requires ptr and ptrType");
          }
          var hasSmartPtrType = !!record.smartPtrType;
          var hasSmartPtr = !!record.smartPtr;
          if (hasSmartPtrType !== hasSmartPtr) {
            throwInternalError("Both smartPtrType and smartPtr must be specified");
          }
          record.count = { value: 1 };
          return attachFinalizer(Object.create(prototype, { $$: { value: record } }));
        }
        function RegisteredPointer_fromWireType(ptr) {
          var rawPointer = this.getPointee(ptr);
          if (!rawPointer) {
            this.destructor(ptr);
            return null;
          }
          var registeredInstance = getInheritedInstance(this.registeredClass, rawPointer);
          if (void 0 !== registeredInstance) {
            if (0 === registeredInstance.$$.count.value) {
              registeredInstance.$$.ptr = rawPointer;
              registeredInstance.$$.smartPtr = ptr;
              return registeredInstance["clone"]();
            } else {
              var rv = registeredInstance["clone"]();
              this.destructor(ptr);
              return rv;
            }
          }
          function makeDefaultHandle() {
            if (this.isSmartPointer) {
              return makeClassHandle(this.registeredClass.instancePrototype, { ptrType: this.pointeeType, ptr: rawPointer, smartPtrType: this, smartPtr: ptr });
            } else {
              return makeClassHandle(this.registeredClass.instancePrototype, { ptrType: this, ptr });
            }
          }
          var actualType = this.registeredClass.getActualType(rawPointer);
          var registeredPointerRecord = registeredPointers[actualType];
          if (!registeredPointerRecord) {
            return makeDefaultHandle.call(this);
          }
          var toType;
          if (this.isConst) {
            toType = registeredPointerRecord.constPointerType;
          } else {
            toType = registeredPointerRecord.pointerType;
          }
          var dp = downcastPointer(rawPointer, this.registeredClass, toType.registeredClass);
          if (dp === null) {
            return makeDefaultHandle.call(this);
          }
          if (this.isSmartPointer) {
            return makeClassHandle(toType.registeredClass.instancePrototype, { ptrType: toType, ptr: dp, smartPtrType: this, smartPtr: ptr });
          } else {
            return makeClassHandle(toType.registeredClass.instancePrototype, { ptrType: toType, ptr: dp });
          }
        }
        function init_RegisteredPointer() {
          RegisteredPointer.prototype.getPointee = RegisteredPointer_getPointee;
          RegisteredPointer.prototype.destructor = RegisteredPointer_destructor;
          RegisteredPointer.prototype["argPackAdvance"] = 8;
          RegisteredPointer.prototype["readValueFromPointer"] = simpleReadValueFromPointer;
          RegisteredPointer.prototype["deleteObject"] = RegisteredPointer_deleteObject;
          RegisteredPointer.prototype["fromWireType"] = RegisteredPointer_fromWireType;
        }
        function RegisteredPointer(name, registeredClass, isReference, isConst, isSmartPointer, pointeeType, sharingPolicy, rawGetPointee, rawConstructor, rawShare, rawDestructor) {
          this.name = name;
          this.registeredClass = registeredClass;
          this.isReference = isReference;
          this.isConst = isConst;
          this.isSmartPointer = isSmartPointer;
          this.pointeeType = pointeeType;
          this.sharingPolicy = sharingPolicy;
          this.rawGetPointee = rawGetPointee;
          this.rawConstructor = rawConstructor;
          this.rawShare = rawShare;
          this.rawDestructor = rawDestructor;
          if (!isSmartPointer && registeredClass.baseClass === void 0) {
            if (isConst) {
              this["toWireType"] = constNoSmartPtrRawPointerToWireType;
              this.destructorFunction = null;
            } else {
              this["toWireType"] = nonConstNoSmartPtrRawPointerToWireType;
              this.destructorFunction = null;
            }
          } else {
            this["toWireType"] = genericPointerToWireType;
          }
        }
        function replacePublicSymbol(name, value, numArguments) {
          if (!Module2.hasOwnProperty(name)) {
            throwInternalError("Replacing nonexistant public symbol");
          }
          if (void 0 !== Module2[name].overloadTable && void 0 !== numArguments) {
            Module2[name].overloadTable[numArguments] = value;
          } else {
            Module2[name] = value;
            Module2[name].argCount = numArguments;
          }
        }
        function embind__requireFunction(signature, rawFunction) {
          signature = readLatin1String(signature);
          function makeDynCaller(dynCall) {
            var args = [];
            for (var i = 1; i < signature.length; ++i) {
              args.push("a" + i);
            }
            var name = "dynCall_" + signature + "_" + rawFunction;
            var body = "return function " + name + "(" + args.join(", ") + ") {\n";
            body += "    return dynCall(rawFunction" + (args.length ? ", " : "") + args.join(", ") + ");\n";
            body += "};\n";
            return new Function("dynCall", "rawFunction", body)(dynCall, rawFunction);
          }
          var dc = Module2["dynCall_" + signature];
          var fp = makeDynCaller(dc);
          if (typeof fp !== "function") {
            throwBindingError("unknown function pointer with signature " + signature + ": " + rawFunction);
          }
          return fp;
        }
        var UnboundTypeError = void 0;
        function getTypeName(type) {
          var ptr = ___getTypeName(type);
          var rv = readLatin1String(ptr);
          _free(ptr);
          return rv;
        }
        function throwUnboundTypeError(message, types) {
          var unboundTypes = [];
          var seen = {};
          function visit(type) {
            if (seen[type]) {
              return;
            }
            if (registeredTypes[type]) {
              return;
            }
            if (typeDependencies[type]) {
              typeDependencies[type].forEach(visit);
              return;
            }
            unboundTypes.push(type);
            seen[type] = true;
          }
          types.forEach(visit);
          throw new UnboundTypeError(message + ": " + unboundTypes.map(getTypeName).join([", "]));
        }
        function __embind_register_class(rawType, rawPointerType, rawConstPointerType, baseClassRawType, getActualTypeSignature, getActualType, upcastSignature, upcast, downcastSignature, downcast, name, destructorSignature, rawDestructor) {
          name = readLatin1String(name);
          getActualType = embind__requireFunction(getActualTypeSignature, getActualType);
          if (upcast) {
            upcast = embind__requireFunction(upcastSignature, upcast);
          }
          if (downcast) {
            downcast = embind__requireFunction(downcastSignature, downcast);
          }
          rawDestructor = embind__requireFunction(destructorSignature, rawDestructor);
          var legalFunctionName = makeLegalFunctionName(name);
          exposePublicSymbol(legalFunctionName, function() {
            throwUnboundTypeError("Cannot construct " + name + " due to unbound types", [baseClassRawType]);
          });
          whenDependentTypesAreResolved([rawType, rawPointerType, rawConstPointerType], baseClassRawType ? [baseClassRawType] : [], function(base) {
            base = base[0];
            var baseClass;
            var basePrototype;
            if (baseClassRawType) {
              baseClass = base.registeredClass;
              basePrototype = baseClass.instancePrototype;
            } else {
              basePrototype = ClassHandle.prototype;
            }
            var constructor = createNamedFunction(legalFunctionName, function() {
              if (Object.getPrototypeOf(this) !== instancePrototype) {
                throw new BindingError("Use 'new' to construct " + name);
              }
              if (void 0 === registeredClass.constructor_body) {
                throw new BindingError(name + " has no accessible constructor");
              }
              var body = registeredClass.constructor_body[arguments.length];
              if (void 0 === body) {
                throw new BindingError("Tried to invoke ctor of " + name + " with invalid number of parameters (" + arguments.length + ") - expected (" + Object.keys(registeredClass.constructor_body).toString() + ") parameters instead!");
              }
              return body.apply(this, arguments);
            });
            var instancePrototype = Object.create(basePrototype, { constructor: { value: constructor } });
            constructor.prototype = instancePrototype;
            var registeredClass = new RegisteredClass(name, constructor, instancePrototype, rawDestructor, baseClass, getActualType, upcast, downcast);
            var referenceConverter = new RegisteredPointer(name, registeredClass, true, false, false);
            var pointerConverter = new RegisteredPointer(name + "*", registeredClass, false, false, false);
            var constPointerConverter = new RegisteredPointer(name + " const*", registeredClass, false, true, false);
            registeredPointers[rawType] = { pointerType: pointerConverter, constPointerType: constPointerConverter };
            replacePublicSymbol(legalFunctionName, constructor);
            return [referenceConverter, pointerConverter, constPointerConverter];
          });
        }
        function new_(constructor, argumentList) {
          if (!(constructor instanceof Function)) {
            throw new TypeError("new_ called with constructor type " + typeof constructor + " which is not a function");
          }
          var dummy = createNamedFunction(constructor.name || "unknownFunctionName", function() {
          });
          dummy.prototype = constructor.prototype;
          var obj = new dummy();
          var r = constructor.apply(obj, argumentList);
          return r instanceof Object ? r : obj;
        }
        function craftInvokerFunction(humanName, argTypes, classType, cppInvokerFunc, cppTargetFunc) {
          var argCount = argTypes.length;
          if (argCount < 2) {
            throwBindingError("argTypes array size mismatch! Must at least get return value and 'this' types!");
          }
          var isClassMethodFunc = argTypes[1] !== null && classType !== null;
          var needsDestructorStack = false;
          for (var i = 1; i < argTypes.length; ++i) {
            if (argTypes[i] !== null && argTypes[i].destructorFunction === void 0) {
              needsDestructorStack = true;
              break;
            }
          }
          var returns = argTypes[0].name !== "void";
          var argsList = "";
          var argsListWired = "";
          for (var i = 0; i < argCount - 2; ++i) {
            argsList += (i !== 0 ? ", " : "") + "arg" + i;
            argsListWired += (i !== 0 ? ", " : "") + "arg" + i + "Wired";
          }
          var invokerFnBody = "return function " + makeLegalFunctionName(humanName) + "(" + argsList + ") {\nif (arguments.length !== " + (argCount - 2) + ") {\nthrowBindingError('function " + humanName + " called with ' + arguments.length + ' arguments, expected " + (argCount - 2) + " args!');\n}\n";
          if (needsDestructorStack) {
            invokerFnBody += "var destructors = [];\n";
          }
          var dtorStack = needsDestructorStack ? "destructors" : "null";
          var args1 = ["throwBindingError", "invoker", "fn", "runDestructors", "retType", "classParam"];
          var args2 = [throwBindingError, cppInvokerFunc, cppTargetFunc, runDestructors, argTypes[0], argTypes[1]];
          if (isClassMethodFunc) {
            invokerFnBody += "var thisWired = classParam.toWireType(" + dtorStack + ", this);\n";
          }
          for (var i = 0; i < argCount - 2; ++i) {
            invokerFnBody += "var arg" + i + "Wired = argType" + i + ".toWireType(" + dtorStack + ", arg" + i + "); // " + argTypes[i + 2].name + "\n";
            args1.push("argType" + i);
            args2.push(argTypes[i + 2]);
          }
          if (isClassMethodFunc) {
            argsListWired = "thisWired" + (argsListWired.length > 0 ? ", " : "") + argsListWired;
          }
          invokerFnBody += (returns ? "var rv = " : "") + "invoker(fn" + (argsListWired.length > 0 ? ", " : "") + argsListWired + ");\n";
          if (needsDestructorStack) {
            invokerFnBody += "runDestructors(destructors);\n";
          } else {
            for (var i = isClassMethodFunc ? 1 : 2; i < argTypes.length; ++i) {
              var paramName = i === 1 ? "thisWired" : "arg" + (i - 2) + "Wired";
              if (argTypes[i].destructorFunction !== null) {
                invokerFnBody += paramName + "_dtor(" + paramName + "); // " + argTypes[i].name + "\n";
                args1.push(paramName + "_dtor");
                args2.push(argTypes[i].destructorFunction);
              }
            }
          }
          if (returns) {
            invokerFnBody += "var ret = retType.fromWireType(rv);\nreturn ret;\n";
          }
          invokerFnBody += "}\n";
          args1.push(invokerFnBody);
          var invokerFunction = new_(Function, args1).apply(null, args2);
          return invokerFunction;
        }
        function heap32VectorToArray(count, firstElement) {
          var array = [];
          for (var i = 0; i < count; i++) {
            array.push(HEAP32[(firstElement >> 2) + i]);
          }
          return array;
        }
        function __embind_register_class_class_function(rawClassType, methodName, argCount, rawArgTypesAddr, invokerSignature, rawInvoker, fn) {
          var rawArgTypes = heap32VectorToArray(argCount, rawArgTypesAddr);
          methodName = readLatin1String(methodName);
          rawInvoker = embind__requireFunction(invokerSignature, rawInvoker);
          whenDependentTypesAreResolved([], [rawClassType], function(classType) {
            classType = classType[0];
            var humanName = classType.name + "." + methodName;
            function unboundTypesHandler() {
              throwUnboundTypeError("Cannot call " + humanName + " due to unbound types", rawArgTypes);
            }
            var proto = classType.registeredClass.constructor;
            if (void 0 === proto[methodName]) {
              unboundTypesHandler.argCount = argCount - 1;
              proto[methodName] = unboundTypesHandler;
            } else {
              ensureOverloadTable(proto, methodName, humanName);
              proto[methodName].overloadTable[argCount - 1] = unboundTypesHandler;
            }
            whenDependentTypesAreResolved([], rawArgTypes, function(argTypes) {
              var invokerArgsArray = [argTypes[0], null].concat(argTypes.slice(1));
              var func = craftInvokerFunction(humanName, invokerArgsArray, null, rawInvoker, fn);
              if (void 0 === proto[methodName].overloadTable) {
                func.argCount = argCount - 1;
                proto[methodName] = func;
              } else {
                proto[methodName].overloadTable[argCount - 1] = func;
              }
              return [];
            });
            return [];
          });
        }
        function __embind_register_class_constructor(rawClassType, argCount, rawArgTypesAddr, invokerSignature, invoker, rawConstructor) {
          assert(argCount > 0);
          var rawArgTypes = heap32VectorToArray(argCount, rawArgTypesAddr);
          invoker = embind__requireFunction(invokerSignature, invoker);
          var args = [rawConstructor];
          var destructors = [];
          whenDependentTypesAreResolved([], [rawClassType], function(classType) {
            classType = classType[0];
            var humanName = "constructor " + classType.name;
            if (void 0 === classType.registeredClass.constructor_body) {
              classType.registeredClass.constructor_body = [];
            }
            if (void 0 !== classType.registeredClass.constructor_body[argCount - 1]) {
              throw new BindingError("Cannot register multiple constructors with identical number of parameters (" + (argCount - 1) + ") for class '" + classType.name + "'! Overload resolution is currently only performed using the parameter count, not actual type info!");
            }
            classType.registeredClass.constructor_body[argCount - 1] = function unboundTypeHandler() {
              throwUnboundTypeError("Cannot construct " + classType.name + " due to unbound types", rawArgTypes);
            };
            whenDependentTypesAreResolved([], rawArgTypes, function(argTypes) {
              classType.registeredClass.constructor_body[argCount - 1] = function constructor_body() {
                if (arguments.length !== argCount - 1) {
                  throwBindingError(humanName + " called with " + arguments.length + " arguments, expected " + (argCount - 1));
                }
                destructors.length = 0;
                args.length = argCount;
                for (var i = 1; i < argCount; ++i) {
                  args[i] = argTypes[i]["toWireType"](destructors, arguments[i - 1]);
                }
                var ptr = invoker.apply(null, args);
                runDestructors(destructors);
                return argTypes[0]["fromWireType"](ptr);
              };
              return [];
            });
            return [];
          });
        }
        function __embind_register_class_function(rawClassType, methodName, argCount, rawArgTypesAddr, invokerSignature, rawInvoker, context, isPureVirtual) {
          var rawArgTypes = heap32VectorToArray(argCount, rawArgTypesAddr);
          methodName = readLatin1String(methodName);
          rawInvoker = embind__requireFunction(invokerSignature, rawInvoker);
          whenDependentTypesAreResolved([], [rawClassType], function(classType) {
            classType = classType[0];
            var humanName = classType.name + "." + methodName;
            if (isPureVirtual) {
              classType.registeredClass.pureVirtualFunctions.push(methodName);
            }
            function unboundTypesHandler() {
              throwUnboundTypeError("Cannot call " + humanName + " due to unbound types", rawArgTypes);
            }
            var proto = classType.registeredClass.instancePrototype;
            var method = proto[methodName];
            if (void 0 === method || void 0 === method.overloadTable && method.className !== classType.name && method.argCount === argCount - 2) {
              unboundTypesHandler.argCount = argCount - 2;
              unboundTypesHandler.className = classType.name;
              proto[methodName] = unboundTypesHandler;
            } else {
              ensureOverloadTable(proto, methodName, humanName);
              proto[methodName].overloadTable[argCount - 2] = unboundTypesHandler;
            }
            whenDependentTypesAreResolved([], rawArgTypes, function(argTypes) {
              var memberFunction = craftInvokerFunction(humanName, argTypes, classType, rawInvoker, context);
              if (void 0 === proto[methodName].overloadTable) {
                memberFunction.argCount = argCount - 2;
                proto[methodName] = memberFunction;
              } else {
                proto[methodName].overloadTable[argCount - 2] = memberFunction;
              }
              return [];
            });
            return [];
          });
        }
        function validateThis(this_, classType, humanName) {
          if (!(this_ instanceof Object)) {
            throwBindingError(humanName + ' with invalid "this": ' + this_);
          }
          if (!(this_ instanceof classType.registeredClass.constructor)) {
            throwBindingError(humanName + ' incompatible with "this" of type ' + this_.constructor.name);
          }
          if (!this_.$$.ptr) {
            throwBindingError("cannot call emscripten binding method " + humanName + " on deleted object");
          }
          return upcastPointer(this_.$$.ptr, this_.$$.ptrType.registeredClass, classType.registeredClass);
        }
        function __embind_register_class_property(classType, fieldName, getterReturnType, getterSignature, getter, getterContext, setterArgumentType, setterSignature, setter, setterContext) {
          fieldName = readLatin1String(fieldName);
          getter = embind__requireFunction(getterSignature, getter);
          whenDependentTypesAreResolved([], [classType], function(classType2) {
            classType2 = classType2[0];
            var humanName = classType2.name + "." + fieldName;
            var desc = { get: function() {
              throwUnboundTypeError("Cannot access " + humanName + " due to unbound types", [getterReturnType, setterArgumentType]);
            }, enumerable: true, configurable: true };
            if (setter) {
              desc.set = function() {
                throwUnboundTypeError("Cannot access " + humanName + " due to unbound types", [getterReturnType, setterArgumentType]);
              };
            } else {
              desc.set = function(v) {
                throwBindingError(humanName + " is a read-only property");
              };
            }
            Object.defineProperty(classType2.registeredClass.instancePrototype, fieldName, desc);
            whenDependentTypesAreResolved([], setter ? [getterReturnType, setterArgumentType] : [getterReturnType], function(types) {
              var getterReturnType2 = types[0];
              var desc2 = { get: function() {
                var ptr = validateThis(this, classType2, humanName + " getter");
                return getterReturnType2["fromWireType"](getter(getterContext, ptr));
              }, enumerable: true };
              if (setter) {
                setter = embind__requireFunction(setterSignature, setter);
                var setterArgumentType2 = types[1];
                desc2.set = function(v) {
                  var ptr = validateThis(this, classType2, humanName + " setter");
                  var destructors = [];
                  setter(setterContext, ptr, setterArgumentType2["toWireType"](destructors, v));
                  runDestructors(destructors);
                };
              }
              Object.defineProperty(classType2.registeredClass.instancePrototype, fieldName, desc2);
              return [];
            });
            return [];
          });
        }
        function __embind_register_constant(name, type, value) {
          name = readLatin1String(name);
          whenDependentTypesAreResolved([], [type], function(type2) {
            type2 = type2[0];
            Module2[name] = type2["fromWireType"](value);
            return [];
          });
        }
        var emval_free_list = [];
        var emval_handle_array = [{}, { value: void 0 }, { value: null }, { value: true }, { value: false }];
        function __emval_decref(handle) {
          if (handle > 4 && 0 === --emval_handle_array[handle].refcount) {
            emval_handle_array[handle] = void 0;
            emval_free_list.push(handle);
          }
        }
        function count_emval_handles() {
          var count = 0;
          for (var i = 5; i < emval_handle_array.length; ++i) {
            if (emval_handle_array[i] !== void 0) {
              ++count;
            }
          }
          return count;
        }
        function get_first_emval() {
          for (var i = 5; i < emval_handle_array.length; ++i) {
            if (emval_handle_array[i] !== void 0) {
              return emval_handle_array[i];
            }
          }
          return null;
        }
        function init_emval() {
          Module2["count_emval_handles"] = count_emval_handles;
          Module2["get_first_emval"] = get_first_emval;
        }
        function __emval_register(value) {
          switch (value) {
            case void 0: {
              return 1;
            }
            case null: {
              return 2;
            }
            case true: {
              return 3;
            }
            case false: {
              return 4;
            }
            default: {
              var handle = emval_free_list.length ? emval_free_list.pop() : emval_handle_array.length;
              emval_handle_array[handle] = { refcount: 1, value };
              return handle;
            }
          }
        }
        function __embind_register_emval(rawType, name) {
          name = readLatin1String(name);
          registerType(rawType, { name, "fromWireType": function(handle) {
            var rv = emval_handle_array[handle].value;
            __emval_decref(handle);
            return rv;
          }, "toWireType": function(destructors, value) {
            return __emval_register(value);
          }, "argPackAdvance": 8, "readValueFromPointer": simpleReadValueFromPointer, destructorFunction: null });
        }
        function _embind_repr(v) {
          if (v === null) {
            return "null";
          }
          var t = typeof v;
          if (t === "object" || t === "array" || t === "function") {
            return v.toString();
          } else {
            return "" + v;
          }
        }
        function floatReadValueFromPointer(name, shift) {
          switch (shift) {
            case 2:
              return function(pointer) {
                return this["fromWireType"](HEAPF32[pointer >> 2]);
              };
            case 3:
              return function(pointer) {
                return this["fromWireType"](HEAPF64[pointer >> 3]);
              };
            default:
              throw new TypeError("Unknown float type: " + name);
          }
        }
        function __embind_register_float(rawType, name, size) {
          var shift = getShiftFromSize(size);
          name = readLatin1String(name);
          registerType(rawType, { name, "fromWireType": function(value) {
            return value;
          }, "toWireType": function(destructors, value) {
            if (typeof value !== "number" && typeof value !== "boolean") {
              throw new TypeError('Cannot convert "' + _embind_repr(value) + '" to ' + this.name);
            }
            return value;
          }, "argPackAdvance": 8, "readValueFromPointer": floatReadValueFromPointer(name, shift), destructorFunction: null });
        }
        function __embind_register_function(name, argCount, rawArgTypesAddr, signature, rawInvoker, fn) {
          var argTypes = heap32VectorToArray(argCount, rawArgTypesAddr);
          name = readLatin1String(name);
          rawInvoker = embind__requireFunction(signature, rawInvoker);
          exposePublicSymbol(name, function() {
            throwUnboundTypeError("Cannot call " + name + " due to unbound types", argTypes);
          }, argCount - 1);
          whenDependentTypesAreResolved([], argTypes, function(argTypes2) {
            var invokerArgsArray = [argTypes2[0], null].concat(argTypes2.slice(1));
            replacePublicSymbol(name, craftInvokerFunction(name, invokerArgsArray, null, rawInvoker, fn), argCount - 1);
            return [];
          });
        }
        function integerReadValueFromPointer(name, shift, signed) {
          switch (shift) {
            case 0:
              return signed ? function readS8FromPointer(pointer) {
                return HEAP8[pointer];
              } : function readU8FromPointer(pointer) {
                return HEAPU8[pointer];
              };
            case 1:
              return signed ? function readS16FromPointer(pointer) {
                return HEAP16[pointer >> 1];
              } : function readU16FromPointer(pointer) {
                return HEAPU16[pointer >> 1];
              };
            case 2:
              return signed ? function readS32FromPointer(pointer) {
                return HEAP32[pointer >> 2];
              } : function readU32FromPointer(pointer) {
                return HEAPU32[pointer >> 2];
              };
            default:
              throw new TypeError("Unknown integer type: " + name);
          }
        }
        function __embind_register_integer(primitiveType, name, size, minRange, maxRange) {
          name = readLatin1String(name);
          if (maxRange === -1) {
            maxRange = 4294967295;
          }
          var shift = getShiftFromSize(size);
          var fromWireType = function(value) {
            return value;
          };
          if (minRange === 0) {
            var bitshift = 32 - 8 * size;
            fromWireType = function(value) {
              return value << bitshift >>> bitshift;
            };
          }
          var isUnsignedType = name.indexOf("unsigned") != -1;
          registerType(primitiveType, { name, "fromWireType": fromWireType, "toWireType": function(destructors, value) {
            if (typeof value !== "number" && typeof value !== "boolean") {
              throw new TypeError('Cannot convert "' + _embind_repr(value) + '" to ' + this.name);
            }
            if (value < minRange || value > maxRange) {
              throw new TypeError('Passing a number "' + _embind_repr(value) + '" from JS side to C/C++ side to an argument of type "' + name + '", which is outside the valid range [' + minRange + ", " + maxRange + "]!");
            }
            return isUnsignedType ? value >>> 0 : value | 0;
          }, "argPackAdvance": 8, "readValueFromPointer": integerReadValueFromPointer(name, shift, minRange !== 0), destructorFunction: null });
        }
        function __embind_register_memory_view(rawType, dataTypeIndex, name) {
          var typeMapping = [Int8Array, Uint8Array, Int16Array, Uint16Array, Int32Array, Uint32Array, Float32Array, Float64Array];
          var TA = typeMapping[dataTypeIndex];
          function decodeMemoryView(handle) {
            handle = handle >> 2;
            var heap = HEAPU32;
            var size = heap[handle];
            var data = heap[handle + 1];
            return new TA(buffer, data, size);
          }
          name = readLatin1String(name);
          registerType(rawType, { name, "fromWireType": decodeMemoryView, "argPackAdvance": 8, "readValueFromPointer": decodeMemoryView }, { ignoreDuplicateRegistrations: true });
        }
        function __embind_register_std_string(rawType, name) {
          name = readLatin1String(name);
          var stdStringIsUTF8 = name === "std::string";
          registerType(rawType, { name, "fromWireType": function(value) {
            var length = HEAPU32[value >> 2];
            var str;
            if (stdStringIsUTF8) {
              var decodeStartPtr = value + 4;
              for (var i = 0; i <= length; ++i) {
                var currentBytePtr = value + 4 + i;
                if (i == length || HEAPU8[currentBytePtr] == 0) {
                  var maxRead = currentBytePtr - decodeStartPtr;
                  var stringSegment = UTF8ToString(decodeStartPtr, maxRead);
                  if (str === void 0) {
                    str = stringSegment;
                  } else {
                    str += String.fromCharCode(0);
                    str += stringSegment;
                  }
                  decodeStartPtr = currentBytePtr + 1;
                }
              }
            } else {
              var a = new Array(length);
              for (var i = 0; i < length; ++i) {
                a[i] = String.fromCharCode(HEAPU8[value + 4 + i]);
              }
              str = a.join("");
            }
            _free(value);
            return str;
          }, "toWireType": function(destructors, value) {
            if (value instanceof ArrayBuffer) {
              value = new Uint8Array(value);
            }
            var getLength;
            var valueIsOfTypeString = typeof value === "string";
            if (!(valueIsOfTypeString || value instanceof Uint8Array || value instanceof Uint8ClampedArray || value instanceof Int8Array)) {
              throwBindingError("Cannot pass non-string to std::string");
            }
            if (stdStringIsUTF8 && valueIsOfTypeString) {
              getLength = function() {
                return lengthBytesUTF8(value);
              };
            } else {
              getLength = function() {
                return value.length;
              };
            }
            var length = getLength();
            var ptr = _malloc(4 + length + 1);
            HEAPU32[ptr >> 2] = length;
            if (stdStringIsUTF8 && valueIsOfTypeString) {
              stringToUTF8(value, ptr + 4, length + 1);
            } else {
              if (valueIsOfTypeString) {
                for (var i = 0; i < length; ++i) {
                  var charCode = value.charCodeAt(i);
                  if (charCode > 255) {
                    _free(ptr);
                    throwBindingError("String has UTF-16 code units that do not fit in 8 bits");
                  }
                  HEAPU8[ptr + 4 + i] = charCode;
                }
              } else {
                for (var i = 0; i < length; ++i) {
                  HEAPU8[ptr + 4 + i] = value[i];
                }
              }
            }
            if (destructors !== null) {
              destructors.push(_free, ptr);
            }
            return ptr;
          }, "argPackAdvance": 8, "readValueFromPointer": simpleReadValueFromPointer, destructorFunction: function(ptr) {
            _free(ptr);
          } });
        }
        function __embind_register_std_wstring(rawType, charSize, name) {
          name = readLatin1String(name);
          var decodeString, encodeString, getHeap, lengthBytesUTF, shift;
          if (charSize === 2) {
            decodeString = UTF16ToString;
            encodeString = stringToUTF16;
            lengthBytesUTF = lengthBytesUTF16;
            getHeap = function() {
              return HEAPU16;
            };
            shift = 1;
          } else if (charSize === 4) {
            decodeString = UTF32ToString;
            encodeString = stringToUTF32;
            lengthBytesUTF = lengthBytesUTF32;
            getHeap = function() {
              return HEAPU32;
            };
            shift = 2;
          }
          registerType(rawType, { name, "fromWireType": function(value) {
            var length = HEAPU32[value >> 2];
            var HEAP = getHeap();
            var str;
            var decodeStartPtr = value + 4;
            for (var i = 0; i <= length; ++i) {
              var currentBytePtr = value + 4 + i * charSize;
              if (i == length || HEAP[currentBytePtr >> shift] == 0) {
                var maxReadBytes = currentBytePtr - decodeStartPtr;
                var stringSegment = decodeString(decodeStartPtr, maxReadBytes);
                if (str === void 0) {
                  str = stringSegment;
                } else {
                  str += String.fromCharCode(0);
                  str += stringSegment;
                }
                decodeStartPtr = currentBytePtr + charSize;
              }
            }
            _free(value);
            return str;
          }, "toWireType": function(destructors, value) {
            if (!(typeof value === "string")) {
              throwBindingError("Cannot pass non-string to C++ string type " + name);
            }
            var length = lengthBytesUTF(value);
            var ptr = _malloc(4 + length + charSize);
            HEAPU32[ptr >> 2] = length >> shift;
            encodeString(value, ptr + 4, length + charSize);
            if (destructors !== null) {
              destructors.push(_free, ptr);
            }
            return ptr;
          }, "argPackAdvance": 8, "readValueFromPointer": simpleReadValueFromPointer, destructorFunction: function(ptr) {
            _free(ptr);
          } });
        }
        function __embind_register_value_array(rawType, name, constructorSignature, rawConstructor, destructorSignature, rawDestructor) {
          tupleRegistrations[rawType] = { name: readLatin1String(name), rawConstructor: embind__requireFunction(constructorSignature, rawConstructor), rawDestructor: embind__requireFunction(destructorSignature, rawDestructor), elements: [] };
        }
        function __embind_register_value_array_element(rawTupleType, getterReturnType, getterSignature, getter, getterContext, setterArgumentType, setterSignature, setter, setterContext) {
          tupleRegistrations[rawTupleType].elements.push({ getterReturnType, getter: embind__requireFunction(getterSignature, getter), getterContext, setterArgumentType, setter: embind__requireFunction(setterSignature, setter), setterContext });
        }
        function __embind_register_value_object(rawType, name, constructorSignature, rawConstructor, destructorSignature, rawDestructor) {
          structRegistrations[rawType] = { name: readLatin1String(name), rawConstructor: embind__requireFunction(constructorSignature, rawConstructor), rawDestructor: embind__requireFunction(destructorSignature, rawDestructor), fields: [] };
        }
        function __embind_register_value_object_field(structType, fieldName, getterReturnType, getterSignature, getter, getterContext, setterArgumentType, setterSignature, setter, setterContext) {
          structRegistrations[structType].fields.push({ fieldName: readLatin1String(fieldName), getterReturnType, getter: embind__requireFunction(getterSignature, getter), getterContext, setterArgumentType, setter: embind__requireFunction(setterSignature, setter), setterContext });
        }
        function __embind_register_void(rawType, name) {
          name = readLatin1String(name);
          registerType(rawType, { isVoid: true, name, "argPackAdvance": 0, "fromWireType": function() {
            return void 0;
          }, "toWireType": function(destructors, o) {
            return void 0;
          } });
        }
        var emval_symbols = {};
        function getStringOrSymbol(address) {
          var symbol = emval_symbols[address];
          if (symbol === void 0) {
            return readLatin1String(address);
          } else {
            return symbol;
          }
        }
        var emval_methodCallers = [];
        function requireHandle(handle) {
          if (!handle) {
            throwBindingError("Cannot use deleted val. handle = " + handle);
          }
          return emval_handle_array[handle].value;
        }
        function __emval_call_void_method(caller, handle, methodName, args) {
          caller = emval_methodCallers[caller];
          handle = requireHandle(handle);
          methodName = getStringOrSymbol(methodName);
          caller(handle, methodName, null, args);
        }
        function __emval_addMethodCaller(caller) {
          var id = emval_methodCallers.length;
          emval_methodCallers.push(caller);
          return id;
        }
        function requireRegisteredType(rawType, humanName) {
          var impl = registeredTypes[rawType];
          if (void 0 === impl) {
            throwBindingError(humanName + " has unknown type " + getTypeName(rawType));
          }
          return impl;
        }
        function __emval_lookupTypes(argCount, argTypes) {
          var a = new Array(argCount);
          for (var i = 0; i < argCount; ++i) {
            a[i] = requireRegisteredType(HEAP32[(argTypes >> 2) + i], "parameter " + i);
          }
          return a;
        }
        function __emval_get_method_caller(argCount, argTypes) {
          var types = __emval_lookupTypes(argCount, argTypes);
          var retType = types[0];
          var signatureName = retType.name + "_$" + types.slice(1).map(function(t) {
            return t.name;
          }).join("_") + "$";
          var params = ["retType"];
          var args = [retType];
          var argsList = "";
          for (var i = 0; i < argCount - 1; ++i) {
            argsList += (i !== 0 ? ", " : "") + "arg" + i;
            params.push("argType" + i);
            args.push(types[1 + i]);
          }
          var functionName = makeLegalFunctionName("methodCaller_" + signatureName);
          var functionBody = "return function " + functionName + "(handle, name, destructors, args) {\n";
          var offset = 0;
          for (var i = 0; i < argCount - 1; ++i) {
            functionBody += "    var arg" + i + " = argType" + i + ".readValueFromPointer(args" + (offset ? "+" + offset : "") + ");\n";
            offset += types[i + 1]["argPackAdvance"];
          }
          functionBody += "    var rv = handle[name](" + argsList + ");\n";
          for (var i = 0; i < argCount - 1; ++i) {
            if (types[i + 1]["deleteObject"]) {
              functionBody += "    argType" + i + ".deleteObject(arg" + i + ");\n";
            }
          }
          if (!retType.isVoid) {
            functionBody += "    return retType.toWireType(destructors, rv);\n";
          }
          functionBody += "};\n";
          params.push(functionBody);
          var invokerFunction = new_(Function, params).apply(null, args);
          return __emval_addMethodCaller(invokerFunction);
        }
        function __emval_incref(handle) {
          if (handle > 4) {
            emval_handle_array[handle].refcount += 1;
          }
        }
        function __emval_new_array() {
          return __emval_register([]);
        }
        function __emval_new_cstring(v) {
          return __emval_register(getStringOrSymbol(v));
        }
        function __emval_set_property(handle, key2, value) {
          handle = requireHandle(handle);
          key2 = requireHandle(key2);
          value = requireHandle(value);
          handle[key2] = value;
        }
        function __emval_take_value(type, argv) {
          type = requireRegisteredType(type, "_emval_take_value");
          var v = type["readValueFromPointer"](argv);
          return __emval_register(v);
        }
        function _abort() {
          abort();
        }
        var _emscripten_get_now_is_monotonic = true;
        function _clock_gettime(clk_id, tp) {
          var now;
          if (clk_id === 0) {
            now = Date.now();
          } else if ((clk_id === 1 || clk_id === 4) && _emscripten_get_now_is_monotonic) {
            now = _emscripten_get_now();
          } else {
            setErrNo(28);
            return -1;
          }
          HEAP32[tp >> 2] = now / 1e3 | 0;
          HEAP32[tp + 4 >> 2] = now % 1e3 * 1e3 * 1e3 | 0;
          return 0;
        }
        function _emscripten_get_sbrk_ptr() {
          return 626976;
        }
        function _emscripten_memcpy_big(dest, src, num) {
          HEAPU8.copyWithin(dest, src, src + num);
        }
        function _emscripten_get_heap_size() {
          return HEAPU8.length;
        }
        function emscripten_realloc_buffer(size) {
          try {
            wasmMemory.grow(size - buffer.byteLength + 65535 >>> 16);
            updateGlobalBufferAndViews(wasmMemory.buffer);
            return 1;
          } catch (e) {
          }
        }
        function _emscripten_resize_heap(requestedSize) {
          requestedSize = requestedSize >>> 0;
          var oldSize = _emscripten_get_heap_size();
          var PAGE_MULTIPLE = 65536;
          var maxHeapSize = 1073741824;
          if (requestedSize > maxHeapSize) {
            return false;
          }
          var minHeapSize = 16777216;
          for (var cutDown = 1; cutDown <= 4; cutDown *= 2) {
            var overGrownHeapSize = oldSize * (1 + 0.2 / cutDown);
            overGrownHeapSize = Math.min(overGrownHeapSize, requestedSize + 100663296);
            var newSize = Math.min(maxHeapSize, alignUp(Math.max(minHeapSize, requestedSize, overGrownHeapSize), PAGE_MULTIPLE));
            var replacement = emscripten_realloc_buffer(newSize);
            if (replacement) {
              return true;
            }
          }
          return false;
        }
        var ENV = {};
        function __getExecutableName() {
          return thisProgram || "./this.program";
        }
        function getEnvStrings() {
          if (!getEnvStrings.strings) {
            var lang = (typeof navigator === "object" && navigator.languages && navigator.languages[0] || "C").replace("-", "_") + ".UTF-8";
            var env = { "USER": "web_user", "LOGNAME": "web_user", "PATH": "/", "PWD": "/", "HOME": "/home/web_user", "LANG": lang, "_": __getExecutableName() };
            for (var x in ENV) {
              env[x] = ENV[x];
            }
            var strings = [];
            for (var x in env) {
              strings.push(x + "=" + env[x]);
            }
            getEnvStrings.strings = strings;
          }
          return getEnvStrings.strings;
        }
        function _environ_get(__environ, environ_buf) {
          var bufSize = 0;
          getEnvStrings().forEach(function(string, i) {
            var ptr = environ_buf + bufSize;
            HEAP32[__environ + i * 4 >> 2] = ptr;
            writeAsciiToMemory(string, ptr);
            bufSize += string.length + 1;
          });
          return 0;
        }
        function _environ_sizes_get(penviron_count, penviron_buf_size) {
          var strings = getEnvStrings();
          HEAP32[penviron_count >> 2] = strings.length;
          var bufSize = 0;
          strings.forEach(function(string) {
            bufSize += string.length + 1;
          });
          HEAP32[penviron_buf_size >> 2] = bufSize;
          return 0;
        }
        function _fd_close(fd) {
          try {
            var stream = SYSCALLS.getStreamFromFD(fd);
            FS.close(stream);
            return 0;
          } catch (e) {
            if (typeof FS === "undefined" || !(e instanceof FS.ErrnoError)) abort(e);
            return e.errno;
          }
        }
        function _fd_read(fd, iov, iovcnt, pnum) {
          try {
            var stream = SYSCALLS.getStreamFromFD(fd);
            var num = SYSCALLS.doReadv(stream, iov, iovcnt);
            HEAP32[pnum >> 2] = num;
            return 0;
          } catch (e) {
            if (typeof FS === "undefined" || !(e instanceof FS.ErrnoError)) abort(e);
            return e.errno;
          }
        }
        function _fd_seek(fd, offset_low, offset_high, whence, newOffset) {
          try {
            var stream = SYSCALLS.getStreamFromFD(fd);
            var HIGH_OFFSET = 4294967296;
            var offset = offset_high * HIGH_OFFSET + (offset_low >>> 0);
            var DOUBLE_LIMIT = 9007199254740992;
            if (offset <= -DOUBLE_LIMIT || offset >= DOUBLE_LIMIT) {
              return -61;
            }
            FS.llseek(stream, offset, whence);
            tempI64 = [stream.position >>> 0, (tempDouble = stream.position, +Math_abs(tempDouble) >= 1 ? tempDouble > 0 ? (Math_min(+Math_floor(tempDouble / 4294967296), 4294967295) | 0) >>> 0 : ~~+Math_ceil((tempDouble - +(~~tempDouble >>> 0)) / 4294967296) >>> 0 : 0)], HEAP32[newOffset >> 2] = tempI64[0], HEAP32[newOffset + 4 >> 2] = tempI64[1];
            if (stream.getdents && offset === 0 && whence === 0) stream.getdents = null;
            return 0;
          } catch (e) {
            if (typeof FS === "undefined" || !(e instanceof FS.ErrnoError)) abort(e);
            return e.errno;
          }
        }
        function _fd_write(fd, iov, iovcnt, pnum) {
          try {
            var stream = SYSCALLS.getStreamFromFD(fd);
            var num = SYSCALLS.doWritev(stream, iov, iovcnt);
            HEAP32[pnum >> 2] = num;
            return 0;
          } catch (e) {
            if (typeof FS === "undefined" || !(e instanceof FS.ErrnoError)) abort(e);
            return e.errno;
          }
        }
        function _pthread_mutexattr_destroy() {
        }
        function _pthread_mutexattr_init() {
        }
        function _pthread_mutexattr_settype() {
        }
        function _setTempRet0($i) {
        }
        function __isLeapYear(year) {
          return year % 4 === 0 && (year % 100 !== 0 || year % 400 === 0);
        }
        function __arraySum(array, index) {
          var sum = 0;
          for (var i = 0; i <= index; sum += array[i++]) {
          }
          return sum;
        }
        var __MONTH_DAYS_LEAP = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
        var __MONTH_DAYS_REGULAR = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
        function __addDays(date, days) {
          var newDate = new Date(date.getTime());
          while (days > 0) {
            var leap = __isLeapYear(newDate.getFullYear());
            var currentMonth = newDate.getMonth();
            var daysInCurrentMonth = (leap ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR)[currentMonth];
            if (days > daysInCurrentMonth - newDate.getDate()) {
              days -= daysInCurrentMonth - newDate.getDate() + 1;
              newDate.setDate(1);
              if (currentMonth < 11) {
                newDate.setMonth(currentMonth + 1);
              } else {
                newDate.setMonth(0);
                newDate.setFullYear(newDate.getFullYear() + 1);
              }
            } else {
              newDate.setDate(newDate.getDate() + days);
              return newDate;
            }
          }
          return newDate;
        }
        function _strftime(s, maxsize, format, tm) {
          var tm_zone = HEAP32[tm + 40 >> 2];
          var date = { tm_sec: HEAP32[tm >> 2], tm_min: HEAP32[tm + 4 >> 2], tm_hour: HEAP32[tm + 8 >> 2], tm_mday: HEAP32[tm + 12 >> 2], tm_mon: HEAP32[tm + 16 >> 2], tm_year: HEAP32[tm + 20 >> 2], tm_wday: HEAP32[tm + 24 >> 2], tm_yday: HEAP32[tm + 28 >> 2], tm_isdst: HEAP32[tm + 32 >> 2], tm_gmtoff: HEAP32[tm + 36 >> 2], tm_zone: tm_zone ? UTF8ToString(tm_zone) : "" };
          var pattern = UTF8ToString(format);
          var EXPANSION_RULES_1 = { "%c": "%a %b %d %H:%M:%S %Y", "%D": "%m/%d/%y", "%F": "%Y-%m-%d", "%h": "%b", "%r": "%I:%M:%S %p", "%R": "%H:%M", "%T": "%H:%M:%S", "%x": "%m/%d/%y", "%X": "%H:%M:%S", "%Ec": "%c", "%EC": "%C", "%Ex": "%m/%d/%y", "%EX": "%H:%M:%S", "%Ey": "%y", "%EY": "%Y", "%Od": "%d", "%Oe": "%e", "%OH": "%H", "%OI": "%I", "%Om": "%m", "%OM": "%M", "%OS": "%S", "%Ou": "%u", "%OU": "%U", "%OV": "%V", "%Ow": "%w", "%OW": "%W", "%Oy": "%y" };
          for (var rule in EXPANSION_RULES_1) {
            pattern = pattern.replace(new RegExp(rule, "g"), EXPANSION_RULES_1[rule]);
          }
          var WEEKDAYS = ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"];
          var MONTHS = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];
          function leadingSomething(value, digits, character2) {
            var str = typeof value === "number" ? value.toString() : value || "";
            while (str.length < digits) {
              str = character2[0] + str;
            }
            return str;
          }
          function leadingNulls(value, digits) {
            return leadingSomething(value, digits, "0");
          }
          function compareByDay(date1, date2) {
            function sgn(value) {
              return value < 0 ? -1 : value > 0 ? 1 : 0;
            }
            var compare;
            if ((compare = sgn(date1.getFullYear() - date2.getFullYear())) === 0) {
              if ((compare = sgn(date1.getMonth() - date2.getMonth())) === 0) {
                compare = sgn(date1.getDate() - date2.getDate());
              }
            }
            return compare;
          }
          function getFirstWeekStartDate(janFourth) {
            switch (janFourth.getDay()) {
              case 0:
                return new Date(janFourth.getFullYear() - 1, 11, 29);
              case 1:
                return janFourth;
              case 2:
                return new Date(janFourth.getFullYear(), 0, 3);
              case 3:
                return new Date(janFourth.getFullYear(), 0, 2);
              case 4:
                return new Date(janFourth.getFullYear(), 0, 1);
              case 5:
                return new Date(janFourth.getFullYear() - 1, 11, 31);
              case 6:
                return new Date(janFourth.getFullYear() - 1, 11, 30);
            }
          }
          function getWeekBasedYear(date2) {
            var thisDate = __addDays(new Date(date2.tm_year + 1900, 0, 1), date2.tm_yday);
            var janFourthThisYear = new Date(thisDate.getFullYear(), 0, 4);
            var janFourthNextYear = new Date(thisDate.getFullYear() + 1, 0, 4);
            var firstWeekStartThisYear = getFirstWeekStartDate(janFourthThisYear);
            var firstWeekStartNextYear = getFirstWeekStartDate(janFourthNextYear);
            if (compareByDay(firstWeekStartThisYear, thisDate) <= 0) {
              if (compareByDay(firstWeekStartNextYear, thisDate) <= 0) {
                return thisDate.getFullYear() + 1;
              } else {
                return thisDate.getFullYear();
              }
            } else {
              return thisDate.getFullYear() - 1;
            }
          }
          var EXPANSION_RULES_2 = { "%a": function(date2) {
            return WEEKDAYS[date2.tm_wday].substring(0, 3);
          }, "%A": function(date2) {
            return WEEKDAYS[date2.tm_wday];
          }, "%b": function(date2) {
            return MONTHS[date2.tm_mon].substring(0, 3);
          }, "%B": function(date2) {
            return MONTHS[date2.tm_mon];
          }, "%C": function(date2) {
            var year = date2.tm_year + 1900;
            return leadingNulls(year / 100 | 0, 2);
          }, "%d": function(date2) {
            return leadingNulls(date2.tm_mday, 2);
          }, "%e": function(date2) {
            return leadingSomething(date2.tm_mday, 2, " ");
          }, "%g": function(date2) {
            return getWeekBasedYear(date2).toString().substring(2);
          }, "%G": function(date2) {
            return getWeekBasedYear(date2);
          }, "%H": function(date2) {
            return leadingNulls(date2.tm_hour, 2);
          }, "%I": function(date2) {
            var twelveHour = date2.tm_hour;
            if (twelveHour == 0) twelveHour = 12;
            else if (twelveHour > 12) twelveHour -= 12;
            return leadingNulls(twelveHour, 2);
          }, "%j": function(date2) {
            return leadingNulls(date2.tm_mday + __arraySum(__isLeapYear(date2.tm_year + 1900) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, date2.tm_mon - 1), 3);
          }, "%m": function(date2) {
            return leadingNulls(date2.tm_mon + 1, 2);
          }, "%M": function(date2) {
            return leadingNulls(date2.tm_min, 2);
          }, "%n": function() {
            return "\n";
          }, "%p": function(date2) {
            if (date2.tm_hour >= 0 && date2.tm_hour < 12) {
              return "AM";
            } else {
              return "PM";
            }
          }, "%S": function(date2) {
            return leadingNulls(date2.tm_sec, 2);
          }, "%t": function() {
            return "	";
          }, "%u": function(date2) {
            return date2.tm_wday || 7;
          }, "%U": function(date2) {
            var janFirst = new Date(date2.tm_year + 1900, 0, 1);
            var firstSunday = janFirst.getDay() === 0 ? janFirst : __addDays(janFirst, 7 - janFirst.getDay());
            var endDate = new Date(date2.tm_year + 1900, date2.tm_mon, date2.tm_mday);
            if (compareByDay(firstSunday, endDate) < 0) {
              var februaryFirstUntilEndMonth = __arraySum(__isLeapYear(endDate.getFullYear()) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, endDate.getMonth() - 1) - 31;
              var firstSundayUntilEndJanuary = 31 - firstSunday.getDate();
              var days = firstSundayUntilEndJanuary + februaryFirstUntilEndMonth + endDate.getDate();
              return leadingNulls(Math.ceil(days / 7), 2);
            }
            return compareByDay(firstSunday, janFirst) === 0 ? "01" : "00";
          }, "%V": function(date2) {
            var janFourthThisYear = new Date(date2.tm_year + 1900, 0, 4);
            var janFourthNextYear = new Date(date2.tm_year + 1901, 0, 4);
            var firstWeekStartThisYear = getFirstWeekStartDate(janFourthThisYear);
            var firstWeekStartNextYear = getFirstWeekStartDate(janFourthNextYear);
            var endDate = __addDays(new Date(date2.tm_year + 1900, 0, 1), date2.tm_yday);
            if (compareByDay(endDate, firstWeekStartThisYear) < 0) {
              return "53";
            }
            if (compareByDay(firstWeekStartNextYear, endDate) <= 0) {
              return "01";
            }
            var daysDifference;
            if (firstWeekStartThisYear.getFullYear() < date2.tm_year + 1900) {
              daysDifference = date2.tm_yday + 32 - firstWeekStartThisYear.getDate();
            } else {
              daysDifference = date2.tm_yday + 1 - firstWeekStartThisYear.getDate();
            }
            return leadingNulls(Math.ceil(daysDifference / 7), 2);
          }, "%w": function(date2) {
            return date2.tm_wday;
          }, "%W": function(date2) {
            var janFirst = new Date(date2.tm_year, 0, 1);
            var firstMonday = janFirst.getDay() === 1 ? janFirst : __addDays(janFirst, janFirst.getDay() === 0 ? 1 : 7 - janFirst.getDay() + 1);
            var endDate = new Date(date2.tm_year + 1900, date2.tm_mon, date2.tm_mday);
            if (compareByDay(firstMonday, endDate) < 0) {
              var februaryFirstUntilEndMonth = __arraySum(__isLeapYear(endDate.getFullYear()) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, endDate.getMonth() - 1) - 31;
              var firstMondayUntilEndJanuary = 31 - firstMonday.getDate();
              var days = firstMondayUntilEndJanuary + februaryFirstUntilEndMonth + endDate.getDate();
              return leadingNulls(Math.ceil(days / 7), 2);
            }
            return compareByDay(firstMonday, janFirst) === 0 ? "01" : "00";
          }, "%y": function(date2) {
            return (date2.tm_year + 1900).toString().substring(2);
          }, "%Y": function(date2) {
            return date2.tm_year + 1900;
          }, "%z": function(date2) {
            var off = date2.tm_gmtoff;
            var ahead = off >= 0;
            off = Math.abs(off) / 60;
            off = off / 60 * 100 + off % 60;
            return (ahead ? "+" : "-") + String("0000" + off).slice(-4);
          }, "%Z": function(date2) {
            return date2.tm_zone;
          }, "%%": function() {
            return "%";
          } };
          for (var rule in EXPANSION_RULES_2) {
            if (pattern.indexOf(rule) >= 0) {
              pattern = pattern.replace(new RegExp(rule, "g"), EXPANSION_RULES_2[rule](date));
            }
          }
          var bytes = intArrayFromString(pattern, false);
          if (bytes.length > maxsize) {
            return 0;
          }
          writeArrayToMemory(bytes, s);
          return bytes.length - 1;
        }
        function _strftime_l(s, maxsize, format, tm) {
          return _strftime(s, maxsize, format, tm);
        }
        Module2["requestFullscreen"] = function Module_requestFullscreen(lockPointer, resizeCanvas) {
          Browser.requestFullscreen(lockPointer, resizeCanvas);
        };
        Module2["requestAnimationFrame"] = function Module_requestAnimationFrame(func) {
          Browser.requestAnimationFrame(func);
        };
        Module2["setCanvasSize"] = function Module_setCanvasSize(width, height, noUpdates) {
          Browser.setCanvasSize(width, height, noUpdates);
        };
        Module2["pauseMainLoop"] = function Module_pauseMainLoop() {
          Browser.mainLoop.pause();
        };
        Module2["resumeMainLoop"] = function Module_resumeMainLoop() {
          Browser.mainLoop.resume();
        };
        Module2["getUserMedia"] = function Module_getUserMedia() {
          Browser.getUserMedia();
        };
        Module2["createContext"] = function Module_createContext(canvas, useWebGL, setInModule, webGLContextAttributes) {
          return Browser.createContext(canvas, useWebGL, setInModule, webGLContextAttributes);
        };
        var FSNode = function(parent, name, mode, rdev) {
          if (!parent) {
            parent = this;
          }
          this.parent = parent;
          this.mount = parent.mount;
          this.mounted = null;
          this.id = FS.nextInode++;
          this.name = name;
          this.mode = mode;
          this.node_ops = {};
          this.stream_ops = {};
          this.rdev = rdev;
        };
        var readMode = 292 | 73;
        var writeMode = 146;
        Object.defineProperties(FSNode.prototype, { read: { get: function() {
          return (this.mode & readMode) === readMode;
        }, set: function(val) {
          val ? this.mode |= readMode : this.mode &= ~readMode;
        } }, write: { get: function() {
          return (this.mode & writeMode) === writeMode;
        }, set: function(val) {
          val ? this.mode |= writeMode : this.mode &= ~writeMode;
        } }, isFolder: { get: function() {
          return FS.isDir(this.mode);
        } }, isDevice: { get: function() {
          return FS.isChrdev(this.mode);
        } } });
        FS.FSNode = FSNode;
        FS.staticInit();
        Module2["FS_createFolder"] = FS.createFolder;
        Module2["FS_createPath"] = FS.createPath;
        Module2["FS_createDataFile"] = FS.createDataFile;
        Module2["FS_createPreloadedFile"] = FS.createPreloadedFile;
        Module2["FS_createLazyFile"] = FS.createLazyFile;
        Module2["FS_createLink"] = FS.createLink;
        Module2["FS_createDevice"] = FS.createDevice;
        Module2["FS_unlink"] = FS.unlink;
        InternalError = Module2["InternalError"] = extendError(Error, "InternalError");
        embind_init_charCodes();
        BindingError = Module2["BindingError"] = extendError(Error, "BindingError");
        init_ClassHandle();
        init_RegisteredPointer();
        init_embind();
        UnboundTypeError = Module2["UnboundTypeError"] = extendError(Error, "UnboundTypeError");
        init_emval();
        function intArrayFromString(stringy, dontAddNull, length) {
          var len = length > 0 ? length : lengthBytesUTF8(stringy) + 1;
          var u8array = new Array(len);
          var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
          if (dontAddNull) u8array.length = numBytesWritten;
          return u8array;
        }
        function intArrayToString(array) {
          var ret = [];
          for (var i = 0; i < array.length; i++) {
            var chr = array[i];
            if (chr > 255) {
              chr &= 255;
            }
            ret.push(String.fromCharCode(chr));
          }
          return ret.join("");
        }
        var decodeBase64 = typeof atob === "function" ? atob : function(input) {
          var keyStr = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
          var output = "";
          var chr1, chr2, chr3;
          var enc1, enc2, enc3, enc4;
          var i = 0;
          input = input.replace(/[^A-Za-z0-9\+\/\=]/g, "");
          do {
            enc1 = keyStr.indexOf(input.charAt(i++));
            enc2 = keyStr.indexOf(input.charAt(i++));
            enc3 = keyStr.indexOf(input.charAt(i++));
            enc4 = keyStr.indexOf(input.charAt(i++));
            chr1 = enc1 << 2 | enc2 >> 4;
            chr2 = (enc2 & 15) << 4 | enc3 >> 2;
            chr3 = (enc3 & 3) << 6 | enc4;
            output = output + String.fromCharCode(chr1);
            if (enc3 !== 64) {
              output = output + String.fromCharCode(chr2);
            }
            if (enc4 !== 64) {
              output = output + String.fromCharCode(chr3);
            }
          } while (i < input.length);
          return output;
        };
        function intArrayFromBase64(s) {
          if (typeof ENVIRONMENT_IS_NODE === "boolean" && ENVIRONMENT_IS_NODE) {
            var buf;
            try {
              buf = Buffer.from(s, "base64");
            } catch (_) {
              buf = new Buffer(s, "base64");
            }
            return new Uint8Array(buf["buffer"], buf["byteOffset"], buf["byteLength"]);
          }
          try {
            var decoded = decodeBase64(s);
            var bytes = new Uint8Array(decoded.length);
            for (var i = 0; i < decoded.length; ++i) {
              bytes[i] = decoded.charCodeAt(i);
            }
            return bytes;
          } catch (_) {
            throw new Error("Converting base64 string to bytes failed.");
          }
        }
        function tryParseAsDataURI(filename) {
          if (!isDataURI(filename)) {
            return;
          }
          return intArrayFromBase64(filename.slice(dataURIPrefix.length));
        }
        var asmLibraryArg = { "__cxa_allocate_exception": ___cxa_allocate_exception, "__cxa_atexit": ___cxa_atexit, "__cxa_throw": ___cxa_throw, "__map_file": ___map_file, "__sys_munmap": ___sys_munmap, "_embind_finalize_value_array": __embind_finalize_value_array, "_embind_finalize_value_object": __embind_finalize_value_object, "_embind_register_bool": __embind_register_bool, "_embind_register_class": __embind_register_class, "_embind_register_class_class_function": __embind_register_class_class_function, "_embind_register_class_constructor": __embind_register_class_constructor, "_embind_register_class_function": __embind_register_class_function, "_embind_register_class_property": __embind_register_class_property, "_embind_register_constant": __embind_register_constant, "_embind_register_emval": __embind_register_emval, "_embind_register_float": __embind_register_float, "_embind_register_function": __embind_register_function, "_embind_register_integer": __embind_register_integer, "_embind_register_memory_view": __embind_register_memory_view, "_embind_register_std_string": __embind_register_std_string, "_embind_register_std_wstring": __embind_register_std_wstring, "_embind_register_value_array": __embind_register_value_array, "_embind_register_value_array_element": __embind_register_value_array_element, "_embind_register_value_object": __embind_register_value_object, "_embind_register_value_object_field": __embind_register_value_object_field, "_embind_register_void": __embind_register_void, "_emval_call_void_method": __emval_call_void_method, "_emval_decref": __emval_decref, "_emval_get_method_caller": __emval_get_method_caller, "_emval_incref": __emval_incref, "_emval_new_array": __emval_new_array, "_emval_new_cstring": __emval_new_cstring, "_emval_set_property": __emval_set_property, "_emval_take_value": __emval_take_value, "abort": _abort, "clock_gettime": _clock_gettime, "emscripten_get_sbrk_ptr": _emscripten_get_sbrk_ptr, "emscripten_memcpy_big": _emscripten_memcpy_big, "emscripten_resize_heap": _emscripten_resize_heap, "environ_get": _environ_get, "environ_sizes_get": _environ_sizes_get, "fd_close": _fd_close, "fd_read": _fd_read, "fd_seek": _fd_seek, "fd_write": _fd_write, "memory": wasmMemory, "pthread_mutexattr_destroy": _pthread_mutexattr_destroy, "pthread_mutexattr_init": _pthread_mutexattr_init, "pthread_mutexattr_settype": _pthread_mutexattr_settype, "setTempRet0": _setTempRet0, "strftime_l": _strftime_l, "table": wasmTable };
        createWasm();
        var ___wasm_call_ctors = Module2["___wasm_call_ctors"] = function() {
          return (___wasm_call_ctors = Module2["___wasm_call_ctors"] = Module2["asm"]["__wasm_call_ctors"]).apply(null, arguments);
        };
        var _malloc = Module2["_malloc"] = function() {
          return (_malloc = Module2["_malloc"] = Module2["asm"]["malloc"]).apply(null, arguments);
        };
        var _free = Module2["_free"] = function() {
          return (_free = Module2["_free"] = Module2["asm"]["free"]).apply(null, arguments);
        };
        var ___errno_location = Module2["___errno_location"] = function() {
          return (___errno_location = Module2["___errno_location"] = Module2["asm"]["__errno_location"]).apply(null, arguments);
        };
        var ___getTypeName = Module2["___getTypeName"] = function() {
          return (___getTypeName = Module2["___getTypeName"] = Module2["asm"]["__getTypeName"]).apply(null, arguments);
        };
        Module2["___embind_register_native_and_builtin_types"] = function() {
          return (Module2["___embind_register_native_and_builtin_types"] = Module2["asm"]["__embind_register_native_and_builtin_types"]).apply(null, arguments);
        };
        Module2["_setThrew"] = function() {
          return (Module2["_setThrew"] = Module2["asm"]["setThrew"]).apply(null, arguments);
        };
        var stackSave = Module2["stackSave"] = function() {
          return (stackSave = Module2["stackSave"] = Module2["asm"]["stackSave"]).apply(null, arguments);
        };
        var stackRestore = Module2["stackRestore"] = function() {
          return (stackRestore = Module2["stackRestore"] = Module2["asm"]["stackRestore"]).apply(null, arguments);
        };
        var stackAlloc = Module2["stackAlloc"] = function() {
          return (stackAlloc = Module2["stackAlloc"] = Module2["asm"]["stackAlloc"]).apply(null, arguments);
        };
        Module2["___cxa_demangle"] = function() {
          return (Module2["___cxa_demangle"] = Module2["asm"]["__cxa_demangle"]).apply(null, arguments);
        };
        Module2["_emscripten_main_thread_process_queued_calls"] = function() {
          return (Module2["_emscripten_main_thread_process_queued_calls"] = Module2["asm"]["emscripten_main_thread_process_queued_calls"]).apply(null, arguments);
        };
        Module2["__growWasmMemory"] = function() {
          return (Module2["__growWasmMemory"] = Module2["asm"]["__growWasmMemory"]).apply(null, arguments);
        };
        Module2["dynCall_ii"] = function() {
          return (Module2["dynCall_ii"] = Module2["asm"]["dynCall_ii"]).apply(null, arguments);
        };
        Module2["dynCall_vi"] = function() {
          return (Module2["dynCall_vi"] = Module2["asm"]["dynCall_vi"]).apply(null, arguments);
        };
        Module2["dynCall_i"] = function() {
          return (Module2["dynCall_i"] = Module2["asm"]["dynCall_i"]).apply(null, arguments);
        };
        Module2["dynCall_iii"] = function() {
          return (Module2["dynCall_iii"] = Module2["asm"]["dynCall_iii"]).apply(null, arguments);
        };
        Module2["dynCall_iiii"] = function() {
          return (Module2["dynCall_iiii"] = Module2["asm"]["dynCall_iiii"]).apply(null, arguments);
        };
        Module2["dynCall_iiiii"] = function() {
          return (Module2["dynCall_iiiii"] = Module2["asm"]["dynCall_iiiii"]).apply(null, arguments);
        };
        Module2["dynCall_iiiiii"] = function() {
          return (Module2["dynCall_iiiiii"] = Module2["asm"]["dynCall_iiiiii"]).apply(null, arguments);
        };
        Module2["dynCall_iiiiiii"] = function() {
          return (Module2["dynCall_iiiiiii"] = Module2["asm"]["dynCall_iiiiiii"]).apply(null, arguments);
        };
        Module2["dynCall_viii"] = function() {
          return (Module2["dynCall_viii"] = Module2["asm"]["dynCall_viii"]).apply(null, arguments);
        };
        Module2["dynCall_viiii"] = function() {
          return (Module2["dynCall_viiii"] = Module2["asm"]["dynCall_viiii"]).apply(null, arguments);
        };
        Module2["dynCall_vii"] = function() {
          return (Module2["dynCall_vii"] = Module2["asm"]["dynCall_vii"]).apply(null, arguments);
        };
        Module2["dynCall_viiidd"] = function() {
          return (Module2["dynCall_viiidd"] = Module2["asm"]["dynCall_viiidd"]).apply(null, arguments);
        };
        Module2["dynCall_viiiidd"] = function() {
          return (Module2["dynCall_viiiidd"] = Module2["asm"]["dynCall_viiiidd"]).apply(null, arguments);
        };
        Module2["dynCall_viiid"] = function() {
          return (Module2["dynCall_viiid"] = Module2["asm"]["dynCall_viiid"]).apply(null, arguments);
        };
        Module2["dynCall_viiiid"] = function() {
          return (Module2["dynCall_viiiid"] = Module2["asm"]["dynCall_viiiid"]).apply(null, arguments);
        };
        Module2["dynCall_viiiii"] = function() {
          return (Module2["dynCall_viiiii"] = Module2["asm"]["dynCall_viiiii"]).apply(null, arguments);
        };
        Module2["dynCall_dii"] = function() {
          return (Module2["dynCall_dii"] = Module2["asm"]["dynCall_dii"]).apply(null, arguments);
        };
        Module2["dynCall_diii"] = function() {
          return (Module2["dynCall_diii"] = Module2["asm"]["dynCall_diii"]).apply(null, arguments);
        };
        Module2["dynCall_iiiid"] = function() {
          return (Module2["dynCall_iiiid"] = Module2["asm"]["dynCall_iiiid"]).apply(null, arguments);
        };
        Module2["dynCall_fiii"] = function() {
          return (Module2["dynCall_fiii"] = Module2["asm"]["dynCall_fiii"]).apply(null, arguments);
        };
        Module2["dynCall_fiiii"] = function() {
          return (Module2["dynCall_fiiii"] = Module2["asm"]["dynCall_fiiii"]).apply(null, arguments);
        };
        Module2["dynCall_fiiiii"] = function() {
          return (Module2["dynCall_fiiiii"] = Module2["asm"]["dynCall_fiiiii"]).apply(null, arguments);
        };
        Module2["dynCall_diiiii"] = function() {
          return (Module2["dynCall_diiiii"] = Module2["asm"]["dynCall_diiiii"]).apply(null, arguments);
        };
        Module2["dynCall_diiii"] = function() {
          return (Module2["dynCall_diiii"] = Module2["asm"]["dynCall_diiii"]).apply(null, arguments);
        };
        Module2["dynCall_viid"] = function() {
          return (Module2["dynCall_viid"] = Module2["asm"]["dynCall_viid"]).apply(null, arguments);
        };
        Module2["dynCall_fii"] = function() {
          return (Module2["dynCall_fii"] = Module2["asm"]["dynCall_fii"]).apply(null, arguments);
        };
        Module2["dynCall_viif"] = function() {
          return (Module2["dynCall_viif"] = Module2["asm"]["dynCall_viif"]).apply(null, arguments);
        };
        Module2["dynCall_iiiiiiiiii"] = function() {
          return (Module2["dynCall_iiiiiiiiii"] = Module2["asm"]["dynCall_iiiiiiiiii"]).apply(null, arguments);
        };
        Module2["dynCall_iiiiiiiii"] = function() {
          return (Module2["dynCall_iiiiiiiii"] = Module2["asm"]["dynCall_iiiiiiiii"]).apply(null, arguments);
        };
        Module2["dynCall_iiiiiiii"] = function() {
          return (Module2["dynCall_iiiiiiii"] = Module2["asm"]["dynCall_iiiiiiii"]).apply(null, arguments);
        };
        Module2["dynCall_viiif"] = function() {
          return (Module2["dynCall_viiif"] = Module2["asm"]["dynCall_viiif"]).apply(null, arguments);
        };
        Module2["dynCall_iiiif"] = function() {
          return (Module2["dynCall_iiiif"] = Module2["asm"]["dynCall_iiiif"]).apply(null, arguments);
        };
        Module2["dynCall_viiiiiii"] = function() {
          return (Module2["dynCall_viiiiiii"] = Module2["asm"]["dynCall_viiiiiii"]).apply(null, arguments);
        };
        Module2["dynCall_viiiiii"] = function() {
          return (Module2["dynCall_viiiiii"] = Module2["asm"]["dynCall_viiiiii"]).apply(null, arguments);
        };
        Module2["dynCall_iiidd"] = function() {
          return (Module2["dynCall_iiidd"] = Module2["asm"]["dynCall_iiidd"]).apply(null, arguments);
        };
        Module2["dynCall_viidd"] = function() {
          return (Module2["dynCall_viidd"] = Module2["asm"]["dynCall_viidd"]).apply(null, arguments);
        };
        Module2["dynCall_viiiiddi"] = function() {
          return (Module2["dynCall_viiiiddi"] = Module2["asm"]["dynCall_viiiiddi"]).apply(null, arguments);
        };
        Module2["dynCall_viiiddi"] = function() {
          return (Module2["dynCall_viiiddi"] = Module2["asm"]["dynCall_viiiddi"]).apply(null, arguments);
        };
        Module2["dynCall_viiiiiiii"] = function() {
          return (Module2["dynCall_viiiiiiii"] = Module2["asm"]["dynCall_viiiiiiii"]).apply(null, arguments);
        };
        Module2["dynCall_viijii"] = function() {
          return (Module2["dynCall_viijii"] = Module2["asm"]["dynCall_viijii"]).apply(null, arguments);
        };
        Module2["dynCall_ji"] = function() {
          return (Module2["dynCall_ji"] = Module2["asm"]["dynCall_ji"]).apply(null, arguments);
        };
        Module2["dynCall_viiiiiiiii"] = function() {
          return (Module2["dynCall_viiiiiiiii"] = Module2["asm"]["dynCall_viiiiiiiii"]).apply(null, arguments);
        };
        Module2["dynCall_viiiiiiiddi"] = function() {
          return (Module2["dynCall_viiiiiiiddi"] = Module2["asm"]["dynCall_viiiiiiiddi"]).apply(null, arguments);
        };
        Module2["dynCall_viiiiiiiiiiddi"] = function() {
          return (Module2["dynCall_viiiiiiiiiiddi"] = Module2["asm"]["dynCall_viiiiiiiiiiddi"]).apply(null, arguments);
        };
        Module2["dynCall_viiiiiiiiii"] = function() {
          return (Module2["dynCall_viiiiiiiiii"] = Module2["asm"]["dynCall_viiiiiiiiii"]).apply(null, arguments);
        };
        Module2["dynCall_viidi"] = function() {
          return (Module2["dynCall_viidi"] = Module2["asm"]["dynCall_viidi"]).apply(null, arguments);
        };
        Module2["dynCall_vidii"] = function() {
          return (Module2["dynCall_vidii"] = Module2["asm"]["dynCall_vidii"]).apply(null, arguments);
        };
        Module2["dynCall_v"] = function() {
          return (Module2["dynCall_v"] = Module2["asm"]["dynCall_v"]).apply(null, arguments);
        };
        Module2["dynCall_viiiiiiiiidd"] = function() {
          return (Module2["dynCall_viiiiiiiiidd"] = Module2["asm"]["dynCall_viiiiiiiiidd"]).apply(null, arguments);
        };
        Module2["dynCall_jiji"] = function() {
          return (Module2["dynCall_jiji"] = Module2["asm"]["dynCall_jiji"]).apply(null, arguments);
        };
        Module2["dynCall_iidiiii"] = function() {
          return (Module2["dynCall_iidiiii"] = Module2["asm"]["dynCall_iidiiii"]).apply(null, arguments);
        };
        Module2["dynCall_iiiiij"] = function() {
          return (Module2["dynCall_iiiiij"] = Module2["asm"]["dynCall_iiiiij"]).apply(null, arguments);
        };
        Module2["dynCall_iiiiid"] = function() {
          return (Module2["dynCall_iiiiid"] = Module2["asm"]["dynCall_iiiiid"]).apply(null, arguments);
        };
        Module2["dynCall_iiiiijj"] = function() {
          return (Module2["dynCall_iiiiijj"] = Module2["asm"]["dynCall_iiiiijj"]).apply(null, arguments);
        };
        Module2["dynCall_iiiiiijj"] = function() {
          return (Module2["dynCall_iiiiiijj"] = Module2["asm"]["dynCall_iiiiiijj"]).apply(null, arguments);
        };
        Module2["getMemory"] = getMemory;
        Module2["addRunDependency"] = addRunDependency;
        Module2["removeRunDependency"] = removeRunDependency;
        Module2["FS_createFolder"] = FS.createFolder;
        Module2["FS_createPath"] = FS.createPath;
        Module2["FS_createDataFile"] = FS.createDataFile;
        Module2["FS_createPreloadedFile"] = FS.createPreloadedFile;
        Module2["FS_createLazyFile"] = FS.createLazyFile;
        Module2["FS_createLink"] = FS.createLink;
        Module2["FS_createDevice"] = FS.createDevice;
        Module2["FS_unlink"] = FS.unlink;
        var calledRun;
        function ExitStatus(status) {
          this.name = "ExitStatus";
          this.message = "Program terminated with exit(" + status + ")";
          this.status = status;
        }
        dependenciesFulfilled = function runCaller() {
          if (!calledRun) run();
          if (!calledRun) dependenciesFulfilled = runCaller;
        };
        function run(args) {
          if (runDependencies > 0) {
            return;
          }
          preRun();
          if (runDependencies > 0) return;
          function doRun() {
            if (calledRun) return;
            calledRun = true;
            Module2["calledRun"] = true;
            if (ABORT) return;
            initRuntime();
            preMain();
            readyPromiseResolve(Module2);
            if (Module2["onRuntimeInitialized"]) Module2["onRuntimeInitialized"]();
            postRun();
          }
          if (Module2["setStatus"]) {
            Module2["setStatus"]("Running...");
            setTimeout(function() {
              setTimeout(function() {
                Module2["setStatus"]("");
              }, 1);
              doRun();
            }, 1);
          } else {
            doRun();
          }
        }
        Module2["run"] = run;
        if (Module2["preInit"]) {
          if (typeof Module2["preInit"] == "function") Module2["preInit"] = [Module2["preInit"]];
          while (Module2["preInit"].length > 0) {
            Module2["preInit"].pop()();
          }
        }
        run();
        if (typeof Module2.FS === "undefined" && typeof FS !== "undefined") {
          Module2.FS = FS;
        }
        Module2["imread"] = function(imageSource) {
          var img = null;
          if (typeof imageSource === "string") {
            img = document.getElementById(imageSource);
          } else {
            img = imageSource;
          }
          var canvas = null;
          var ctx = null;
          if (img instanceof HTMLImageElement) {
            canvas = document.createElement("canvas");
            canvas.width = img.width;
            canvas.height = img.height;
            ctx = canvas.getContext("2d");
            ctx.drawImage(img, 0, 0, img.width, img.height);
          } else if (img instanceof HTMLCanvasElement) {
            canvas = img;
            ctx = canvas.getContext("2d");
          } else {
            throw new Error("Please input the valid canvas or img id.");
          }
          var imgData = ctx.getImageData(0, 0, canvas.width, canvas.height);
          return cv2.matFromImageData(imgData);
        };
        Module2["imshow"] = function(canvasSource, mat) {
          var canvas = null;
          if (typeof canvasSource === "string") {
            canvas = document.getElementById(canvasSource);
          } else {
            canvas = canvasSource;
          }
          if (!(canvas instanceof HTMLCanvasElement)) {
            throw new Error("Please input the valid canvas element or id.");
          }
          if (!(mat instanceof cv2.Mat)) {
            throw new Error("Please input the valid cv.Mat instance.");
          }
          var img = new cv2.Mat();
          var depth = mat.type() % 8;
          var scale = depth <= cv2.CV_8S ? 1 : depth <= cv2.CV_32S ? 1 / 256 : 255;
          var shift = depth === cv2.CV_8S || depth === cv2.CV_16S ? 128 : 0;
          mat.convertTo(img, cv2.CV_8U, scale, shift);
          switch (img.type()) {
            case cv2.CV_8UC1:
              cv2.cvtColor(img, img, cv2.COLOR_GRAY2RGBA);
              break;
            case cv2.CV_8UC3:
              cv2.cvtColor(img, img, cv2.COLOR_RGB2RGBA);
              break;
            case cv2.CV_8UC4:
              break;
            default:
              throw new Error("Bad number of channels (Source image must have 1, 3 or 4 channels)");
          }
          var imgData = new ImageData(new Uint8ClampedArray(img.data), img.cols, img.rows);
          var ctx = canvas.getContext("2d");
          ctx.clearRect(0, 0, canvas.width, canvas.height);
          canvas.width = imgData.width;
          canvas.height = imgData.height;
          ctx.putImageData(imgData, 0, 0);
          img.delete();
        };
        Module2["VideoCapture"] = function(videoSource) {
          var video = null;
          if (typeof videoSource === "string") {
            video = document.getElementById(videoSource);
          } else {
            video = videoSource;
          }
          if (!(video instanceof HTMLVideoElement)) {
            throw new Error("Please input the valid video element or id.");
          }
          var canvas = document.createElement("canvas");
          canvas.width = video.width;
          canvas.height = video.height;
          var ctx = canvas.getContext("2d");
          this.video = video;
          this.read = function(frame) {
            if (!(frame instanceof cv2.Mat)) {
              throw new Error("Please input the valid cv.Mat instance.");
            }
            if (frame.type() !== cv2.CV_8UC4) {
              throw new Error("Bad type of input mat: the type should be cv.CV_8UC4.");
            }
            if (frame.cols !== video.width || frame.rows !== video.height) {
              throw new Error("Bad size of input mat: the size should be same as the video.");
            }
            ctx.drawImage(video, 0, 0, video.width, video.height);
            frame.data.set(ctx.getImageData(0, 0, video.width, video.height).data);
          };
        };
        function Range(start, end) {
          this.start = typeof start === "undefined" ? 0 : start;
          this.end = typeof end === "undefined" ? 0 : end;
        }
        Module2["Range"] = Range;
        function Point(x, y) {
          this.x = typeof x === "undefined" ? 0 : x;
          this.y = typeof y === "undefined" ? 0 : y;
        }
        Module2["Point"] = Point;
        function Size(width, height) {
          this.width = typeof width === "undefined" ? 0 : width;
          this.height = typeof height === "undefined" ? 0 : height;
        }
        Module2["Size"] = Size;
        function Rect() {
          switch (arguments.length) {
            case 0: {
              this.x = 0;
              this.y = 0;
              this.width = 0;
              this.height = 0;
              break;
            }
            case 1: {
              var rect = arguments[0];
              this.x = rect.x;
              this.y = rect.y;
              this.width = rect.width;
              this.height = rect.height;
              break;
            }
            case 2: {
              var point = arguments[0];
              var size = arguments[1];
              this.x = point.x;
              this.y = point.y;
              this.width = size.width;
              this.height = size.height;
              break;
            }
            case 4: {
              this.x = arguments[0];
              this.y = arguments[1];
              this.width = arguments[2];
              this.height = arguments[3];
              break;
            }
            default: {
              throw new Error("Invalid arguments");
            }
          }
        }
        Module2["Rect"] = Rect;
        function RotatedRect() {
          switch (arguments.length) {
            case 0: {
              this.center = { x: 0, y: 0 };
              this.size = { width: 0, height: 0 };
              this.angle = 0;
              break;
            }
            case 3: {
              this.center = arguments[0];
              this.size = arguments[1];
              this.angle = arguments[2];
              break;
            }
            default: {
              throw new Error("Invalid arguments");
            }
          }
        }
        RotatedRect.points = function(obj) {
          return Module2.rotatedRectPoints(obj);
        };
        RotatedRect.boundingRect = function(obj) {
          return Module2.rotatedRectBoundingRect(obj);
        };
        RotatedRect.boundingRect2f = function(obj) {
          return Module2.rotatedRectBoundingRect2f(obj);
        };
        Module2["RotatedRect"] = RotatedRect;
        function Scalar(v0, v1, v2, v3) {
          this.push(typeof v0 === "undefined" ? 0 : v0);
          this.push(typeof v1 === "undefined" ? 0 : v1);
          this.push(typeof v2 === "undefined" ? 0 : v2);
          this.push(typeof v3 === "undefined" ? 0 : v3);
        }
        Scalar.prototype = new Array();
        Scalar.all = function(v) {
          return new Scalar(v, v, v, v);
        };
        Module2["Scalar"] = Scalar;
        function MinMaxLoc() {
          switch (arguments.length) {
            case 0: {
              this.minVal = 0;
              this.maxVal = 0;
              this.minLoc = new Point();
              this.maxLoc = new Point();
              break;
            }
            case 4: {
              this.minVal = arguments[0];
              this.maxVal = arguments[1];
              this.minLoc = arguments[2];
              this.maxLoc = arguments[3];
              break;
            }
            default: {
              throw new Error("Invalid arguments");
            }
          }
        }
        Module2["MinMaxLoc"] = MinMaxLoc;
        function Circle() {
          switch (arguments.length) {
            case 0: {
              this.center = new Point();
              this.radius = 0;
              break;
            }
            case 2: {
              this.center = arguments[0];
              this.radius = arguments[1];
              break;
            }
            default: {
              throw new Error("Invalid arguments");
            }
          }
        }
        Module2["Circle"] = Circle;
        function TermCriteria() {
          switch (arguments.length) {
            case 0: {
              this.type = 0;
              this.maxCount = 0;
              this.epsilon = 0;
              break;
            }
            case 3: {
              this.type = arguments[0];
              this.maxCount = arguments[1];
              this.epsilon = arguments[2];
              break;
            }
            default: {
              throw new Error("Invalid arguments");
            }
          }
        }
        Module2["TermCriteria"] = TermCriteria;
        Module2["matFromArray"] = function(rows, cols, type, array) {
          var mat = new cv2.Mat(rows, cols, type);
          switch (type) {
            case cv2.CV_8U:
            case cv2.CV_8UC1:
            case cv2.CV_8UC2:
            case cv2.CV_8UC3:
            case cv2.CV_8UC4: {
              mat.data.set(array);
              break;
            }
            case cv2.CV_8S:
            case cv2.CV_8SC1:
            case cv2.CV_8SC2:
            case cv2.CV_8SC3:
            case cv2.CV_8SC4: {
              mat.data8S.set(array);
              break;
            }
            case cv2.CV_16U:
            case cv2.CV_16UC1:
            case cv2.CV_16UC2:
            case cv2.CV_16UC3:
            case cv2.CV_16UC4: {
              mat.data16U.set(array);
              break;
            }
            case cv2.CV_16S:
            case cv2.CV_16SC1:
            case cv2.CV_16SC2:
            case cv2.CV_16SC3:
            case cv2.CV_16SC4: {
              mat.data16S.set(array);
              break;
            }
            case cv2.CV_32S:
            case cv2.CV_32SC1:
            case cv2.CV_32SC2:
            case cv2.CV_32SC3:
            case cv2.CV_32SC4: {
              mat.data32S.set(array);
              break;
            }
            case cv2.CV_32F:
            case cv2.CV_32FC1:
            case cv2.CV_32FC2:
            case cv2.CV_32FC3:
            case cv2.CV_32FC4: {
              mat.data32F.set(array);
              break;
            }
            case cv2.CV_64F:
            case cv2.CV_64FC1:
            case cv2.CV_64FC2:
            case cv2.CV_64FC3:
            case cv2.CV_64FC4: {
              mat.data64F.set(array);
              break;
            }
            default: {
              throw new Error("Type is unsupported");
            }
          }
          return mat;
        };
        Module2["matFromImageData"] = function(imageData) {
          var mat = new cv2.Mat(imageData.height, imageData.width, cv2.CV_8UC4);
          mat.data.set(imageData.data);
          return mat;
        };
        return cv2;
      };
    }();
    module2.exports = cv;
    if (typeof Module === "undefined") {var Module = {}};
    return cv(Module);
  });
});
function flatten(arr) {
  return arr.toString().split(",").map(function(item) {
    return +item;
  });
}
function _int(num) {
  return num > 0 ? Math.floor(num) : Math.ceil(num);
}
function clip(data, min, max) {
  return data < min ? min : data > max ? max : data;
}
var DBPostprocess = /* @__PURE__ */ function() {
  function DBPostprocess2(result, shape) {
    var _this = this;
    var thresh = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 0.3;
    var box_thresh = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : 0.6;
    var unclip_ratio = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : 1.5;
    _classCallCheck(this, DBPostprocess2);
    _defineProperty(this, "thresh", void 0);
    _defineProperty(this, "box_thresh", void 0);
    _defineProperty(this, "max_candidates", void 0);
    _defineProperty(this, "unclip_ratio", void 0);
    _defineProperty(this, "min_size", void 0);
    _defineProperty(this, "pred", void 0);
    _defineProperty(this, "segmentation", void 0);
    _defineProperty(this, "width", void 0);
    _defineProperty(this, "height", void 0);
    numberPrecision.enableBoundaryChecking(false);
    this.thresh = thresh ? thresh : 0.3;
    this.box_thresh = box_thresh ? box_thresh : 0.6;
    this.max_candidates = 1e3;
    this.unclip_ratio = unclip_ratio ? unclip_ratio : 1.5;
    this.min_size = 3;
    this.width = shape[0];
    this.height = shape[1];
    this.pred = result;
    this.segmentation = [];
    this.pred.forEach(function(item) {
      _this.segmentation.push(item > _this.thresh ? 255 : 0);
    });
  }
  _createClass(DBPostprocess2, [{
    key: "outputBox",
    value: function outputBox() {
      var _this2 = this;
      var src = new opencv_ocr.matFromArray(this.width, this.height, opencv_ocr.CV_8UC1, this.segmentation);
      var contours = new opencv_ocr.MatVector();
      var hierarchy = new opencv_ocr.Mat();
      opencv_ocr.findContours(src, contours, hierarchy, opencv_ocr.RETR_LIST, opencv_ocr.CHAIN_APPROX_SIMPLE);
      var num_contours = Math.min(contours.size(), this.max_candidates);
      var boxes = [];
      var scores = [];
      for (var i = 0; i < num_contours; i++) {
        var contour = contours.get(i);
        var minBox = this.get_mini_boxes(contour);
        var points = minBox.points;
        var side = minBox.side;
        if (side < this.min_size) {
          continue;
        }
        var score = this.box_score_fast(this.pred, points);
        if (this.box_thresh > score) {
          continue;
        }
        var box = this.unclip(points);
        var boxMap = new opencv_ocr.matFromArray(box.length / 2, 1, opencv_ocr.CV_32SC2, box);
        var resultObj = this.get_mini_boxes(boxMap);
        box = resultObj.points;
        side = resultObj.side;
        if (side < this.min_size + 2) {
          continue;
        }
        box.forEach(function(item) {
          item[0] = clip(Math.round(item[0]), 0, _this2.width);
          item[1] = clip(Math.round(item[1]), 0, _this2.height);
        });
        boxes.push(box);
        scores.push(score);
        boxMap["delete"]();
      }
      src["delete"]();
      contours["delete"]();
      hierarchy["delete"]();
      return {
        boxes,
        scores
      };
    }
  }, {
    key: "get_mini_boxes",
    value: function get_mini_boxes(contour) {
      var bounding_box = opencv_ocr.minAreaRect(contour);
      var points = [];
      var mat = new opencv_ocr.Mat();
      opencv_ocr.boxPoints(bounding_box, mat);
      for (var i = 0; i < mat.data32F.length; i += 2) {
        var arr = [mat.data32F[i], mat.data32F[i + 1]];
        points.push(arr);
      }
      function sortNumber(a, b) {
        return a[0] - b[0];
      }
      points.sort(sortNumber);
      var index_1;
      var index_2;
      var index_3;
      var index_4;
      if (points[1][1] > points[0][1]) {
        index_1 = 0;
        index_4 = 1;
      } else {
        index_1 = 1;
        index_4 = 0;
      }
      if (points[3][1] > points[2][1]) {
        index_2 = 2;
        index_3 = 3;
      } else {
        index_2 = 3;
        index_3 = 2;
      }
      var box = [points[index_1], points[index_2], points[index_3], points[index_4]];
      var side = Math.min(bounding_box.size.height, bounding_box.size.width);
      mat["delete"]();
      return {
        points: box,
        side
      };
    }
  }, {
    key: "box_score_fast",
    value: function box_score_fast(bitmap, _box) {
      var h = this.height;
      var w = this.width;
      var box = JSON.parse(JSON.stringify(_box));
      var x = [];
      var y = [];
      box.forEach(function(item) {
        x.push(item[0]);
        y.push(item[1]);
      });
      var xmin = clip(Math.floor(Math.min.apply(Math, x)), 0, w - 1);
      var xmax = clip(Math.ceil(Math.max.apply(Math, x)), 0, w - 1);
      var ymin = clip(Math.floor(Math.min.apply(Math, y)), 0, h - 1);
      var ymax = clip(Math.ceil(Math.max.apply(Math, y)), 0, h - 1);
      var mask = new opencv_ocr.Mat.zeros(ymax - ymin + 1, xmax - xmin + 1, opencv_ocr.CV_8UC1);
      box.forEach(function(item) {
        item[0] = Math.max(item[0] - xmin, 0);
        item[1] = Math.max(item[1] - ymin, 0);
      });
      var npts = 4;
      var point_data = new Uint8Array(box.flat());
      var points = opencv_ocr.matFromArray(npts, 1, opencv_ocr.CV_32SC2, point_data);
      var pts = new opencv_ocr.MatVector();
      pts.push_back(points);
      var color = new opencv_ocr.Scalar(255);
      opencv_ocr.fillPoly(mask, pts, color, 1);
      var sliceArr = [];
      for (var i = ymin; i < ymax + 1; i++) {
        sliceArr.push.apply(sliceArr, _toConsumableArray(bitmap.slice(this.width * i + xmin, this.height * i + xmax + 1)));
      }
      var mean = this.mean(sliceArr, mask.data);
      mask["delete"]();
      points["delete"]();
      pts["delete"]();
      return mean;
    }
  }, {
    key: "unclip",
    value: function unclip(box) {
      var _ref;
      var unclip_ratio = this.unclip_ratio;
      var area = Math.abs(d3Polygon__namespace.polygonArea(box));
      var length = d3Polygon__namespace.polygonLength(box);
      var distance = area * unclip_ratio / length;
      var tmpArr = [];
      box.forEach(function(item) {
        var obj = {
          X: 0,
          Y: 0
        };
        obj.X = item[0];
        obj.Y = item[1];
        tmpArr.push(obj);
      });
      var offset = new clipper__default["default"].ClipperOffset();
      offset.AddPath(tmpArr, clipper__default["default"].JoinType.jtRound, clipper__default["default"].EndType.etClosedPolygon);
      var expanded = [];
      offset.Execute(expanded, distance);
      var expandedArr = [];
      expanded[0] && expanded[0].forEach(function(item) {
        expandedArr.push([item.X, item.Y]);
      });
      expandedArr = (_ref = []).concat.apply(_ref, _toConsumableArray(expandedArr));
      return expandedArr;
    }
  }, {
    key: "mean",
    value: function mean(data, mask) {
      var sum = 0;
      var length = 0;
      for (var i = 0; i < data.length; i++) {
        if (mask[i]) {
          sum = numberPrecision.plus(sum, data[i]);
          length++;
        }
      }
      return numberPrecision.divide(sum, length);
    }
  }]);
  return DBPostprocess2;
}();
var character = "'\n\u7597\n\u7EDA\n\u8BDA\n\u5A07\n\u6E9C\n\u9898\n\u8D3F\n\u8005\n\u5ED6\n\u66F4\n\u7EB3\n\u52A0\n\u5949\n\u516C\n\u4E00\n\u5C31\n\u6C74\n\u8BA1\n\u4E0E\n\u8DEF\n\u623F\n\u539F\n\u5987\n2\n0\n8\n-\n7\n\u5176\n>\n:\n]\n,\n\uFF0C\n\u9A91\n\u5208\n\u5168\n\u6D88\n\u660F\n\u5088\n\u5B89\n\u4E45\n\u949F\n\u55C5\n\u4E0D\n\u5F71\n\u5904\n\u9A7D\n\u873F\n\u8D44\n\u5173\n\u6924\n\u5730\n\u7638\n\u4E13\n\u95EE\n\u5FD6\n\u7968\n\u5AC9\n\u708E\n\u97F5\n\u8981\n\u6708\n\u7530\n\u8282\n\u9642\n\u9119\n\u634C\n\u5907\n\u62F3\n\u4F3A\n\u773C\n\u7F51\n\u76CE\n\u5927\n\u508D\n\u5FC3\n\u4E1C\n\u6109\n\u6C47\n\u8E7F\n\u79D1\n\u6BCF\n\u4E1A\n\u91CC\n\u822A\n\u664F\n\u5B57\n\u5E73\n\u5F55\n\u5148\n1\n3\n\u5F64\n\u9CB6\n\u4EA7\n\u7A0D\n\u7763\n\u8174\n\u6709\n\u8C61\n\u5CB3\n\u6CE8\n\u7ECD\n\u5728\n\u6CFA\n\u6587\n\u5B9A\n\u6838\n\u540D\n\u6C34\n\u8FC7\n\u7406\n\u8BA9\n\u5077\n\u7387\n\u7B49\n\u8FD9\n\u53D1\n\u201D\n\u4E3A\n\u542B\n\u80A5\n\u9149\n\u76F8\n\u9131\n\u4E03\n\u7F16\n\u7325\n\u951B\n\u65E5\n\u9540\n\u8482\n\u63B0\n\u5012\n\u8F86\n\u683E\n\u6817\n\u7EFC\n\u6DA9\n\u5DDE\n\u96CC\n\u6ED1\n\u9980\n\u4E86\n\u673A\n\u5757\n\u53F8\n\u5BB0\n\u7519\n\u5174\n\u77FD\n\u629A\n\u4FDD\n\u7528\n\u6CA7\n\u79E9\n\u5982\n\u6536\n\u606F\n\u6EE5\n\u9875\n\u7591\n\u57E0\n!\n\uFF01\n\u59E5\n\u5F02\n\u6A79\n\u9487\n\u5411\n\u4E0B\n\u8DC4\n\u7684\n\u6934\n\u6CAB\n\u56FD\n\u7EE5\n\u7360\n\u62A5\n\u5F00\n\u6C11\n\u8707\n\u4F55\n\u5206\n\u51C7\n\u957F\n\u8BA5\n\u85CF\n\u638F\n\u65BD\n\u7FBD\n\u4E2D\n\u8BB2\n\u6D3E\n\u561F\n\u4EBA\n\u63D0\n\u6D7C\n\u95F4\n\u4E16\n\u800C\n\u53E4\n\u591A\n\u502A\n\u5507\n\u996F\n\u63A7\n\u5E9A\n\u9996\n\u8D5B\n\u8713\n\u5473\n\u65AD\n\u5236\n\u89C9\n\u6280\n\u66FF\n\u8270\n\u6EA2\n\u6F6E\n\u5915\n\u94BA\n\u5916\n\u6458\n\u678B\n\u52A8\n\u53CC\n\u5355\n\u556E\n\u6237\n\u6787\n\u786E\n\u9526\n\u66DC\n\u675C\n\u6216\n\u80FD\n\u6548\n\u971C\n\u76D2\n\u7136\n\u4F97\n\u7535\n\u6641\n\u653E\n\u6B65\n\u9E43\n\u65B0\n\u6756\n\u8702\n\u5412\n\u6FC2\n\u77AC\n\u8BC4\n\u603B\n\u968D\n\u5BF9\n\u72EC\n\u5408\n\u4E5F\n\u662F\n\u5E9C\n\u9752\n\u5929\n\u8BF2\n\u5899\n\u7EC4\n\u6EF4\n\u7EA7\n\u9080\n\u5E18\n\u793A\n\u5DF2\n\u65F6\n\u9AB8\n\u4EC4\n\u6CC5\n\u548C\n\u9068\n\u5E97\n\u96C7\n\u75AB\n\u6301\n\u5DCD\n\u8E2E\n\u5883\n\u53EA\n\u4EA8\n\u76EE\n\u9274\n\u5D24\n\u95F2\n\u4F53\n\u6CC4\n\u6742\n\u4F5C\n\u822C\n\u8F70\n\u5316\n\u89E3\n\u8FC2\n\u8BFF\n\u86ED\n\u7480\n\u817E\n\u544A\n\u7248\n\u670D\n\u7701\n\u5E08\n\u5C0F\n\u89C4\n\u7A0B\n\u7EBF\n\u6D77\n\u529E\n\u5F15\n\u4E8C\n\u6867\n\u724C\n\u783A\n\u6D04\n\u88F4\n\u4FEE\n\u56FE\n\u75EB\n\u80E1\n\u8BB8\n\u728A\n\u4E8B\n\u90DB\n\u57FA\n\u67F4\n\u547C\n\u98DF\n\u7814\n\u5976\n\u5F8B\n\u86CB\n\u56E0\n\u8446\n\u5BDF\n\u620F\n\u8912\n\u6212\n\u518D\n\u674E\n\u9A81\n\u5DE5\n\u8C82\n\u6CB9\n\u9E45\n\u7AE0\n\u5544\n\u4F11\n\u573A\n\u7ED9\n\u7761\n\u7EB7\n\u8C46\n\u5668\n\u634E\n\u8BF4\n\u654F\n\u5B66\n\u4F1A\n\u6D52\n\u8BBE\n\u8BCA\n\u683C\n\u5ED3\n\u67E5\n\u6765\n\u9713\n\u5BA4\n\u6E86\n\uFFE0\n\u8BE1\n\u5BE5\n\u7115\n\u821C\n\u67D2\n\u72D0\n\u56DE\n\u621F\n\u783E\n\u5384\n\u5B9E\n\u7FE9\n\u5C3F\n\u4E94\n\u5165\n\u5F84\n\u60ED\n\u55B9\n\u80A1\n\u5B87\n\u7BDD\n|\n;\n\u7F8E\n\u671F\n\u4E91\n\u4E5D\n\u797A\n\u626E\n\u9760\n\u951D\n\u69CC\n\u7CFB\n\u4F01\n\u9170\n\u960A\n\u6682\n\u8695\n\u5FFB\n\u8C41\n\u672C\n\u7FB9\n\u6267\n\u6761\n\u94A6\nH\n\u7352\n\u9650\n\u8FDB\n\u5B63\n\u6966\n\u4E8E\n\u8298\n\u7396\n\u94CB\n\u832F\n\u672A\n\u7B54\n\u7C98\n\u62EC\n\u6837\n\u7CBE\n\u6B20\n\u77E2\n\u7525\n\u5E37\n\u5D69\n\u6263\n\u4EE4\n\u4ED4\n\u98CE\n\u7688\n\u884C\n\u652F\n\u90E8\n\u84C9\n\u522E\n\u7AD9\n\u8721\n\u6551\n\u948A\n\u6C57\n\u677E\n\u5ACC\n\u6210\n\u53EF\n.\n\u9E64\n\u9662\n\u4ECE\n\u4EA4\n\u653F\n\u6015\n\u6D3B\n\u8C03\n\u7403\n\u5C40\n\u9A8C\n\u9ACC\n\u7B2C\n\u97EB\n\u8C17\n\u4E32\n\u5230\n\u5706\n\u5E74\n\u7C73\n/\n*\n\u53CB\n\u5FFF\n\u68C0\n\u533A\n\u770B\n\u81EA\n\u6562\n\u5203\n\u4E2A\n\u5179\n\u5F04\n\u6D41\n\u7559\n\u540C\n\u6CA1\n\u9F7F\n\u661F\n\u8046\n\u8F7C\n\u6E56\n\u4EC0\n\u4E09\n\u5EFA\n\u86D4\n\u513F\n\u690B\n\u6C55\n\u9707\n\u98A7\n\u9CA4\n\u8DDF\n\u529B\n\u60C5\n\u74BA\n\u94E8\n\u966A\n\u52A1\n\u6307\n\u65CF\n\u8BAD\n\u6EE6\n\u9123\n\u6FEE\n\u6252\n\u5546\n\u7BB1\n\u5341\n\u53EC\n\u6177\n\u8F97\n\u6240\n\u839E\n\u7BA1\n\u62A4\n\u81ED\n\u6A2A\n\u7852\n\u55D3\n\u63A5\n\u4FA6\n\u516D\n\u9732\n\u515A\n\u998B\n\u9A7E\n\u5256\n\u9AD8\n\u4FAC\n\u59AA\n\u5E42\n\u7317\n\u7EFA\n\u9A90\n\u592E\n\u9150\n\u5B5D\n\u7B5D\n\u8BFE\n\u5F87\n\u7F30\n\u95E8\n\u7537\n\u897F\n\u9879\n\u53E5\n\u8C19\n\u7792\n\u79C3\n\u7BC7\n\u6559\n\u78B2\n\u7F5A\n\u58F0\n\u5450\n\u666F\n\u524D\n\u5BCC\n\u5634\n\u9CCC\n\u7A00\n\u514D\n\u670B\n\u556C\n\u7750\n\u53BB\n\u8D48\n\u9C7C\n\u4F4F\n\u80A9\n\u6115\n\u901F\n\u65C1\n\u6CE2\n\u5385\n\u5065\n\u833C\n\u53A5\n\u9C9F\n\u8C05\n\u6295\n\u6538\n\u7094\n\u6570\n\u65B9\n\u51FB\n\u544B\n\u8C08\n\u7EE9\n\u522B\n\u612B\n\u50DA\n\u8EAC\n\u9E67\n\u80EA\n\u70B3\n\u62DB\n\u5587\n\u81A8\n\u6CF5\n\u8E66\n\u6BDB\n\u7ED3\n5\n4\n\u8C31\n\u8BC6\n\u9655\n\u7CBD\n\u5A5A\n\u62DF\n\u6784\n\u4E14\n\u641C\n\u4EFB\n\u6F58\n\u6BD4\n\u90E2\n\u59A8\n\u91AA\n\u9640\n\u6854\n\u7898\n\u624E\n\u9009\n\u54C8\n\u9AB7\n\u6977\n\u4EBF\n\u660E\n\u7F06\n\u812F\n\u76D1\n\u776B\n\u903B\n\u5A75\n\u5171\n\u8D74\n\u6DDD\n\u51E1\n\u60E6\n\u53CA\n\u8FBE\n\u63D6\n\u8C29\n\u6FB9\n\u51CF\n\u7130\n\u86F9\n\u756A\n\u7941\n\u67CF\n\u5458\n\u7984\n\u6021\n\u5CE4\n\u9F99\n\u767D\n\u53FD\n\u751F\n\u95EF\n\u8D77\n\u7EC6\n\u88C5\n\u8C15\n\u7ADF\n\u805A\n\u9499\n\u4E0A\n\u5BFC\n\u6E0A\n\u6309\n\u827E\n\u8F98\n\u6321\n\u8012\n\u76F9\n\u996A\n\u81C0\n\u8BB0\n\u90AE\n\u8559\n\u53D7\n\u5404\n\u533B\n\u6402\n\u666E\n\u6EC7\n\u6717\n\u8338\n\u5E26\n\u7FFB\n\u915A\n(\n\u5149\n\u5824\n\u589F\n\u8537\n\u4E07\n\u5E7B\n\u3013\n\u7459\n\u8F88\n\u6627\n\u76CF\n\u4E98\n\u86C0\n\u5409\n\u94F0\n\u8BF7\n\u5B50\n\u5047\n\u95FB\n\u7A0E\n\u4E95\n\u8BE9\n\u54E8\n\u5AC2\n\u597D\n\u9762\n\u7410\n\u6821\n\u998A\n\u9B23\n\u7F02\n\u8425\n\u8BBF\n\u7096\n\u5360\n\u519C\n\u7F00\n\u5426\n\u7ECF\n\u949A\n\u68F5\n\u8D9F\n\u5F20\n\u4E9F\n\u540F\n\u8336\n\u8C28\n\u637B\n\u8BBA\n\u8FF8\n\u5802\n\u7389\n\u4FE1\n\u5427\n\u77A0\n\u4E61\n\u59EC\n\u5BFA\n\u54AC\n\u6E8F\n\u82C4\n\u76BF\n\u610F\n\u8D49\n\u5B9D\n\u5C14\n\u94B0\n\u827A\n\u7279\n\u5533\n\u8E09\n\u90FD\n\u8363\n\u501A\n\u767B\n\u8350\n\u4E27\n\u5947\n\u6DB5\n\u6279\n\u70AD\n\u8FD1\n\u7B26\n\u50A9\n\u611F\n\u9053\n\u7740\n\u83CA\n\u8679\n\u4EF2\n\u4F17\n\u61C8\n\u6FEF\n\u989E\n\u773A\n\u5357\n\u91CA\n\u5317\n\u7F1D\n\u6807\n\u65E2\n\u8317\n\u6574\n\u64BC\n\u8FE4\n\u8D32\n\u630E\n\u8031\n\u62D2\n\u67D0\n\u598D\n\u536B\n\u54C7\n\u82F1\n\u77F6\n\u85E9\n\u6CBB\n\u4ED6\n\u5143\n\u9886\n\u819C\n\u906E\n\u7A57\n\u86FE\n\u98DE\n\u8352\n\u68FA\n\u52AB\n\u4E48\n\u5E02\n\u706B\n\u6E29\n\u62C8\n\u68DA\n\u6D3C\n\u8F6C\n\u679C\n\u5955\n\u5378\n\u8FEA\n\u4F38\n\u6CF3\n\u6597\n\u90A1\n\u4F84\n\u6DA8\n\u5C6F\n\u840B\n\u80ED\n\u6C21\n\u5D2E\n\u679E\n\u60E7\n\u5192\n\u5F69\n\u659C\n\u624B\n\u8C5A\n\u968F\n\u65ED\n\u6DD1\n\u599E\n\u5F62\n\u83CC\n\u5432\n\u6CB1\n\u4E89\n\u9A6F\n\u6B79\n\u631F\n\u5146\n\u67F1\n\u4F20\n\u81F3\n\u5305\n\u5185\n\u54CD\n\u4E34\n\u7EA2\n\u529F\n\u5F29\n\u8861\n\u5BC2\n\u7981\n\u8001\n\u68CD\n\u8006\n\u6E0D\n\u7EC7\n\u5BB3\n\u6C35\n\u6E11\n\u5E03\n\u8F7D\n\u9765\n\u55EC\n\u867D\n\u82F9\n\u54A8\n\u5A04\n\u5E93\n\u96C9\n\u699C\n\u5E1C\n\u5632\n\u5957\n\u745A\n\u4EB2\n\u7C38\n\u6B27\n\u8FB9\n6\n\u817F\n\u65EE\n\u629B\n\u5439\n\u77B3\n\u5F97\n\u9553\n\u6897\n\u53A8\n\u7EE7\n\u6F3E\n\u6123\n\u61A8\n\u58EB\n\u7B56\n\u7A91\n\u6291\n\u8EAF\n\u895F\n\u810F\n\u53C2\n\u8D38\n\u8A00\n\u5E72\n\u7EF8\n\u9CC4\n\u7A77\n\u85DC\n\u97F3\n\u6298\n\u8BE6\n)\n\u4E3E\n\u608D\n\u7538\n\u764C\n\u9ECE\n\u8C34\n\u6B7B\n\u7F69\n\u8FC1\n\u5BD2\n\u9A77\n\u8896\n\u5A92\n\u848B\n\u6398\n\u6A21\n\u7EA0\n\u6063\n\u89C2\n\u7956\n\u86C6\n\u788D\n\u4F4D\n\u7A3F\n\u4E3B\n\u6FA7\n\u8DCC\n\u7B4F\n\u4EAC\n\u950F\n\u5E1D\n\u8D34\n\u8BC1\n\u7CE0\n\u624D\n\u9EC4\n\u9CB8\n\u7565\n\u70AF\n\u9971\n\u56DB\n\u51FA\n\u56ED\n\u7280\n\u7267\n\u5BB9\n\u6C49\n\u6746\n\u6D48\n\u6C70\n\u7477\n\u9020\n\u866B\n\u7629\n\u602A\n\u9A74\n\u6D4E\n\u5E94\n\u82B1\n\u6CA3\n\u8C14\n\u5919\n\u65C5\n\u4EF7\n\u77FF\n\u4EE5\n\u8003\ns\nu\n\u5466\n\u6652\n\u5DE1\n\u8305\n\u51C6\n\u809F\n\u74F4\n\u8A79\n\u4EDF\n\u8902\n\u8BD1\n\u684C\n\u6DF7\n\u5B81\n\u6026\n\u90D1\n\u62BF\n\u4E9B\n\u4F59\n\u9102\n\u9974\n\u6512\n\u73D1\n\u7FA4\n\u9616\n\u5C94\n\u7428\n\u85D3\n\u9884\n\u73AF\n\u6D2E\n\u5C8C\n\u5B80\n\u6772\n\u7035\n\u6700\n\u5E38\n\u56E1\n\u5468\n\u8E0A\n\u5973\n\u9F13\n\u88AD\n\u5589\n\u7B80\n\u8303\n\u85AF\n\u9050\n\u758F\n\u7CB1\n\u9EDC\n\u79A7\n\u6CD5\n\u7B94\n\u65A4\n\u9065\n\u6C5D\n\u5965\n\u76F4\n\u8D1E\n\u6491\n\u7F6E\n\u7EF1\n\u96C6\n\u5979\n\u9985\n\u9017\n\u94A7\n\u6A71\n\u9B49\n[\n\u6059\n\u8E81\n\u5524\n9\n\u65FA\n\u8198\n\u5F85\n\u813E\n\u60EB\n\u8D2D\n\u5417\n\u4F9D\n\u76F2\n\u5EA6\n\u763F\n\u8816\n\u4FFE\n\u4E4B\n\u9557\n\u62C7\n\u9CB5\n\u539D\n\u7C27\n\u7EED\n\u6B3E\n\u5C55\n\u5543\n\u8868\n\u5254\n\u54C1\n\u94BB\n\u816D\n\u635F\n\u6E05\n\u9536\n\u7EDF\n\u6D8C\n\u5BF8\n\u6EE8\n\u8D2A\n\u94FE\n\u5420\n\u5188\n\u4F0E\n\u8FE5\n\u548F\n\u5401\n\u89C8\n\u9632\n\u8FC5\n\u5931\n\u6C7E\n\u9614\n\u9035\n\u7EC0\n\u8511\n\u5217\n\u5DDD\n\u51ED\n\u52AA\n\u71A8\n\u63EA\n\u5229\n\u4FF1\n\u7EC9\n\u62A2\n\u9E28\n\u6211\n\u5373\n\u8D23\n\u81A6\n\u6613\n\u6BD3\n\u9E4A\n\u5239\n\u73B7\n\u5CBF\n\u7A7A\n\u561E\n\u7ECA\n\u6392\n\u672F\n\u4F30\n\u9537\n\u8FDD\n\u4EEC\n\u82DF\n\u94DC\n\u64AD\n\u8098\n\u4EF6\n\u70EB\n\u5BA1\n\u9C82\n\u5E7F\n\u50CF\n\u94CC\n\u60F0\n\u94DF\n\u5DF3\n\u80CD\n\u9C8D\n\u5EB7\n\u61A7\n\u8272\n\u6062\n\u60F3\n\u62F7\n\u5C24\n\u75B3\n\u77E5\nS\nY\nF\nD\nA\n\u5CC4\n\u88D5\n\u5E2E\n\u63E1\n\u6414\n\u6C10\n\u6C18\n\u96BE\n\u5892\n\u6CAE\n\u96E8\n\u53C1\n\u7F25\n\u60B4\n\u85D0\n\u6E6B\n\u5A1F\n\u82D1\n\u7A20\n\u989B\n\u7C07\n\u540E\n\u9615\n\u95ED\n\u8564\n\u7F1A\n\u600E\n\u4F5E\n\u7801\n\u5624\n\u8521\n\u75CA\n\u8231\n\u87AF\n\u5E15\n\u8D6B\n\u6635\n\u5347\n\u70EC\n\u5CAB\n\u3001\n\u75B5\n\u873B\n\u9AC1\n\u8568\n\u96B6\n\u70DB\n\u68B0\n\u4E11\n\u76C2\n\u6881\n\u5F3A\n\u9C9B\n\u7531\n\u62D8\n\u63C9\n\u52AD\n\u9F9F\n\u64A4\n\u94A9\n\u5455\n\u5B5B\n\u8D39\n\u59BB\n\u6F02\n\u6C42\n\u9611\n\u5D16\n\u79E4\n\u7518\n\u901A\n\u6DF1\n\u8865\n\u8D43\n\u574E\n\u5E8A\n\u556A\n\u627F\n\u543C\n\u91CF\n\u6687\n\u94BC\n\u70E8\n\u9602\n\u64CE\n\u8131\n\u902E\n\u79F0\nP\n\u795E\n\u5C5E\n\u77D7\n\u534E\n\u5C4A\n\u72CD\n\u8451\n\u6C79\n\u80B2\n\u60A3\n\u7A92\n\u86F0\n\u4F7C\n\u9759\n\u69CE\n\u8FD0\n\u9CD7\n\u5E86\n\u901D\n\u66FC\n\u75B1\n\u514B\n\u4EE3\n\u5B98\n\u6B64\n\u9EB8\n\u8027\n\u868C\n\u665F\n\u4F8B\n\u7840\n\u699B\n\u526F\n\u6D4B\n\u5530\n\u7F22\n\u8FF9\n\u706C\n\u9701\n\u8EAB\n\u5C81\n\u8D6D\n\u625B\n\u53C8\n\u83E1\n\u4E5C\n\u96FE\n\u677F\n\u8BFB\n\u9677\n\u5F89\n\u8D2F\n\u90C1\n\u8651\n\u53D8\n\u9493\n\u83DC\n\u573E\n\u73B0\n\u7422\n\u5F0F\n\u4E50\n\u7EF4\n\u6E14\n\u6D5C\n\u5DE6\n\u543E\n\u8111\n\u94A1\n\u8B66\nT\n\u5575\n\u62F4\n\u504C\n\u6F31\n\u6E7F\n\u7855\n\u6B62\n\u9ABC\n\u9B44\n\u79EF\n\u71E5\n\u8054\n\u8E22\n\u739B\n\u5219\n\u7ABF\n\u89C1\n\u632F\n\u757F\n\u9001\n\u73ED\n\u94BD\n\u60A8\n\u8D75\n\u5228\n\u5370\n\u8BA8\n\u8E1D\n\u7C4D\n\u8C21\n\u820C\n\u5D27\n\u6C7D\n\u853D\n\u6CAA\n\u9165\n\u7ED2\n\u6016\n\u8D22\n\u5E16\n\u80B1\n\u79C1\n\u838E\n\u52CB\n\u7F94\n\u9738\n\u52B1\n\u54FC\n\u5E10\n\u5C06\n\u5E05\n\u6E20\n\u7EAA\n\u5A74\n\u5A29\n\u5CAD\n\u5398\n\u6ED5\n\u543B\n\u4F24\n\u575D\n\u51A0\n\u620A\n\u9686\n\u7601\n\u4ECB\n\u6DA7\n\u7269\n\u9ECD\n\u5E76\n\u59D7\n\u5962\n\u8E51\n\u63A3\n\u57B8\n\u9534\n\u547D\n\u7B8D\n\u6349\n\u75C5\n\u8F96\n\u7430\n\u772D\n\u8FE9\n\u8258\n\u7ECC\n\u7E41\n\u5BC5\n\u82E5\n\u6BCB\n\u601D\n\u8BC9\n\u7C7B\n\u8BC8\n\u71EE\n\u8F72\n\u916E\n\u72C2\n\u91CD\n\u53CD\n\u804C\n\u7B71\n\u53BF\n\u59D4\n\u78D5\n\u7EE3\n\u5956\n\u664B\n\u6FC9\n\u5FD7\n\u5FBD\n\u80A0\n\u5448\n\u7350\n\u577B\n\u53E3\n\u7247\n\u78B0\n\u51E0\n\u6751\n\u67FF\n\u52B3\n\u6599\n\u83B7\n\u4EA9\n\u60D5\n\u6655\n\u538C\n\u53F7\n\u7F62\n\u6C60\n\u6B63\n\u93D6\n\u7168\n\u5BB6\n\u68D5\n\u590D\n\u5C1D\n\u61CB\n\u8725\n\u9505\n\u5C9B\n\u6270\n\u961F\n\u5760\n\u763E\n\u94AC\n@\n\u5367\n\u75A3\n\u9547\n\u8B6C\n\u51B0\n\u5F77\n\u9891\n\u9EEF\n\u636E\n\u5784\n\u91C7\n\u516B\n\u7F2A\n\u762B\n\u578B\n\u71B9\n\u7830\n\u6960\n\u8941\n\u7B90\n\u4F46\n\u5636\n\u7EF3\n\u5564\n\u62CD\n\u76E5\n\u7A46\n\u50B2\n\u6D17\n\u76EF\n\u5858\n\u6014\n\u7B5B\n\u4E3F\n\u53F0\n\u6052\n\u5582\n\u845B\n\u6C38\n\uFFE5\n\u70DF\n\u9152\n\u6866\n\u4E66\n\u7802\n\u869D\n\u7F09\n\u6001\n\u701A\n\u8884\n\u5733\n\u8F7B\n\u86DB\n\u8D85\n\u69A7\n\u905B\n\u59D2\n\u5958\n\u94EE\n\u53F3\n\u837D\n\u671B\n\u507B\n\u5361\n\u4E36\n\u6C30\n\u9644\n\u505A\n\u9769\n\u7D22\n\u621A\n\u5768\n\u6877\n\u5501\n\u5785\n\u69BB\n\u5C90\n\u504E\n\u575B\n\u83A8\n\u5C71\n\u6B8A\n\u5FAE\n\u9A87\n\u9648\n\u7228\n\u63A8\n\u55DD\n\u9A79\n\u6FA1\n\u85C1\n\u5464\n\u5364\n\u563B\n\u7CC5\n\u901B\n\u4FB5\n\u90D3\n\u914C\n\u5FB7\n\u6447\n\u203B\n\u9B03\n\u88AB\n\u6168\n\u6BA1\n\u7FB8\n\u660C\n\u6CE1\n\u621B\n\u978B\n\u6CB3\n\u5BAA\n\u6CBF\n\u73B2\n\u9CA8\n\u7FC5\n\u54FD\n\u6E90\n\u94C5\n\u8BED\n\u7167\n\u90AF\n\u5740\n\u8343\n\u4F6C\n\u987A\n\u9E33\n\u753A\n\u972D\n\u777E\n\u74E2\n\u5938\n\u6901\n\u6653\n\u917F\n\u75C8\n\u5494\n\u4F8F\n\u5238\n\u564E\n\u6E4D\n\u7B7E\n\u56B7\n\u79BB\n\u5348\n\u5C1A\n\u793E\n\u9524\n\u80CC\n\u5B5F\n\u4F7F\n\u6D6A\n\u7F26\n\u6F4D\n\u9785\n\u519B\n\u59F9\n\u9A76\n\u7B11\n\u9CDF\n\u9C81\n\u300B\n\u5B7D\n\u949C\n\u7EFF\n\u6D31\n\u7934\n\u712F\n\u6930\n\u9896\n\u56D4\n\u4E4C\n\u5B54\n\u5DF4\n\u4E92\n\u6027\n\u693D\n\u54DE\n\u8058\n\u6628\n\u65E9\n\u66AE\n\u80F6\n\u7080\n\u96A7\n\u4F4E\n\u5F57\n\u661D\n\u94C1\n\u5453\n\u6C3D\n\u85C9\n\u5594\n\u7656\n\u7457\n\u59E8\n\u6743\n\u80F1\n\u97E6\n\u5811\n\u871C\n\u914B\n\u695D\n\u781D\n\u6BC1\n\u9753\n\u6B59\n\u9532\n\u7A76\n\u5C4B\n\u55B3\n\u9AA8\n\u8FA8\n\u7891\n\u6B66\n\u9E20\n\u5BAB\n\u8F9C\n\u70CA\n\u9002\n\u5761\n\u6B83\n\u57F9\n\u4F69\n\u4F9B\n\u8D70\n\u8708\n\u8FDF\n\u7FFC\n\u51B5\n\u59E3\n\u51DB\n\u6D54\n\u5403\n\u98D8\n\u503A\n\u729F\n\u91D1\n\u4FC3\n\u82DB\n\u5D07\n\u5742\n\u83B3\n\u7554\n\u7EC2\n\u5175\n\u8815\n\u658B\n\u6839\n\u780D\n\u4EA2\n\u6B22\n\u606C\n\u5D14\n\u5241\n\u9910\n\u69AB\n\u5FEB\n\u6276\n\u2016\n\u6FD2\n\u7F20\n\u9CDC\n\u5F53\n\u5F6D\n\u9A6D\n\u6D66\n\u7BEE\n\u6600\n\u9506\n\u79F8\n\u94B3\n\u5F0B\n\u5A23\n\u7791\n\u5937\n\u9F9B\n\u82EB\n\u62F1\n\u81F4\n%\n\u5D4A\n\u969C\n\u9690\n\u5F11\n\u521D\n\u5A13\n\u6289\n\u6C69\n\u7D2F\n\u84D6\n\"\n\u552C\n\u52A9\n\u82D3\n\u6619\n\u62BC\n\u6BD9\n\u7834\n\u57CE\n\u90E7\n\u9022\n\u568F\n\u736D\n\u77BB\n\u6EB1\n\u5A7F\n\u8D4A\n\u8DE8\n\u607C\n\u74A7\n\u8403\n\u59FB\n\u8C89\n\u7075\n\u7089\n\u5BC6\n\u6C1B\n\u9676\n\u7838\n\u8C2C\n\u8854\n\u70B9\n\u741B\n\u6C9B\n\u67B3\n\u5C42\n\u5CB1\n\u8BFA\n\u810D\n\u6988\n\u57C2\n\u5F81\n\u51B7\n\u88C1\n\u6253\n\u8E74\n\u7D20\n\u7618\n\u901E\n\u86D0\n\u804A\n\u6FC0\n\u8171\n\u8418\n\u8E35\n\u98D2\n\u84DF\n\u5406\n\u53D6\n\u5499\n\u7C0B\n\u6D93\n\u77E9\n\u66DD\n\u633A\n\u63E3\n\u5EA7\n\u4F60\n\u53F2\n\u8235\n\u7131\n\u5C18\n\u82CF\n\u7B08\n\u811A\n\u6E89\n\u69A8\n\u8BF5\n\u6A0A\n\u9093\n\u710A\n\u4E49\n\u5EB6\n\u510B\n\u87CB\n\u84B2\n\u8D66\n\u5477\n\u675E\n\u8BE0\n\u8C6A\n\u8FD8\n\u8BD5\n\u9893\n\u8309\n\u592A\n\u9664\n\u7D2B\n\u9003\n\u75F4\n\u8349\n\u5145\n\u9CD5\n\u73C9\n\u7957\n\u58A8\n\u6E2D\n\u70E9\n\u8638\n\u6155\n\u7487\n\u9576\n\u7A74\n\u5D58\n\u6076\n\u9A82\n\u9669\n\u7ECB\n\u5E55\n\u7889\n\u80BA\n\u6233\n\u5218\n\u6F5E\n\u79E3\n\u7EBE\n\u6F5C\n\u92AE\n\u6D1B\n\u987B\n\u7F58\n\u9500\n\u762A\n\u6C5E\n\u516E\n\u5C49\nr\n\u6797\n\u5395\n\u8D28\n\u63A2\n\u5212\n\u72F8\n\u6B9A\n\u5584\n\u714A\n\u70F9\n\u3012\n\u9508\n\u902F\n\u5BB8\n\u8F8D\n\u6CF1\n\u67DA\n\u888D\n\u8FDC\n\u8E4B\n\u5D99\n\u7EDD\n\u5CE5\n\u5A25\n\u7F0D\n\u96C0\n\u5FB5\n\u8BA4\n\u9571\n\u8C37\n=\n\u8D29\n\u52C9\n\u64A9\n\u912F\n\u6590\n\u6D0B\n\u975E\n\u795A\n\u6CFE\n\u8BD2\n\u997F\n\u64AC\n\u5A01\n\u6677\n\u642D\n\u828D\n\u9525\n\u7B3A\n\u84E6\n\u5019\n\u740A\n\u6863\n\u7901\n\u6CBC\n\u5375\n\u8360\n\u5FD1\n\u671D\n\u51F9\n\u745E\n\u5934\n\u4EEA\n\u5F27\n\u5B75\n\u754F\n\u94C6\n\u7A81\n\u8872\n\u8F66\n\u6D69\n\u6C14\n\u8302\n\u6096\n\u53A2\n\u6795\n\u915D\n\u6234\n\u6E7E\n\u90B9\n\u98DA\n\u6518\n\u9502\n\u5199\n\u5BB5\n\u7FC1\n\u5CB7\n\u65E0\n\u559C\n\u4E08\n\u6311\n\u55DF\n\u7EDB\n\u6B89\n\u8BAE\n\u69FD\n\u5177\n\u9187\n\u6DDE\n\u7B03\n\u90F4\n\u9605\n\u997C\n\u5E95\n\u58D5\n\u781A\n\u5F08\n\u8BE2\n\u7F15\n\u5EB9\n\u7FDF\n\u96F6\n\u7B77\n\u66A8\n\u821F\n\u95FA\n\u752F\n\u649E\n\u9E82\n\u830C\n\u853C\n\u5F88\n\u73F2\n\u6355\n\u68E0\n\u89D2\n\u9609\n\u5A9B\n\u5A32\n\u8BFD\n\u527F\n\u5C09\n\u7235\n\u776C\n\u97E9\n\u8BF0\n\u5323\n\u5371\n\u7CCD\n\u956F\n\u7ACB\n\u6D4F\n\u9633\n\u5C11\n\u76C6\n\u8214\n\u64D8\n\u532A\n\u7533\n\u5C2C\n\u94E3\n\u65EF\n\u6296\n\u8D58\n\u74EF\n\u5C45\n\u02C7\n\u54EE\n\u6E38\n\u952D\n\u830F\n\u6B4C\n\u574F\n\u751A\n\u79D2\n\u821E\n\u6C99\n\u4ED7\n\u52B2\n\u6F7A\n\u963F\n\u71E7\n\u90ED\n\u55D6\n\u970F\n\u5FE0\n\u6750\n\u5942\n\u8010\n\u8DFA\n\u7800\n\u8F93\n\u5C96\n\u5AB3\n\u6C1F\n\u6781\n\u6446\n\u707F\n\u4ECA\n\u6254\n\u817B\n\u679D\n\u594E\n\u836F\n\u7184\n\u5428\n\u8BDD\nq\n\u989D\n\u6151\n\u560C\n\u534F\n\u5580\n\u58F3\n\u57ED\n\u89C6\n\u8457\n\u65BC\n\u6127\n\u9672\n\u7FCC\n\u5CC1\n\u9885\n\u4F5B\n\u8179\n\u804B\n\u4FAF\n\u548E\n\u53DF\n\u79C0\n\u9887\n\u5B58\n\u8F83\n\u7F6A\n\u54C4\n\u5C97\n\u626B\n\u680F\n\u94BE\n\u7F8C\n\u5DF1\n\u74A8\n\u67AD\n\u9709\n\u714C\n\u6DB8\n\u887F\n\u952E\n\u955D\n\u76CA\n\u5CA2\n\u594F\n\u8FDE\n\u592F\n\u777F\n\u51A5\n\u5747\n\u7CD6\n\u72DE\n\u8E4A\n\u7A3B\n\u7238\n\u523F\n\u80E5\n\u715C\n\u4E3D\n\u80BF\n\u7483\n\u63B8\n\u8DDA\n\u707E\n\u5782\n\u6A3E\n\u6FD1\n\u4E4E\n\u83B2\n\u7A84\n\u72B9\n\u64AE\n\u6218\n\u9984\n\u8F6F\n\u7EDC\n\u663E\n\u9E22\n\u80F8\n\u5BBE\n\u59B2\n\u6055\n\u57D4\n\u874C\n\u4EFD\n\u9047\n\u5DE7\n\u779F\n\u7C92\n\u6070\n\u5265\n\u6861\n\u535A\n\u8BAF\n\u51EF\n\u5807\n\u9636\n\u6EE4\n\u5356\n\u658C\n\u9A9A\n\u5F6C\n\u5151\n\u78FA\n\u6A31\n\u8237\n\u4E24\n\u5A31\n\u798F\n\u4EC3\n\u5DEE\n\u627E\n\u6841\n\xF7\n\u51C0\n\u628A\n\u9634\n\u6C61\n\u622C\n\u96F7\n\u7893\n\u8572\n\u695A\n\u7F61\n\u7116\n\u62BD\n\u59AB\n\u5492\n\u4ED1\n\u95F1\n\u5C3D\n\u9091\n\u83C1\n\u7231\n\u8D37\n\u6CA5\n\u9791\n\u7261\n\u55C9\n\u5D34\n\u9AA4\n\u584C\n\u55E6\n\u8BA2\n\u62EE\n\u6ED3\n\u6361\n\u953B\n\u6B21\n\u576A\n\u6769\n\u81C3\n\u7BAC\n\u878D\n\u73C2\n\u9E57\n\u5B97\n\u679A\n\u964D\n\u9E2C\n\u59AF\n\u9604\n\u5830\n\u76D0\n\u6BC5\n\u5FC5\n\u6768\n\u5D03\n\u4FFA\n\u752C\n\u72B6\n\u8398\n\u8D27\n\u8038\n\u83F1\n\u817C\n\u94F8\n\u550F\n\u75E4\n\u5B5A\n\u6FB3\n\u61D2\n\u6E85\n\u7FD8\n\u7599\n\u6777\n\u6DFC\n\u7F19\n\u9AB0\n\u558A\n\u6089\n\u783B\n\u5777\n\u8247\n\u8D41\n\u754C\n\u8C24\n\u7EA3\n\u5BB4\n\u6643\n\u8339\n\u5F52\n\u996D\n\u68A2\n\u94E1\n\u8857\n\u6284\n\u80BC\n\u9B1F\n\u82EF\n\u9882\n\u64B7\n\u6208\n\u7092\n\u5486\n\u832D\n\u7619\n\u8D1F\n\u4EF0\n\u5BA2\n\u7409\n\u94E2\n\u5C01\n\u5351\n\u73E5\n\u693F\n\u9567\n\u7AA8\n\u9B32\n\u5BFF\n\u5FA1\n\u88A4\n\u94C3\n\u840E\n\u7816\n\u992E\n\u8112\n\u88F3\n\u80AA\n\u5B55\n\u5AE3\n\u9997\n\u5D47\n\u6073\n\u6C2F\n\u6C5F\n\u77F3\n\u8936\n\u51A2\n\u7978\n\u963B\n\u72C8\n\u7F9E\n\u94F6\n\u9773\n\u900F\n\u54B3\n\u53FC\n\u6577\n\u82B7\n\u5565\n\u5B83\n\u74E4\n\u5170\n\u75D8\n\u61CA\n\u9011\n\u808C\n\u5F80\n\u637A\n\u574A\n\u7529\n\u547B\n\u3003\n\u6CA6\n\u5FD8\n\u81BB\n\u795F\n\u83C5\n\u5267\n\u5D06\n\u667A\n\u576F\n\u81E7\n\u970D\n\u5885\n\u653B\n\u772F\n\u5018\n\u62E2\n\u9AA0\n\u94D0\n\u5EAD\n\u5C99\n\u74E0\n\u2032\n\u7F3A\n\u6CE5\n\u8FE2\n\u6376\n?\n\uFF1F\n\u90CF\n\u5599\n\u63B7\n\u6C8C\n\u7EAF\n\u79D8\n\u79CD\n\u542C\n\u7ED8\n\u56FA\n\u87A8\n\u56E2\n\u9999\n\u76D7\n\u5992\n\u57DA\n\u84DD\n\u62D6\n\u65F1\n\u835E\n\u94C0\n\u8840\n\u904F\n\u6C72\n\u8FB0\n\u53E9\n\u62FD\n\u5E45\n\u786C\n\u60F6\n\u6840\n\u6F20\n\u63AA\n\u6CFC\n\u5511\n\u9F50\n\u80BE\n\u5FF5\n\u9171\n\u865A\n\u5C41\n\u8036\n\u65D7\n\u7826\n\u95F5\n\u5A49\n\u9986\n\u62ED\n\u7EC5\n\u97E7\n\u5FCF\n\u7A9D\n\u918B\n\u847A\n\u987E\n\u8F9E\n\u501C\n\u5806\n\u8F8B\n\u9006\n\u739F\n\u8D31\n\u75BE\n\u8463\n\u60D8\n\u500C\n\u9515\n\u6DD8\n\u5600\n\u83BD\n\u4FED\n\u7B0F\n\u7ED1\n\u9CB7\n\u6748\n\u62E9\n\u87C0\n\u7CA5\n\u55EF\n\u9A70\n\u903E\n\u6848\n\u8C2A\n\u8913\n\u80EB\n\u54E9\n\u6615\n\u989A\n\u9CA2\n\u7EE0\n\u8EBA\n\u9E44\n\u5D02\n\u5112\n\u4FE8\n\u4E1D\n\u5C15\n\u6CCC\n\u554A\n\u8438\n\u5F70\n\u5E7A\n\u541F\n\u9A84\n\u82E3\n\u5F26\n\u810A\n\u7470\n\u3008\n\u8BDB\n\u9541\n\u6790\n\u95EA\n\u526A\n\u4FA7\n\u54DF\n\u6846\n\u8783\n\u5B88\n\u5B17\n\u71D5\n\u72ED\n\u94C8\n\u7F2E\n\u6982\n\u8FF3\n\u75E7\n\u9CB2\n\u4FEF\n\u552E\n\u7B3C\n\u75E3\n\u6249\n\u6316\n\u6EE1\n\u548B\n\u63F4\n\u90B1\n\u6247\n\u6B6A\n\u4FBF\n\u7391\n\u7EE6\n\u5CE1\n\u86C7\n\u53E8\n\u3016\n\u6CFD\n\u80C3\n\u6593\n\u558B\n\u6002\n\u575F\n\u732A\n\u8BE5\n\u86AC\n\u7095\n\u5F25\n\u8D5E\n\u68E3\n\u6654\n\u5A20\n\u6332\n\u72E1\n\u521B\n\u7596\n\u94D5\n\u956D\n\u7A37\n\u632B\n\u5F2D\n\u557E\n\u7FD4\n\u7C89\n\u5C65\n\u82D8\n\u54E6\n\u697C\n\u79D5\n\u94C2\n\u571F\n\u9523\n\u761F\n\u6323\n\u6809\n\u4E60\n\u4EAB\n\u6862\n\u8885\n\u78E8\n\u6842\n\u8C26\n\u5EF6\n\u575A\n\u851A\n\u5657\n\u7F72\n\u8C1F\n\u732C\n\u948E\n\u6050\n\u5B09\n\u96D2\n\u5026\n\u8845\n\u4E8F\n\u74A9\n\u7779\n\u523B\n\u6BBF\n\u738B\n\u7B97\n\u96D5\n\u9EBB\n\u4E18\n\u67EF\n\u9A86\n\u4E38\n\u584D\n\u8C1A\n\u6DFB\n\u9C88\n\u5793\n\u684E\n\u86AF\n\u82A5\n\u4E88\n\u98D5\n\u9566\n\u8C0C\n\u7A97\n\u919A\n\u83C0\n\u4EAE\n\u642A\n\u83BA\n\u84BF\n\u7F81\n\u8DB3\nJ\n\u771F\n\u8F76\n\u60AC\n\u8877\n\u975B\n\u7FCA\n\u63A9\n\u54D2\n\u7085\n\u6390\n\u51BC\n\u59AE\nl\n\u8C10\n\u7A1A\n\u8346\n\u64D2\n\u72AF\n\u9675\n\u864F\n\u6D53\n\u5D3D\n\u520D\n\u964C\n\u50BB\n\u5B5C\n\u5343\n\u9756\n\u6F14\n\u77DC\n\u9495\n\u717D\n\u6770\n\u9157\n\u6E17\n\u4F1E\n\u680B\n\u4FD7\n\u6CEB\n\u620D\n\u7F55\n\u6CBE\n\u75BD\n\u704F\n\u7166\n\u82AC\n\u78F4\n\u53F1\n\u9631\n\u6989\n\u6E43\n\u8700\n\u53C9\n\u9192\n\u5F6A\n\u79DF\n\u90E1\n\u7BF7\n\u5C4E\n\u826F\n\u57A2\n\u9697\n\u5F31\n\u9668\n\u5CEA\n\u7837\n\u63B4\n\u9881\n\u80CE\n\u96EF\n\u7EF5\n\u8D2C\n\u6C90\n\u64B5\n\u9698\n\u7BD9\n\u6696\n\u66F9\n\u9661\n\u6813\n\u586B\n\u81FC\n\u5F66\n\u74F6\n\u742A\n\u6F7C\n\u54EA\n\u9E21\n\u6469\n\u5566\n\u4FDF\n\u950B\n\u57DF\n\u803B\n\u852B\n\u75AF\n\u7EB9\n\u6487\n\u6BD2\n\u7EF6\n\u75DB\n\u916F\n\u5FCD\n\u722A\n\u8D73\n\u6B46\n\u5639\n\u8F95\n\u70C8\n\u518C\n\u6734\n\u94B1\n\u542E\n\u6BEF\n\u765C\n\u5A03\n\u8C00\n\u90B5\n\u53AE\n\u70BD\n\u749E\n\u9083\n\u4E10\n\u8FFD\n\u8BCD\n\u74D2\n\u5FC6\n\u8F67\n\u82AB\n\u8C2F\n\u55B7\n\u5F1F\n\u534A\n\u5195\n\u88D9\n\u6396\n\u5889\n\u7EEE\n\u5BDD\n\u82D4\n\u52BF\n\u9877\n\u8925\n\u5207\n\u886E\n\u541B\n\u4F73\n\u5AD2\n\u86A9\n\u971E\n\u4F5A\n\u6D19\n\u900A\n\u9556\n\u66B9\n\u551B\n&\n\u6B92\n\u9876\n\u7897\n\u7357\n\u8F6D\n\u94FA\n\u86CA\n\u5E9F\n\u6079\n\u6C68\n\u5D29\n\u73CD\n\u90A3\n\u6775\n\u66F2\n\u7EBA\n\u590F\n\u85B0\n\u5080\n\u95F3\n\u6DEC\n\u59D8\n\u8200\n\u62E7\n\u5377\n\u6942\n\u604D\n\u8BAA\n\u53A9\n\u5BEE\n\u7BEA\n\u8D53\n\u4E58\n\u706D\n\u76C5\n\u97A3\n\u6C9F\n\u614E\n\u6302\n\u997A\n\u9F3E\n\u6773\n\u6811\n\u7F28\n\u4E1B\n\u7D6E\n\u5A0C\n\u81FB\n\u55F3\n\u7BE1\n\u4FA9\n\u8FF0\n\u8870\n\u77DB\n\u5708\n\u869C\n\u5315\n\u7B79\n\u533F\n\u6FDE\n\u6668\n\u53F6\n\u9A8B\n\u90DD\n\u631A\n\u86B4\n\u6EDE\n\u589E\n\u4F8D\n\u63CF\n\u74E3\n\u5416\n\u5AE6\n\u87D2\n\u533E\n\u5723\n\u8D4C\n\u6BE1\n\u765E\n\u607A\n\u767E\n\u66F3\n\u9700\n\u7BD3\n\u80AE\n\u5E96\n\u5E0F\n\u537F\n\u9A7F\n\u9057\n\u8E6C\n\u9B13\n\u9AA1\n\u6B49\n\u828E\n\u80F3\n\u5C50\n\u79BD\n\u70E6\n\u664C\n\u5BC4\n\u5ABE\n\u72C4\n\u7FE1\n\u82D2\n\u8239\n\u5EC9\n\u7EC8\n\u75DE\n\u6B87\n\u3005\n\u7566\n\u9976\n\u6539\n\u62C6\n\u60BB\n\u8404\n\uFFE1\n\u74FF\n\u4E43\n\u8A3E\n\u6845\n\u532E\n\u6EA7\n\u62E5\n\u7EB1\n\u94CD\n\u9A97\n\u8543\n\u9F8B\n\u7F2C\n\u7236\n\u4F50\n\u759A\n\u680E\n\u918D\n\u63B3\n\u84C4\nx\n\u60C6\n\u989C\n\u9C86\n\u6986\n\u3014\n\u730E\n\u654C\n\u66B4\n\u8C25\n\u9CAB\n\u8D3E\n\u7F57\n\u73BB\n\u7F04\n\u6266\n\u82AA\n\u7663\n\u843D\n\u5F92\n\u81FE\n\u607F\n\u7329\n\u6258\n\u90B4\n\u8084\n\u7275\n\u6625\n\u965B\n\u8000\n\u520A\n\u62D3\n\u84D3\n\u90B3\n\u5815\n\u5BC7\n\u6789\n\u6DCC\n\u5561\n\u6E44\n\u517D\n\u9177\n\u843C\n\u789A\n\u6FE0\n\u8424\n\u5939\n\u65EC\n\u622E\n\u68AD\n\u7425\n\u692D\n\u6614\n\u52FA\n\u870A\n\u7ED0\n\u665A\n\u5B7A\n\u50F5\n\u5BA3\n\u6444\n\u51BD\n\u65E8\n\u840C\n\u5FD9\n\u86A4\n\u7709\n\u567C\n\u87D1\n\u4ED8\n\u5951\n\u74DC\n\u60BC\n\u98A1\n\u58C1\n\u66FE\n\u7A95\n\u98A2\n\u6F8E\n\u4EFF\n\u4FD1\n\u6D51\n\u5D4C\n\u6D63\n\u4E4D\n\u788C\n\u892A\n\u4E71\n\u851F\n\u9699\n\u73A9\n\u5250\n\u846B\n\u7BAB\n\u7EB2\n\u56F4\n\u4F10\n\u51B3\n\u4F19\n\u6F29\n\u745F\n\u5211\n\u8093\n\u9573\n\u7F13\n\u8E6D\n\u6C28\n\u7693\n\u5178\n\u7572\n\u574D\n\u94D1\n\u6A90\n\u5851\n\u6D1E\n\u502C\n\u50A8\n\u80F4\n\u6DF3\n\u623E\n\u5410\n\u707C\n\u60FA\n\u5999\n\u6BD5\n\u73D0\n\u7F08\n\u8671\n\u76D6\n\u7FB0\n\u9E3F\n\u78C5\n\u8C13\n\u9AC5\n\u5A34\n\u82F4\n\u5537\n\u86A3\n\u9739\n\u62A8\n\u8D24\n\u5520\n\u72AC\n\u8A93\n\u900D\n\u5EA0\n\u903C\n\u9E93\n\u7C7C\n\u91C9\n\u545C\n\u78A7\n\u79E7\n\u6C29\n\u6454\n\u9704\n\u7A78\n\u7EA8\n\u8F9F\n\u5988\n\u6620\n\u5B8C\n\u725B\n\u7F34\n\u55F7\n\u708A\n\u6069\n\u8354\n\u8306\n\u6389\n\u7D0A\n\u614C\n\u8393\n\u7F9F\n\u9619\n\u8401\n\u78D0\n\u53E6\n\u8579\n\u8FB1\n\u9CD0\n\u6E6E\n\u5421\n\u5429\n\u5510\n\u7766\n\u57A0\n\u8212\n\u571C\n\u5197\n\u77BF\n\u6EBA\n\u82BE\n\u56F1\n\u5320\n\u50F3\n\u6C50\n\u83E9\n\u996C\n\u6F13\n\u9ED1\n\u9730\n\u6D78\n\u6FE1\n\u7AA5\n\u6BC2\n\u84A1\n\u5162\n\u9A7B\n\u9E49\n\u82AE\n\u8BD9\n\u8FEB\n\u96F3\n\u5382\n\u5FD0\n\u81C6\n\u7334\n\u9E23\n\u86AA\n\u6808\n\u7B95\n\u7FA1\n\u6E10\n\u8386\n\u634D\n\u7708\n\u54D3\n\u8DB4\n\u8E7C\n\u57D5\n\u56A3\n\u9A9B\n\u5B8F\n\u6DC4\n\u6591\n\u565C\n\u4E25\n\u745B\n\u5783\n\u690E\n\u8BF1\n\u538B\n\u5EBE\n\u7EDE\n\u7118\n\u5EFF\n\u62A1\n\u8FC4\n\u68D8\n\u592B\n\u7EAC\n\u9539\n\u7728\n\u778C\n\u4FA0\n\u8110\n\u7ADE\n\u7011\n\u5B73\n\u9AA7\n\u9041\n\u59DC\n\u98A6\n\u836A\n\u6EDA\n\u8426\n\u4F2A\n\u9038\n\u7CB3\n\u722C\n\u9501\n\u77E3\n\u5F79\n\u8DA3\n\u6D12\n\u9894\n\u8BCF\n\u9010\n\u5978\n\u752D\n\u60E0\n\u6500\n\u8E44\n\u6CDB\n\u5C3C\n\u62FC\n\u962E\n\u9E70\n\u4E9A\n\u9888\n\u60D1\n\u52D2\n\u3009\n\u9645\n\u809B\n\u7237\n\u521A\n\u94A8\n\u4E30\n\u517B\n\u51B6\n\u9CBD\n\u8F89\n\u853B\n\u753B\n\u8986\n\u76B4\n\u598A\n\u9EA6\n\u8FD4\n\u9189\n\u7682\n\u64C0\n\u3017\n\u9176\n\u51D1\n\u7CB9\n\u609F\n\u8BC0\n\u7856\n\u6E2F\n\u535C\nz\n\u6740\n\u6D95\n\xB1\n\u820D\n\u94E0\n\u62B5\n\u5F1B\n\u6BB5\n\u655D\n\u9550\n\u5960\n\u62C2\n\u8F74\n\u8DDB\n\u88B1\ne\nt\n\u6C89\n\u83C7\n\u4FCE\n\u85AA\n\u5CE6\n\u79ED\n\u87F9\n\u5386\n\u76DF\n\u83E0\n\u5BE1\n\u6DB2\n\u80A2\n\u55BB\n\u67D3\n\u88F1\n\u60B1\n\u62B1\n\u6C19\n\u8D64\n\u6345\n\u731B\n\u8DD1\n\u6C2E\n\u8C23\n\u4EC1\n\u5C3A\n\u8F8A\n\u7A8D\n\u70D9\n\u884D\n\u67B6\n\u64E6\n\u500F\n\u7490\n\u7441\n\u5E01\n\u695E\n\u80D6\n\u5914\n\u8DB8\n\u909B\n\u60F4\n\u9955\n\u8654\n\u874E\n\xA7\n\u54C9\n\u8D1D\n\u5BBD\n\u8FAB\n\u70AE\n\u6269\n\u9972\n\u7C7D\n\u9B4F\n\u83DF\n\u9530\n\u4F0D\n\u731D\n\u672B\n\u7433\n\u54DA\n\u86CE\n\u9082\n\u5440\n\u59FF\n\u911E\n\u5374\n\u6B67\n\u4ED9\n\u6078\n\u6910\n\u68EE\n\u7252\n\u5BE4\n\u8892\n\u5A46\n\u8662\n\u96C5\n\u9489\n\u6735\n\u8D3C\n\u6B32\n\u82DE\n\u5BF0\n\u6545\n\u9F9A\n\u576D\n\u5618\n\u54AB\n\u793C\n\u7877\n\u5140\n\u7762\n\u6C76\n\u2019\n\u94F2\n\u70E7\n\u7ED5\n\u8BC3\n\u6D43\n\u94BF\n\u54FA\n\u67DC\n\u8BBC\n\u988A\n\u7481\n\u8154\n\u6D3D\n\u5490\n\u8132\n\u7C0C\n\u7B60\n\u9563\n\u73AE\n\u97A0\n\u8C01\n\u517C\n\u59C6\n\u6325\n\u68AF\n\u8774\n\u8C18\n\u6F15\n\u5237\n\u8E8F\n\u5BA6\n\u5F3C\nb\n\u578C\n\u5288\n\u9E9F\n\u8389\n\u63ED\n\u7B19\n\u6E0E\n\u4ED5\n\u55E4\n\u4ED3\n\u914D\n\u600F\n\u62AC\n\u9519\n\u6CEF\n\u954A\n\u5B70\n\u733F\n\u90AA\n\u4ECD\n\u79CB\n\u9F2C\n\u58F9\n\u6B47\n\u5435\n\u70BC\n<\n\u5C27\n\u5C04\n\u67EC\n\u5EF7\n\u80E7\n\u973E\n\u51F3\n\u968B\n\u809A\n\u6D6E\n\u68A6\n\u7965\n\u682A\n\u5835\n\u9000\nL\n\u9E6B\n\u8DCE\n\u51F6\n\u6BFD\n\u835F\n\u70AB\n\u6829\n\u73B3\n\u751C\n\u6C82\n\u9E7F\n\u987D\n\u4F2F\n\u7239\n\u8D54\n\u86F4\n\u5F90\n\u5321\n\u6B23\n\u72F0\n\u7F38\n\u96F9\n\u87C6\n\u75A4\n\u9ED8\n\u6CA4\n\u555C\n\u75C2\n\u8863\n\u7985\nw\ni\nh\n\u8FBD\n\u8473\n\u9EDD\n\u9497\n\u505C\n\u6CBD\n\u68D2\n\u99A8\n\u988C\n\u8089\n\u5434\n\u786B\n\u60AF\n\u52BE\n\u5A08\n\u9A6C\n\u5567\n\u540A\n\u608C\n\u9551\n\u5CED\n\u5E06\n\u7023\n\u6D89\n\u54B8\n\u75B8\n\u6ECB\n\u6CE3\n\u7FE6\n\u62D9\n\u7678\n\u94A5\n\u8712\n+\n\u5C3E\n\u5E84\n\u51DD\n\u6CC9\n\u5A62\n\u6E34\n\u8C0A\n\u4E5E\n\u9646\n\u9509\n\u7CCA\n\u9E26\n\u6DEE\nI\nB\nN\n\u6666\n\u5F17\n\u4E54\n\u5EA5\n\u8461\n\u5C3B\n\u5E2D\n\u6A61\n\u50A3\n\u6E23\n\u62FF\n\u60E9\n\u9E8B\n\u659B\n\u7F03\n\u77EE\n\u86CF\n\u5C98\n\u9E3D\n\u59D0\n\u818F\n\u50AC\n\u5954\n\u9552\n\u55B1\n\u8821\n\u6467\n\u94AF\n\u80E4\n\u67E0\n\u62D0\n\u748B\n\u9E25\n\u5362\n\u8361\n\u503E\n^\n_\n\u73C0\n\u9004\n\u8427\n\u587E\n\u6387\n\u8D2E\n\u7B06\n\u8042\n\u5703\n\u51B2\n\u5D6C\nM\n\u6ED4\n\u7B15\n\u503C\n\u7099\n\u5076\n\u8731\n\u6410\n\u6886\n\u6C6A\n\u852C\n\u8151\n\u9E2F\n\u8E47\n\u655E\n\u7EEF\n\u4EE8\n\u796F\n\u8C06\n\u68A7\n\u7CD7\n\u946B\n\u5578\n\u8C7A\n\u56F9\n\u733E\n\u5DE2\n\u67C4\n\u701B\n\u7B51\n\u8E0C\n\u6CAD\n\u6697\n\u82C1\n\u9C7F\n\u8E49\n\u8102\n\u8616\n\u7262\n\u70ED\n\u6728\n\u5438\n\u6E83\n\u5BA0\n\u5E8F\n\u6CDE\n\u507F\n\u62DC\n\u6AA9\n\u539A\n\u6710\n\u6BD7\n\u87B3\n\u541E\n\u5A9A\n\u673D\n\u62C5\n\u8757\n\u6A58\n\u7574\n\u7948\n\u7CDF\n\u76F1\n\u96BC\n\u90DC\n\u60DC\n\u73E0\n\u88E8\n\u94F5\n\u7119\n\u741A\n\u552F\n\u549A\n\u566A\n\u9A8A\n\u4E2B\n\u6EE2\n\u52E4\n\u68C9\n\u5478\n\u54A3\n\u6DC0\n\u9694\n\u857E\n\u7A88\n\u9968\n\u6328\n\u7145\n\u77ED\n\u5319\n\u7C95\n\u955C\n\u8D63\n\u6495\n\u58A9\n\u916C\n\u9981\n\u8C4C\n\u9890\n\u6297\n\u9163\n\u6C13\n\u4F51\n\u6401\n\u54ED\n\u9012\n\u8037\n\u6DA1\n\u6843\n\u8D3B\n\u78A3\n\u622A\n\u7626\n\u662D\n\u954C\n\u8513\n\u6C1A\n\u7532\n\u7315\n\u8574\n\u84EC\n\u6563\n\u62FE\n\u7E9B\n\u72FC\n\u7337\n\u94CE\n\u57CB\n\u65D6\n\u77FE\n\u8BB3\n\u56CA\n\u7CDC\n\u8FC8\n\u7C9F\n\u8682\n\u7D27\n\u9CB3\n\u7622\n\u683D\n\u7A3C\n\u7F8A\n\u9504\n\u659F\n\u7741\n\u6865\n\u74EE\n\u8E59\n\u7949\n\u91BA\n\u9F3B\n\u6631\n\u5243\n\u8DF3\n\u7BF1\n\u8DF7\n\u849C\n\u7FCE\n\u5B85\n\u6656\n\u55D1\n\u58D1\n\u5CFB\n\u766B\n\u5C4F\n\u72E0\n\u964B\n\u889C\n\u9014\n\u618E\n\u7940\n\u83B9\n\u6EDF\n\u4F76\n\u6EA5\n\u81E3\n\u7EA6\n\u76DB\n\u5CF0\n\u78C1\n\u6175\n\u5A6A\n\u62E6\n\u8385\n\u6715\n\u9E66\n\u7CB2\n\u88E4\n\u54CE\n\u75A1\n\u5AD6\n\u7435\n\u7A9F\n\u582A\n\u8C1B\n\u5609\n\u5121\n\u9CDD\n\u65A9\n\u90FE\n\u9A78\n\u914A\n\u5984\n\u80DC\n\u8D3A\n\u5F99\n\u5085\n\u564C\n\u94A2\n\u6805\n\u5E87\n\u604B\n\u531D\n\u5DEF\n\u9088\n\u5C38\n\u951A\n\u7C97\n\u4F5F\n\u86DF\n\u85B9\n\u7EB5\n\u868A\n\u90C5\n\u7EE2\n\u9510\n\u82D7\n\u4FDE\n\u7BC6\n\u6DC6\n\u8180\n\u9C9C\n\u714E\n\u8BF6\n\u79FD\n\u5BFB\n\u6DAE\n\u523A\n\u6000\n\u5676\n\u5DE8\n\u8930\n\u9B45\n\u7076\n\u704C\n\u6849\n\u85D5\n\u8C1C\n\u8238\n\u8584\n\u6400\n\u607D\n\u501F\n\u726F\n\u75C9\n\u6E25\n\u613F\n\u4E93\n\u8018\n\u6760\n\u67E9\n\u9514\n\u86B6\n\u94A3\n\u73C8\n\u5598\n\u8E52\n\u5E7D\n\u8D50\n\u7A17\n\u6664\n\u83B1\n\u6CD4\n\u626F\n\u80AF\n\u83EA\n\u88C6\n\u8169\n\u8C49\n\u7586\n\u9A9C\n\u8150\n\u502D\n\u73CF\n\u5514\n\u7CAE\n\u4EA1\n\u6DA6\n\u6170\n\u4F3D\n\u6A44\n\u7384\n\u8A89\n\u9190\n\u80C6\n\u9F8A\n\u7CBC\n\u586C\n\u9647\n\u5F7C\n\u524A\n\u55E3\n\u7EFE\n\u82BD\n\u5997\n\u57AD\n\u7634\n\u723D\n\u858F\n\u5BE8\n\u9F88\n\u6CE0\n\u5F39\n\u8D62\n\u6F2A\n\u732B\n\u5627\n\u6D82\n\u6064\n\u572D\n\u8327\n\u70FD\n\u5C51\n\u75D5\n\u5DFE\n\u8D56\n\u8378\n\u51F0\n\u816E\n\u7548\n\u4EB5\n\u8E72\n\u5043\n\u82C7\n\u6F9C\n\u826E\n\u6362\n\u9ABA\n\u70D8\n\u82D5\n\u6893\n\u9889\n\u8087\n\u54D7\n\u6084\n\u6C24\n\u6DA0\n\u846C\n\u5C60\n\u9E6D\n\u690D\n\u7AFA\n\u4F6F\n\u8BE3\n\u9C87\n\u7600\n\u9C85\n\u90A6\n\u79FB\n\u6EC1\n\u51AF\n\u8015\n\u7654\n\u620C\n\u832C\n\u6C81\n\u5DE9\n\u60A0\n\u6E58\n\u6D2A\n\u75F9\n\u951F\n\u5FAA\n\u8C0B\n\u8155\n\u9CC3\n\u94A0\n\u635E\n\u7109\n\u8FCE\n\u78B1\n\u4F2B\n\u6025\n\u69B7\n\u5948\n\u909D\n\u536F\n\u8F84\n\u76B2\n\u535F\n\u919B\n\u7579\n\u5FE7\n\u7A33\n\u96C4\n\u663C\n\u7F29\n\u9608\n\u7751\n\u624C\n\u8017\n\u66E6\n\u6D85\n\u634F\n\u77A7\n\u9095\n\u6DD6\n\u6F09\n\u94DD\n\u8026\n\u79B9\n\u6E5B\n\u55BD\n\u83BC\n\u7405\n\u8BF8\n\u82CE\n\u7E82\n\u7845\n\u59CB\n\u55E8\n\u50A5\n\u71C3\n\u81C2\n\u8D45\n\u5608\n\u5446\n\u8D35\n\u5C79\n\u58EE\n\u808B\n\u4E8D\n\u8680\n\u5345\n\u8C79\n\u8146\n\u90AC\n\u8FED\n\u6D4A\n}\n\u7AE5\n\u8782\n\u6350\n\u5729\n\u52D0\n\u89E6\n\u5BDE\n\u6C4A\n\u58E4\n\u836B\n\u81BA\n\u6E0C\n\u82B3\n\u61FF\n\u9074\n\u8788\n\u6CF0\n\u84FC\n\u86E4\n\u831C\n\u8205\n\u67AB\n\u6714\n\u819D\n\u7719\n\u907F\n\u6885\n\u5224\n\u9E5C\n\u749C\n\u724D\n\u7F05\n\u57AB\n\u85FB\n\u9ED4\n\u4FA5\n\u60DA\n\u61C2\n\u8E29\n\u8170\n\u8148\n\u672D\n\u4E1E\n\u553E\n\u6148\n\u987F\n\u6479\n\u837B\n\u742C\n~\n\u65A7\n\u6C88\n\u6EC2\n\u80C1\n\u80C0\n\u5E44\n\u839C\nZ\n\u5300\n\u9104\n\u638C\n\u7EF0\n\u830E\n\u711A\n\u8D4B\n\u8431\n\u8C11\n\u6C41\n\u94D2\n\u778E\n\u593A\n\u8717\n\u91CE\n\u5A06\n\u5180\n\u5F2F\n\u7BC1\n\u61F5\n\u705E\n\u96BD\n\u82A1\n\u8118\n\u4FD0\n\u8FA9\n\u82AF\n\u63BA\n\u558F\n\u8188\n\u8748\n\u89D0\n\u609A\n\u8E39\n\u8517\n\u71A0\n\u9F20\n\u5475\n\u6293\n\u6A7C\n\u5CE8\n\u755C\n\u7F14\n\u79BE\n\u5D2D\n\u5F03\n\u718A\n\u6452\n\u51F8\n\u62D7\n\u7A79\n\u8499\n\u6292\n\u795B\n\u529D\n\u95EB\n\u6273\n\u9635\n\u918C\n\u8E2A\n\u55B5\n\u4FA3\n\u642C\n\u4EC5\n\u8367\n\u8D4E\n\u877E\n\u7426\n\u4E70\n\u5A67\n\u7784\n\u5BD3\n\u768E\n\u51BB\n\u8D5D\n\u7BA9\n\u83AB\n\u77B0\n\u90CA\n\u7B2B\n\u59DD\n\u7B52\n\u67AA\n\u9063\n\u7178\n\u888B\n\u8206\n\u75F1\n\u6D9B\n\u6BCD\n\u3007\n\u542F\n\u8DF5\n\u8019\n\u7EF2\n\u76D8\n\u9042\n\u660A\n\u641E\n\u69FF\n\u8BEC\n\u7EB0\n\u6CD3\n\u60E8\n\u6AAC\n\u4EBB\n\u8D8A\nC\no\n\u61A9\n\u71B5\n\u7977\n\u9492\n\u66A7\n\u5854\n\u9617\n\u80F0\n\u5484\n\u5A36\n\u9B54\n\u7436\n\u949E\n\u90BB\n\u626C\n\u6749\n\u6BB4\n\u54BD\n\u5F13\n\u3006\n\u9AFB\n\u3011\n\u542D\n\u63FD\n\u9706\n\u62C4\n\u6B96\n\u8106\n\u5F7B\n\u5CA9\n\u829D\n\u52C3\n\u8FA3\n\u524C\n\u949D\n\u560E\n\u7504\n\u4F58\n\u7696\n\u4F26\n\u6388\n\u5F95\n\u6194\n\u632A\n\u7687\n\u5E9E\n\u7A14\n\u829C\n\u8E0F\n\u6EB4\n\u5156\n\u5352\n\u64E2\n\u9965\n\u9CDE\n\u7172\n\u2030\n\u8D26\n\u9897\n\u53FB\n\u65AF\n\u6367\n\u9CCD\n\u742E\n\u8BB9\n\u86D9\n\u7EBD\n\u8C2D\n\u9178\n\u5154\n\u8392\n\u7747\n\u4F1F\n\u89D1\n\u7FB2\n\u55DC\n\u5B9C\n\u8910\n\u65CE\n\u8F9B\n\u5366\n\u8BD8\n\u7B4B\n\u938F\n\u6EAA\n\u631B\n\u7194\n\u961C\n\u6670\n\u9CC5\n\u4E22\n\u595A\n\u7078\n\u5471\n\u732E\n\u9649\n\u9EDB\n\u9E2A\n\u753E\n\u8428\n\u75AE\n\u62EF\n\u6D32\n\u75B9\n\u8F91\n\u53D9\n\u607B\n\u8C12\n\u5141\n\u67D4\n\u70C2\n\u6C0F\n\u9005\n\u6F06\n\u62CE\n\u60CB\n\u6248\n\u6E5F\n\u7EAD\n\u5555\n\u63AC\n\u64DE\n\u54E5\n\u5FFD\n\u6DA4\n\u9E35\n\u9761\n\u90D7\n\u74F7\n\u6241\n\u5ECA\n\u6028\n\u96CF\n\u94AE\n\u6566\nE\n\u61E6\n\u618B\n\u6C40\n\u62DA\n\u5549\n\u814C\n\u5CB8\nf\n\u75FC\n\u7785\n\u5C0A\n\u5480\n\u7729\n\u98D9\n\u5FCC\n\u4EDD\n\u8FE6\n\u71AC\n\u6BEB\n\u80EF\n\u7BD1\n\u8304\n\u817A\n\u51C4\n\u821B\n\u78B4\n\u9535\n\u8BE7\n\u7FAF\n\u5F8C\n\u6F0F\n\u6C64\n\u5B93\n\u4EDE\n\u8681\n\u58F6\n\u8C30\n\u7691\n\u94C4\n\u68F0\n\u7F54\n\u8F85\n\u6676\n\u82E6\n\u725F\n\u95FD\n\\\n\u70C3\n\u996E\n\u807F\n\u4E19\n\u86F3\n\u6731\n\u7164\n\u6D94\n\u9CD6\n\u7281\n\u7F50\n\u837C\n\u7812\n\u6DE6\n\u59A4\n\u9ECF\n\u620E\n\u5B51\n\u5A55\n\u747E\n\u6222\n\u94B5\n\u67A3\n\u634B\n\u7825\n\u8869\n\u72D9\n\u6860\n\u7A23\n\u960E\n\u8083\n\u688F\n\u8BEB\n\u5B6A\n\u6636\n\u5A4A\n\u886B\n\u55D4\n\u4F83\n\u585E\n\u8703\n\u6A35\n\u5CD2\n\u8C8C\n\u5C7F\n\u6B3A\n\u7F2B\n\u9610\n\u6816\n\u8BDF\n\u73DE\n\u836D\n\u541D\n\u840D\n\u55FD\n\u6042\n\u557B\n\u8734\n\u78EC\n\u5CCB\n\u4FF8\n\u8C6B\n\u8C0E\n\u5F8A\n\u954D\n\u97EC\n\u9B47\n\u6674\nU\n\u56DF\n\u731C\n\u86EE\n\u5750\n\u56FF\n\u4F34\n\u4EAD\n\u809D\n\u4F57\n\u8760\n\u5983\n\u80DE\n\u6EE9\n\u69B4\n\u6C16\n\u57A9\n\u82CB\n\u7823\n\u626A\n\u998F\n\u59D3\n\u8F69\n\u5389\n\u5925\n\u4F88\n\u7980\n\u5792\n\u5C91\n\u8D4F\n\u949B\n\u8F90\n\u75D4\n\u62AB\n\u7EB8\n\u78B3\n\u201C\n\u575E\n\u8813\n\u6324\n\u8365\n\u6C85\n\u6094\n\u94E7\n\u5E3C\n\u848C\n\u8747\na\np\ny\nn\ng\n\u54C0\n\u6D46\n\u7476\n\u51FF\n\u6876\n\u9988\n\u76AE\n\u5974\n\u82DC\n\u4F64\n\u4F36\n\u6657\n\u94F1\n\u70AC\n\u4F18\n\u5F0A\n\u6C22\n\u6043\n\u752B\n\u6525\n\u7AEF\n\u950C\n\u7070\n\u7A39\n\u709D\n\u66D9\n\u908B\n\u4EA5\n\u7736\n\u78BE\n\u62C9\n\u841D\n\u7ED4\n\u6377\n\u6D4D\n\u814B\n\u59D1\n\u83D6\n\u51CC\n\u6D9E\n\u9EBD\n\u9522\n\u6868\n\u6F62\n\u7ECE\n\u9570\n\u6B86\n\u9511\n\u6E1D\n\u94EC\n\u56F0\n\u7EFD\n\u89CE\n\u5308\n\u7CD9\n\u6691\n\u88F9\n\u9E1F\n\u76D4\n\u80BD\n\u8FF7\n\u7DA6\n\u300E\n\u4EB3\n\u4F5D\n\u4FD8\n\u94B4\n\u89C7\n\u9AA5\n\u4EC6\n\u759D\n\u8DEA\n\u5A76\n\u90EF\n\u7039\n\u5509\n\u8116\n\u8E1E\n\u9488\n\u667E\n\u5FD2\n\u627C\n\u77A9\n\u53DB\n\u6912\n\u759F\n\u55E1\n\u9097\n\u8086\n\u8DC6\n\u73AB\n\u5FE1\n\u6363\n\u54A7\n\u5506\n\u8244\n\u8611\n\u6F66\n\u7B1B\n\u961A\n\u6CB8\n\u6CFB\n\u638A\n\u83FD\n\u8D2B\n\u65A5\n\u9AC2\n\u5B62\n\u9542\n\u8D42\n\u9E9D\n\u9E3E\n\u5C61\n\u886C\n\u82F7\n\u606A\n\u53E0\n\u5E0C\n\u7CA4\n\u723B\n\u559D\n\u832B\n\u60EC\n\u90F8\n\u7EFB\n\u5EB8\n\u6485\n\u789F\n\u5B84\n\u59B9\n\u819B\n\u53EE\n\u9975\n\u5D1B\n\u55F2\n\u6905\n\u51A4\n\u6405\n\u5495\n\u655B\n\u5C39\n\u57A6\n\u95F7\n\u8749\n\u970E\n\u52F0\n\u8D25\n\u84D1\n\u6CF8\n\u80A4\n\u9E4C\n\u5E4C\n\u7126\n\u6D60\n\u978D\n\u5201\n\u8230\n\u4E59\n\u7AFF\n\u88D4\n\u3002\n\u8335\n\u51FD\n\u4F0A\n\u5144\n\u4E28\n\u5A1C\n\u530D\n\u8B07\n\u83AA\n\u5BA5\n\u4F3C\n\u877D\n\u7FF3\n\u916A\n\u7FE0\n\u7C91\n\u8587\n\u7962\n\u9A8F\n\u8D60\n\u53EB\nQ\n\u5664\n\u567B\n\u7AD6\n\u8297\n\u83A0\n\u6F6D\n\u4FCA\n\u7FBF\n\u801C\nO\n\u90EB\n\u8D81\n\u55EA\n\u56DA\n\u8E76\n\u8292\n\u6D01\n\u7B0B\n\u9E51\n\u6572\n\u785D\n\u5576\n\u5821\n\u6E32\n\u63E9\n\u300F\n\u643A\n\u5BBF\n\u9052\n\u988D\n\u626D\n\u68F1\n\u5272\n\u841C\n\u8538\n\u8475\n\u7434\n\u6342\n\u9970\n\u8859\n\u803F\n\u63A0\n\u52DF\n\u5C82\n\u7A96\n\u6D9F\n\u853A\n\u7624\n\u67DE\n\u77AA\n\u601C\n\u5339\n\u8DDD\n\u6954\n\u709C\n\u54C6\n\u79E6\n\u7F0E\n\u5E7C\n\u8301\n\u7EEA\n\u75E8\n\u6068\n\u6978\n\u5A05\n\u74E6\n\u6869\n\u96EA\n\u5B34\n\u4F0F\n\u6994\n\u59A5\n\u94FF\n\u62CC\n\u7720\n\u96CD\n\u7F07\n\u2018\n\u5353\n\u6413\n\u54CC\n\u89DE\n\u5669\n\u5C48\n\u54E7\n\u9AD3\n\u54A6\n\u5DC5\n\u5A11\n\u4F91\n\u6DEB\n\u81B3\n\u795D\n\u52FE\n\u59CA\n\u83B4\n\u80C4\n\u7583\n\u859B\n\u8737\n\u80DB\n\u5DF7\n\u8299\n\u828B\n\u7199\n\u95F0\n\u52FF\n\u7A83\n\u72F1\n\u5269\n\u948F\n\u5E62\n\u965F\n\u94DB\n\u6167\n\u9774\n\u800D\nk\n\u6D59\n\u6D47\n\u98E8\n\u60DF\n\u7ED7\n\u795C\n\u6F88\n\u557C\n\u54AA\n\u78F7\n\u645E\n\u8BC5\n\u90E6\n\u62B9\n\u8DC3\n\u58EC\n\u5415\n\u8096\n\u740F\n\u98A4\n\u5C34\n\u5261\n\u62A0\n\u51CB\n\u8D5A\n\u6CCA\n\u6D25\n\u5B95\n\u6BB7\n\u5014\n\u6C32\n\u6F2B\n\u90BA\n\u6D8E\n\u6020\n$\n\u57AE\n\u836C\n\u9075\n\u4FCF\n\u53F9\n\u5662\n\u997D\n\u8718\n\u5B59\n\u7B75\n\u75BC\n\u97AD\n\u7FA7\n\u7266\n\u7BAD\n\u6F74\nc\n\u7738\n\u796D\n\u9AEF\n\u5556\n\u5773\n\u6101\n\u82A9\n\u9A6E\n\u5021\n\u5DFD\n\u7A70\n\u6C83\n\u80DA\n\u6012\n\u51E4\n\u69DB\n\u5242\n\u8DB5\n\u5AC1\nv\n\u90A2\n\u706F\n\u9122\n\u6850\n\u777D\n\u6A97\n\u952F\n\u69DF\n\u5A77\n\u5D4B\n\u573B\n\u8BD7\n\u8548\n\u98A0\n\u906D\n\u75E2\n\u82B8\n\u602F\n\u99A5\n\u7AED\n\u9517\n\u5F9C\n\u606D\n\u904D\n\u7C41\n\u5251\n\u5631\n\u82E1\n\u9F84\n\u50E7\n\u6851\n\u6F78\n\u5F18\n\u6FB6\n\u6979\n\u60B2\n\u8BAB\n\u6124\n\u8165\n\u60B8\n\u8C0D\n\u6939\n\u5462\n\u6853\n\u846D\n\u652B\n\u9600\n\u7FF0\n\u8EB2\n\u6556\n\u67D1\n\u90CE\n\u7B28\n\u6A47\n\u5443\n\u9B41\n\u71CE\n\u8113\n\u8469\n\u78CB\n\u579B\n\u73BA\n\u72EE\n\u6C93\n\u781C\n\u854A\n\u953A\n\u7F79\n\u8549\n\u7FF1\n\u8650\n\u95FE\n\u5DEB\n\u65E6\n\u8331\n\u5B37\n\u67AF\n\u9E4F\n\u8D21\n\u82B9\n\u6C5B\n\u77EB\n\u7EC1\n\u62E3\n\u79BA\n\u4F43\n\u8BA3\n\u822B\n\u60EF\n\u4E73\n\u8D8B\n\u75B2\n\u633D\n\u5C9A\n\u867E\n\u887E\n\u8839\n\u8E42\n\u98D3\n\u6C26\n\u94D6\n\u5B69\n\u7A1E\n\u745C\n\u58C5\n\u6380\n\u52D8\n\u5993\n\u7545\n\u9ACB\nW\n\u5E90\n\u7272\n\u84FF\n\u6995\n\u7EC3\n\u57A3\n\u5531\n\u90B8\n\u83F2\n\u6606\n\u5A7A\n\u7A7F\n\u7EE1\n\u9E92\n\u86B1\n\u6382\n\u611A\n\u6CF7\n\u6DAA\n\u6F33\n\u59A9\n\u5A09\n\u6984\n\u8BB7\n\u89C5\n\u65E7\n\u85E4\n\u716E\n\u545B\n\u67F3\n\u8153\n\u53ED\n\u5EB5\n\u70F7\n\u9621\n\u7F42\n\u8715\n\u64C2\n\u7316\n\u54BF\n\u5AB2\n\u8109\n\u3010\n\u6C8F\n\u8C85\n\u9EE0\n\u718F\n\u54F2\n\u70C1\n\u5766\n\u9175\n\u515C\n\xD7\n\u6F47\n\u6492\n\u527D\n\u73E9\n\u5739\n\u4E7E\n\u6478\n\u6A1F\n\u5E3D\n\u55D2\n\u8944\n\u9B42\n\u8F7F\n\u61AC\n\u9521\n\u3015\n\u5583\n\u7686\n\u5496\n\u9685\n\u8138\n\u6B8B\n\u6CEE\n\u8882\n\u9E42\n\u73CA\n\u56E4\n\u6346\n\u54A4\n\u8BEF\n\u5FA8\n\u95F9\n\u6DD9\n\u828A\n\u6DCB\n\u6006\n\u56D7\n\u62E8\n\u68B3\n\u6E24\nR\nG\n\u7EE8\n\u8693\n\u5A40\n\u5E61\n\u72E9\n\u9EBE\n\u8C22\n\u5522\n\u88F8\n\u65CC\n\u4F09\n\u7EB6\n\u88C2\n\u9A73\n\u783C\n\u549B\n\u6F84\n\u6A28\n\u8E48\n\u5B99\n\u6F8D\n\u500D\n\u8C94\n\u64CD\n\u52C7\n\u87E0\n\u6448\n\u7827\n\u866C\n\u591F\n\u7F01\n\u60A6\n\u85FF\n\u64B8\n\u8279\n\u6441\n\u6DF9\n\u8C47\n\u864E\n\u69AD\n\u02C9\n\u5431\nd\n\xB0\n\u55A7\n\u8340\n\u8E31\n\u4FAE\n\u594B\n\u5055\n\u9977\n\u728D\n\u60EE\n\u5751\n\u748E\n\u5F98\n\u5B9B\n\u5986\n\u8888\n\u5029\n\u7AA6\n\u6602\n\u834F\n\u4E56\nK\n\u6005\n\u64B0\n\u9CD9\n\u7259\n\u8881\n\u915E\nX\n\u75FF\n\u743C\n\u95F8\n\u96C1\n\u8DBE\n\u835A\n\u867B\n\u6D9D\n\u300A\n\u674F\n\u97ED\n\u5048\n\u70E4\n\u7EEB\n\u9798\n\u5349\n\u75C7\n\u9062\n\u84E5\n\u8BCB\n\u676D\n\u8368\n\u5306\n\u7AE3\n\u7C2A\n\u8F99\n\u6555\n\u865E\n\u4E39\n\u7F2D\n\u54A9\n\u9EDF\nm\n\u6DE4\n\u7455\n\u5482\n\u94C9\n\u787C\n\u8328\n\u5D82\n\u75D2\n\u7578\n\u656C\n\u6DBF\n\u7CAA\n\u7A98\n\u719F\n\u53D4\n\u5AD4\n\u76FE\n\u5FF1\n\u88D8\n\u61BE\n\u68B5\n\u8D61\n\u73D9\n\u54AF\n\u5A18\n\u5E99\n\u6EAF\n\u80FA\n\u8471\n\u75EA\n\u644A\n\u8377\n\u535E\n\u4E52\n\u9AE6\n\u5BD0\n\u94ED\n\u5769\n\u80D7\n\u67B7\n\u7206\n\u6E9F\n\u56BC\n\u7F9A\n\u782C\n\u8F68\n\u60CA\n\u6320\n\u7F44\n\u7AFD\n\u83CF\n\u6C27\n\u6D45\n\u6963\n\u76FC\n\u67A2\n\u70B8\n\u9606\n\u676F\n\u8C0F\n\u566C\n\u6DC7\n\u6E3A\n\u4FEA\n\u79C6\n\u5893\n\u6CEA\n\u8DFB\n\u780C\n\u75F0\n\u57A1\n\u6E21\n\u803D\n\u91DC\n\u8BB6\n\u9CCE\n\u715E\n\u5457\n\u97F6\n\u8236\n\u7EF7\n\u9E73\n\u7F1C\n\u65F7\n\u94CA\n\u76B1\n\u9F8C\n\u6A80\n\u9716\n\u5944\n\u69D0\n\u8273\n\u8776\n\u65CB\n\u54DD\n\u8D76\n\u9A9E\n\u86A7\n\u814A\n\u76C8\n\u4E01\n`\n\u871A\n\u77F8\n\u8759\n\u7768\n\u5693\n\u50FB\n\u9B3C\n\u91B4\n\u591C\n\u5F5D\n\u78CA\n\u7B14\n\u62D4\n\u6800\n\u7CD5\n\u53A6\n\u90B0\n\u7EAB\n\u902D\n\u7EA4\n\u7726\n\u818A\n\u998D\n\u8E87\n\u70EF\n\u863C\n\u51AC\n\u8BE4\n\u6684\n\u9AB6\n\u54D1\n\u7620\n\u300D\n\u81CA\n\u4E15\n\u6108\n\u54B1\n\u87BA\n\u64C5\n\u8DCB\n\u640F\n\u786A\n\u8C04\n\u7B20\n\u6DE1\n\u563F\n\u9A85\n\u8C27\n\u9F0E\n\u768B\n\u59DA\n\u6B7C\n\u8822\n\u9A7C\n\u8033\n\u80EC\n\u631D\n\u6DAF\n\u72D7\n\u84BD\n\u5B53\n\u72B7\n\u51C9\n\u82A6\n\u7BB4\n\u94E4\n\u5B64\n\u561B\n\u5764\nV\n\u8334\n\u6726\n\u631E\n\u5C16\n\u6A59\n\u8BDE\n\u6434\n\u7887\n\u6D35\n\u6D5A\n\u5E1A\n\u870D\n\u6F2F\n\u67D8\n\u568E\n\u8BBD\n\u82AD\n\u8364\n\u54BB\n\u7960\n\u79C9\n\u8DD6\n\u57C3\n\u5413\n\u7CEF\n\u7737\n\u9992\n\u60F9\n\u5A3C\n\u9C91\n\u5AE9\n\u8BB4\n\u8F6E\n\u77A5\n\u9776\n\u891A\n\u4E4F\n\u7F24\n\u5B8B\n\u5E27\n\u5220\n\u9A71\n\u788E\n\u6251\n\u4FE9\n\u4FC4\n\u504F\n\u6DA3\n\u7AF9\n\u5671\n\u7699\n\u4F70\n\u6E1A\n\u5527\n\u65A1\n#\n\u9549\n\u5200\n\u5D0E\n\u7B50\n\u4F63\n\u592D\n\u8D30\n\u80B4\n\u5CD9\n\u54D4\n\u827F\n\u5310\n\u727A\n\u955B\n\u7F18\n\u4EE1\n\u5AE1\n\u52A3\n\u67B8\n\u5800\n\u68A8\n\u7C3F\n\u9E2D\n\u84B8\n\u4EA6\n\u7A3D\n\u6D74\n{\n\u8862\n\u675F\n\u69F2\nj\n\u9601\n\u63CD\n\u75A5\n\u68CB\n\u6F4B\n\u806A\n\u7A9C\n\u4E53\n\u775B\n\u63D2\n\u5189\n\u962A\n\u82CD\n\u643D\n\u300C\n\u87FE\n\u879F\n\u5E78\n\u4EC7\n\u6A3D\n\u6482\n\u6162\n\u8DE4\n\u5E54\n\u4FDA\n\u6DC5\n\u8983\n\u89CA\n\u6EB6\n\u5996\n\u5E1B\n\u4FA8\n\u66F0\n\u59BE\n\u6CD7\n\xB7\n\uFF1A\n\u7018\n\u98A8\n\xCB\n\uFF08\n\uFF09\n\u2236\n\u7D05\n\u7D17\n\u746D\n\u96F2\n\u982D\n\u9D8F\n\u8CA1\n\u8A31\n\u2022\n\xA5\n\u6A02\n\u7117\n\u9E97\n\u2014\n\uFF1B\n\u6ED9\n\u6771\n\u69AE\n\u7E6A\n\u8208\n\u2026\n\u9580\n\u696D\n\u03C0\n\u694A\n\u570B\n\u9867\n\xE9\n\u76E4\n\u5BF3\n\u039B\n\u9F8D\n\u9CF3\n\u5CF6\n\u8A8C\n\u7DE3\n\u7D50\n\u92AD\n\u842C\n\u52DD\n\u794E\n\u749F\n\u512A\n\u6B61\n\u81E8\n\u6642\n\u8CFC\n\uFF1D\n\u2605\n\u85CD\n\u6607\n\u9435\n\u89C0\n\u52C5\n\u8FB2\n\u8072\n\u756B\n\u517F\n\u8853\n\u767C\n\u5289\n\u8A18\n\u5C08\n\u8011\n\u5712\n\u66F8\n\u58F4\n\u7A2E\n\u039F\n\u25CF\n\u8900\n\u865F\n\u9280\n\u532F\n\u655F\n\u9518\n\u8449\n\u6A6A\n\u5EE3\n\u9032\n\u8484\n\u947D\n\u961D\n\u7959\n\u8CA2\n\u934B\n\u8C4A\n\u592C\n\u5586\n\u5718\n\u95A3\n\u958B\n\u71C1\n\u8CD3\n\u9928\n\u9161\n\u6C94\n\u9806\n\uFF0B\n\u785A\n\u52B5\n\u9978\n\u967D\n\u8ECA\n\u6E53\n\u5FA9\n\u840A\n\u6C23\n\u8ED2\n\u83EF\n\u5803\n\u8FEE\n\u7E9F\n\u6236\n\u99AC\n\u5B78\n\u88E1\n\u96FB\n\u5DBD\n\u7368\n\u30DE\n\u30B7\n\u30B5\n\u30B8\n\u71D8\n\u88AA\n\u74B0\n\u2764\n\u81FA\n\u7063\n\u5C02\n\u8CE3\n\u5B56\n\u8056\n\u651D\n\u7DDA\n\u25AA\n\u03B1\n\u50A2\n\u4FEC\n\u5922\n\u9054\n\u838A\n\u55AC\n\u8C9D\n\u85A9\n\u528D\n\u7F85\n\u58D3\n\u68DB\n\u9966\n\u5C03\n\u7488\n\u56CD\n\u91AB\n\uFF27\n\uFF29\n\uFF21\n\uFF03\n\uFF2E\n\u9DC4\n\u9AD9\n\u5B30\n\u5553\n\u7D04\n\u96B9\n\u6F54\n\u8CF4\n\u85DD\n\uFF5E\n\u5BF6\n\u7C63\n\u9EBA\n\u3000\n\u5DBA\n\u221A\n\u7FA9\n\u7DB2\n\u5CE9\n\u9577\n\u2227\n\u9B5A\n\u6A5F\n\u69CB\n\u2461\n\u9CEF\n\u5049\n\uFF2C\n\uFF22\n\u365F\n\u7575\n\u9D3F\n\uFF07\n\u8A69\n\u6E9D\n\u569E\n\u5C4C\n\u85D4\n\u4F67\n\u73A5\n\u862D\n\u7E54\n\uFF11\n\uFF13\n\uFF19\n\uFF10\n\uFF17\n\u9EDE\n\u782D\n\u9D28\n\u92EA\n\u9298\n\u5EF3\n\u5F0D\n\u2027\n\u5275\n\u6E6F\n\u5776\n\u2103\n\u5369\n\u9A9D\n\uFF06\n\u70DC\n\u8358\n\u7576\n\u6F64\n\u625E\n\u4FC2\n\u61F7\n\u78B6\n\u9485\n\u86A8\n\u8BA0\n\u2606\n\u53E2\n\u7232\n\u57D7\n\u6DAB\n\u5857\n\u2192\n\u697D\n\u73FE\n\u9BE8\n\u611B\n\u746A\n\u923A\n\u5FC4\n\u60B6\n\u85E5\n\u98FE\n\u6A13\n\u8996\n\u5B6C\n\u318D\n\u71DA\n\u82EA\n\u5E2B\n\u2460\n\u4E3C\n\u953D\n\u2502\n\u97D3\n\u6A19\n\xE8\n\u5152\n\u958F\n\u530B\n\u5F35\n\u6F22\n\xDC\n\u9AEA\n\u6703\n\u9591\n\u6A94\n\u7FD2\n\u88DD\n\u306E\n\u5CEF\n\u83D8\n\u8F1D\n\u0418\n\u96DE\n\u91E3\n\u5104\n\u6D50\n\uFF2B\n\uFF2F\n\uFF32\n\uFF18\n\uFF28\n\uFF25\n\uFF30\n\uFF34\n\uFF37\n\uFF24\n\uFF33\n\uFF23\n\uFF2D\n\uFF26\n\u59CC\n\u9979\n\xBB\n\u665E\n\u5EF0\n\xE4\n\u5D6F\n\u9DF9\n\u8CA0\n\u98F2\n\u7D72\n\u519A\n\u6957\n\u6FA4\n\u7DAB\n\u5340\n\u274B\n\u2190\n\u8CEA\n\u9751\n\u63DA\n\u2462\n\u6EEC\n\u7D71\n\u7523\n\u5354\n\uFE51\n\u4E78\n\u7550\n\u7D93\n\u904B\n\u969B\n\u6D3A\n\u5CBD\n\u70BA\n\u7CB5\n\u8AFE\n\u5D0B\n\u8C50\n\u7881\n\u0254\n\uFF36\n\uFF12\n\uFF16\n\u9F4B\n\u8AA0\n\u8A02\n\xB4\n\u52D1\n\u96D9\n\u9673\n\u7121\n\xED\n\u6CE9\n\u5A84\n\u590C\n\u5202\n\uFF49\n\uFF43\n\uFF54\n\uFF4F\n\uFF52\n\uFF41\n\u5622\n\u8004\n\u71F4\n\u6683\n\u58FD\n\u5ABD\n\u9748\n\u62BB\n\u9AD4\n\u553B\n\xC9\n\u51AE\n\u7539\n\u93AE\n\u9326\n\u028C\n\u871B\n\u8804\n\u5C13\n\u99D5\n\u6200\n\u98EC\n\u9039\n\u502B\n\u8CB4\n\u6975\n\u042F\n\u0419\n\u5BEC\n\u78DA\n\u5DAA\n\uF92C\n\u8077\n\uFF5C\n\u9593\n\uFF4E\n\uFF44\n\u524E\n\u4F08\n\u8AB2\n\u98DB\n\u6A4B\n\u760A\n\u2116\n\u8B5C\n\u9A93\n\u5717\n\u6ED8\n\u7E23\n\u7CBF\n\u5485\n\u990A\n\u6FE4\n\u5F73\n\xAE\n\uFF05\n\u2161\n\u5570\n\u3D2A\n\u898B\n\u77DE\n\u85AC\n\u7CC1\n\u90A8\n\u9CAE\n\u9854\n\u7F71\n\u0417\n\u9078\n\u8A71\n\u8D0F\n\u6C2A\n\u4FF5\n\u7AF6\n\u7469\n\u7E61\n\u67B1\n\u03B2\n\u7D89\n\xE1\n\u7345\n\u723E\n\u2122\n\u9EB5\n\u620B\n\u6DE9\n\u5FB3\n\u500B\n\u5287\n\u5834\n\u52D9\n\u7C21\n\u5BF5\n\uFF48\n\u5BE6\n\u81A0\n\u8F71\n\u5716\n\u7BC9\n\u5623\n\u6A39\n\u3E03\n\u71DF\n\u8035\n\u5B6B\n\u9943\n\u913A\n\u98EF\n\u9EAF\n\u9060\n\u8F38\n\u576B\n\u5B43\n\u4E5A\n\u9583\n\u93E2\n\u33A1\n\u984C\n\u5EE0\n\u95DC\n\u2191\n\u723A\n\u5C07\n\u8ECD\n\u9023\n\u7BE6\n\u898C\n\u53C3\n\u7BB8\n\uFF0D\n\u7AA0\n\u68FD\n\u5BD5\n\u5900\n\u7230\n\u6B50\n\u5459\n\u95A5\n\u9821\n\u71B1\n\u96CE\n\u579F\n\u88DF\n\u51EC\n\u52C1\n\u5E11\n\u9995\n\u5906\n\u758C\n\u67BC\n\u99AE\n\u8CA8\n\u84A4\n\u6A38\n\u5F67\n\u65F8\n\u975C\n\u9FA2\n\u66A2\n\u3431\n\u9CE5\n\u73FA\n\u93E1\n\u7061\n\u722D\n\u5837\n\u5EDA\n\xD3\n\u9A30\n\u8A3A\n\u2505\n\u8607\n\u8914\n\u51F1\n\u9802\n\u8C55\n\u4E9E\n\u5E25\n\u562C\n\u22A5\n\u4EFA\n\u6856\n\u8907\n\u9963\n\u7D61\n\u7A42\n\u984F\n\u68DF\n\u7D0D\n\u258F\n\u6FDF\n\u89AA\n\u8A2D\n\u8A08\n\u6535\n\u57CC\n\u70FA\n\xF2\n\u9824\n\u71E6\n\u84EE\n\u64BB\n\u7BC0\n\u8B1B\n\u6FF1\n\u6FC3\n\u5A3D\n\u6D33\n\u673F\n\u71C8\n\u9234\n\u8B77\n\u819A\n\u94D4\n\u904E\n\u88DC\n\uFF3A\n\uFF35\n\uFF15\n\uFF14\n\u574B\n\u95FF\n\u459D\n\u9918\n\u7F10\n\u94DE\n\u8CBF\n\u94EA\n\u687C\n\u8D99\n\u934A\n\uFF3B\n\u3402\n\u579A\n\u83D3\n\u63F8\n\u6372\n\u9418\n\u6ECF\n\u{231C9}\n\u720D\n\u8F2A\n\u71DC\n\u9D3B\n\u9BAE\n\u52D5\n\u9E5E\n\u9DD7\n\u4E04\n\u6176\n\u924C\n\u7FE5\n\u98EE\n\u8178\n\u21CB\n\u6F01\n\u89BA\n\u4F86\n\u7198\n\u6634\n\u7FCF\n\u9CB1\n\u5727\n\u9109\n\u842D\n\u9814\n\u7210\n\u5ADA\n\u0433\n\u8CAD\n\u985E\n\u806F\n\u5E5B\n\u8F15\n\u8A13\n\u9452\n\u590B\n\u9528\n\u8283\n\u73E3\n\u4749\n\u6259\n\u5D50\n\u92B7\n\u8655\n\u3131\n\u8A9E\n\u8A98\n\u82DD\n\u6B78\n\u5100\n\u71D2\n\u697F\n\u5167\n\u7CA2\n\u8452\n\u5967\n\u9EA5\n\u793B\n\u6EFF\n\u8814\n\u7A75\n\u77AD\n\u614B\n\u9C6C\n\u699E\n\u7842\n\u912D\n\u9EC3\n\u7159\n\u7950\n\u5953\n\u903A\n\uFF0A\n\u7444\n\u7372\n\u805E\n\u85A6\n\u8B80\n\u9019\n\u6A23\n\u6C7A\n\u554F\n\u555F\n\u5011\n\u57F7\n\u8AAC\n\u8F49\n\u55AE\n\u96A8\n\u5518\n\u5E36\n\u5009\n\u5EAB\n\u9084\n\u8D08\n\u5C19\n\u76BA\n\u25A0\n\u9905\n\u7522\n\u25CB\n\u2208\n\u5831\n\u72C0\n\u6953\n\u8CE0\n\u742F\n\u55EE\n\u79AE\n\uFF40\n\u50B3\n\uFF1E\n\u2264\n\u55DE\n\u03A6\n\u2265\n\u63DB\n\u54AD\n\u2223\n\u2193\n\u66EC\n\u03B5\n\u5FDC\n\u5BEB\n\u2033\n\u7D42\n\u69D8\n\u7D14\n\u8CBB\n\u7642\n\u8068\n\u51CD\n\u58D0\n\u90F5\n\xFC\n\u9ED2\n\u222B\n\u88FD\n\u584A\n\u8ABF\n\u8EFD\n\u78BA\n\u6483\n\u7D1A\n\u99B4\n\u2162\n\u6D87\n\u7E79\n\u6578\n\u78BC\n\u8B49\n\u72D2\n\u51E6\n\u5291\n\uFF1C\n\u6667\n\u8CC0\n\u8846\n\uFF3D\n\u6AE5\n\u5169\n\u9670\n\u7D76\n\u5C0D\n\u9BC9\n\u61B6\n\u25CE\n\uFF50\n\uFF45\n\uFF39\n\u8552\n\u7156\n\u9813\n\u6E2C\n\u8A66\n\u9F3D\n\u50D1\n\u78A9\n\u599D\n\u5E2F\n\u2248\n\u9421\n\u8216\n\u6B0A\n\u55AB\n\u5006\n\u02CB\n\u8A72\n\u6085\n\u0101\n\u4FEB\n\uFF0E\n\uFF46\n\uFF53\n\uFF42\n\uFF4D\n\uFF4B\n\uFF47\n\uFF55\n\uFF4A\n\u8CBC\n\u6DE8\n\u6FD5\n\u91DD\n\u9069\n\u5099\n\uFF4C\n\uFF0F\n\u7D66\n\u8B22\n\u5F37\n\u89F8\n\u885B\n\u8207\n\u2299\n\uFF04\n\u7DEF\n\u8B8A\n\u2474\n\u2475\n\u2476\n\u338F\n\u6BBA\n\u2229\n\u5E5A\n\u2500\n\u50F9\n\u25B2\n\u96E2\n\xFA\n\xF3\n\u98C4\n\u70CF\n\u95A2\n\u959F\n\uFE5D\n\uFE5E\n\u908F\n\u8F2F\n\u9375\n\u9A57\n\u8A23\n\u5C0E\n\u6B77\n\u5C46\n\u5C64\n\u25BC\n\u5131\n\u9304\n\u71B3\n\u0113\n\u8266\n\u540B\n\u9336\n\u8FA7\n\u98FC\n\u986F\n\u2463\n\u79A6\n\u8CA9\n\u6C17\n\u5BFE\n\u67B0\n\u95A9\n\u7D00\n\u5E79\n\u7793\n\u8C8A\n\u6DDA\n\u25B3\n\u771E\n\u588A\n\u03A9\n\u737B\n\u8932\n\u7E2B\n\u7DD1\n\u4E9C\n\u9245\n\u9920\n\uFF5B\n\uFF5D\n\u25C6\n\u8606\n\u8588\n\u2588\n\u25C7\n\u6EAB\n\u5F48\n\u6673\n\u7CA7\n\u72B8\n\u7A69\n\u8A0A\n\u5D2C\n\u51D6\n\u71A5\n\u041F\n\u820A\n\u689D\n\u7D0B\n\u570D\n\u2163\n\u7B46\n\u5C37\n\u96E3\n\u96DC\n\u932F\n\u7D81\n\u8B58\n\u9830\n\u9396\n\u8276\n\u25A1\n\u6B81\n\u6BBC\n\u2467\n\u251C\n\u2595\n\u9D6C\n\u01D0\n\u014D\n\u01D2\n\u7CDD\n\u7DB1\n\u258E\n\u03BC\n\u76DC\n\u9945\n\u91AC\n\u7C64\n\u84CB\n\u91C0\n\u9E7D\n\u64DA\n\xE0\n\u0261\n\u8FA6\n\u25E5\n\u5F50\n\u250C\n\u5A66\n\u7378\n\u9CA9\n\u4F31\n\u012B\n\u849F\n\u84BB\n\u9F4A\n\u8886\n\u8166\n\u5BE7\n\u51C8\n\u59B3\n\u7165\n\u8A62\n\u507D\n\u8B39\n\u556B\n\u9BFD\n\u9A37\n\u9C78\n\u640D\n\u50B7\n\u93BB\n\u9AEE\n\u8CB7\n\u518F\n\u5125\n\u4E21\n\uFE62\n\u221E\n\u8F09\n\u55B0\n\uFF5A\n\u7F99\n\u60B5\n\u71D9\n\u66C9\n\u54E1\n\u7D44\n\u5FB9\n\u8277\n\u75E0\n\u92FC\n\u9F19\n\u7E2E\n\u7D30\n\u5692\n\u722F\n\u2260\n\u7DAD\n\uFF02\n\u9C7B\n\u58C7\n\u538D\n\u5E30\n\u6D65\n\u7287\n\u85A1\n\u8ECE\n\xB2\n\u61C9\n\u919C\n\u522A\n\u7DFB\n\u9DB4\n\u8CDC\n\u5641\n\u8ECC\n\u5C28\n\u9554\n\u9DFA\n\u69D7\n\u5F4C\n\u845A\n\u6FDB\n\u8ACB\n\u6E87\n\u7DF9\n\u8CE2\n\u8A2A\n\u7374\n\u7445\n\u8CC7\n\u7E24\n\u9663\n\u855F\n\u6822\n\u97FB\n\u797C\n\u6041\n\u4F22\n\u8B1D\n\u5283\n\u6D91\n\u7E3D\n\u8856\n\u8E3A\n\u780B\n\uF979\n\u7C43\n\u99FF\n\u82FC\n\u760B\n\u663D\n\u7D21\n\u9A4A\n\u814E\n\uFE57\n\u97FF\n\u674B\n\u525B\n\u56B4\n\u79AA\n\u6B53\n\u69CD\n\u5098\n\u6AB8\n\u6AAB\n\u70A3\n\u52E2\n\u93DC\n\u93A2\n\u9291\n\u5C10\n\u6E1B\n\u596A\n\u60E1\n\u03B8\n\u50EE\n\u5A6D\n\u81D8\n\u016B\n\xEC\n\u6BBB\n\u9244\n\u2211\n\u86F2\n\u713C\n\u7DD6\n\u7E8C\n\u7D39\n\u61EE\n";
var recPostprocess = /* @__PURE__ */ function() {
  function recPostprocess2(preds) {
    _classCallCheck(this, recPostprocess2);
    _defineProperty(this, "ocr_character", void 0);
    _defineProperty(this, "preds_idx", void 0);
    _defineProperty(this, "preds_prob", void 0);
    this.ocr_character = character.toString().split("\n");
    var preds_idx = [];
    var preds_prob = [];
    var pred_len = 6625;
    for (var i = 0; i < preds.length; i += pred_len) {
      var tmpArr = preds.slice(i, i + pred_len - 1);
      var tmpMax = Math.max.apply(Math, _toConsumableArray(tmpArr));
      var tmpIdx = tmpArr.indexOf(tmpMax);
      preds_prob.push(tmpMax);
      preds_idx.push(tmpIdx);
    }
    this.preds_idx = preds_idx;
    this.preds_prob = preds_prob;
  }
  _createClass(recPostprocess2, [{
    key: "decode",
    value: function decode(text_index, text_prob) {
      var is_remove_duplicate = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;
      var ignored_tokens = this.get_ignored_tokens();
      var char_list = [];
      var conf_list = [];
      for (var idx = 0; idx < text_index.length; idx++) {
        if (text_index[idx] in ignored_tokens) {
          continue;
        }
        if (is_remove_duplicate) {
          if (idx > 0 && text_index[idx - 1] === text_index[idx]) {
            continue;
          }
        }
        char_list.push(this.ocr_character[text_index[idx] - 1]);
        if (text_prob) {
          conf_list.push(text_prob[idx]);
        } else {
          conf_list.push(1);
        }
      }
      var text = "";
      var mean = 0;
      if (char_list.length) {
        text = char_list.join("");
        var sum = 0;
        conf_list.forEach(function(item) {
          sum += item;
        });
        mean = sum / conf_list.length;
      }
      return {
        text,
        mean
      };
    }
  }, {
    key: "get_ignored_tokens",
    value: function get_ignored_tokens() {
      return [0];
    }
  }, {
    key: "outputResult",
    value: function outputResult() {
      return this.decode(this.preds_idx, this.preds_prob, true);
    }
  }]);
  return recPostprocess2;
}();
var defaultPostConfig = {
  shape: 960,
  thresh: 0.3,
  box_thresh: 0.6,
  unclip_ratio: 1.5
};
var DEFAULTDETSHAPE = 960;
var RECWIDTH = 320;
var RECHEIGHT = 48;
var canvas_det = document.createElement("canvas");
var canvas_rec = document.createElement("canvas");
var detectRunner = null;
var recRunner = null;
initCanvas(canvas_det);
initCanvas(canvas_rec);
function initCanvas(canvas) {
  canvas.style.position = "fixed";
  canvas.style.bottom = "0";
  canvas.style.zIndex = "-1";
  canvas.style.opacity = "0";
  document.body.appendChild(canvas);
}
function init() {
  return _init.apply(this, arguments);
}
function _init() {
  _init = _asyncToGenerator(/* @__PURE__ */ _regeneratorRuntime().mark(function _callee() {
    var detCustomModel, recCustomModel, detModelPath, recModelPath, detectInit, recInit, _args = arguments;
    return _regeneratorRuntime().wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            detCustomModel = _args.length > 0 && _args[0] !== void 0 ? _args[0] : "";
            recCustomModel = _args.length > 1 && _args[1] !== void 0 ? _args[1] : "";
            detModelPath = "https://js-models.bj.bcebos.com/PaddleOCR/PP-OCRv3/ch_PP-OCRv3_det_infer_js_960/model.json";
            recModelPath = "https://js-models.bj.bcebos.com/PaddleOCR/PP-OCRv3/ch_PP-OCRv3_rec_infer_js/model.json";
            paddlejsCore.env.set("webgl_pack_output", true);
            detectRunner = new paddlejsCore.Runner({
              modelPath: detCustomModel ? detCustomModel : detModelPath,
              fill: "#fff",
              mean: [0.485, 0.456, 0.406],
              std: [0.229, 0.224, 0.225],
              bgr: true,
              webglFeedProcess: true
            });
            detectInit = detectRunner.init();
            recRunner = new paddlejsCore.Runner({
              modelPath: recCustomModel ? recCustomModel : recModelPath,
              fill: "#000",
              mean: [0.5, 0.5, 0.5],
              std: [0.5, 0.5, 0.5],
              bgr: true,
              webglFeedProcess: true
            });
            recInit = recRunner.init();
            _context.next = 11;
            return Promise.all([detectInit, recInit]);
          case 11:
            if (detectRunner.feedShape) {
              DEFAULTDETSHAPE = detectRunner.feedShape.fw;
            }
            if (recRunner.feedShape) {
              RECWIDTH = recRunner.feedShape.fw;
              RECHEIGHT = recRunner.feedShape.fh;
            }
          case 13:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _init.apply(this, arguments);
}
function detect(_x) {
  return _detect.apply(this, arguments);
}
function _detect() {
  _detect = _asyncToGenerator(/* @__PURE__ */ _regeneratorRuntime().mark(function _callee2(image) {
    var Config, DETSHAPE, thresh, box_thresh, unclip_ratio, targetWidth, targetHeight, ctx, sw, sh, x, y, shapeList, outsDict, postResult, result, points, adjust, _args2 = arguments;
    return _regeneratorRuntime().wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            Config = _args2.length > 1 && _args2[1] !== void 0 ? _args2[1] : defaultPostConfig;
            DETSHAPE = Config.shape ? Config.shape : DEFAULTDETSHAPE;
            thresh = Config.thresh;
            box_thresh = Config.box_thresh;
            unclip_ratio = Config.unclip_ratio;
            targetWidth = DETSHAPE;
            targetHeight = DETSHAPE;
            canvas_det.width = targetWidth;
            canvas_det.height = targetHeight;
            ctx = canvas_det.getContext("2d");
            ctx.fillStyle = "#fff";
            ctx.fillRect(0, 0, targetHeight, targetWidth);
            sw = targetWidth;
            sh = targetHeight;
            x = 0;
            y = 0;
            if (targetWidth / targetHeight * image.naturalHeight / image.naturalWidth >= 1) {
              sw = Math.round(sh * image.naturalWidth / image.naturalHeight);
              x = Math.floor((targetWidth - sw) / 2);
            } else {
              sh = Math.round(sw * image.naturalHeight / image.naturalWidth);
              y = Math.floor((targetHeight - sh) / 2);
            }
            ctx.drawImage(image, x, y, sw, sh);
            shapeList = [DETSHAPE, DETSHAPE];
            _context2.next = 21;
            return detectRunner.predict(canvas_det);
          case 21:
            outsDict = _context2.sent;
            postResult = new DBPostprocess(outsDict, shapeList, thresh, box_thresh, unclip_ratio);
            result = postResult.outputBox();
            points = JSON.parse(JSON.stringify(result.boxes));
            adjust = 8;
            points && points.forEach(function(item) {
              item.forEach(function(point, index) {
                point[0] = clip(Math.round(point[0] - x) * Math.max(image.naturalWidth, image.naturalHeight) / DETSHAPE + (index === 0 ? -adjust : index === 1 ? adjust : index === 2 ? adjust : -adjust), 0, image.naturalWidth);
                point[1] = clip(Math.round(point[1] - y) * Math.max(image.naturalWidth, image.naturalHeight) / DETSHAPE + (index === 0 ? -adjust : index === 1 ? -adjust : index === 2 ? adjust : adjust), 0, image.naturalHeight);
              });
            });
            return _context2.abrupt("return", points);
          case 28:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));
  return _detect.apply(this, arguments);
}
function drawBox(points, image, canvas, style) {
  canvas.width = image.naturalWidth;
  canvas.height = image.naturalHeight;
  var ctx = canvas.getContext("2d");
  ctx.drawImage(image, 0, 0, canvas.width, canvas.height);
  points && points.forEach(function(point) {
    ctx.beginPath();
    ctx.strokeStyle = (style === null || style === void 0 ? void 0 : style.strokeStyle) || "#000";
    ctx.lineWidth = (style === null || style === void 0 ? void 0 : style.lineWidth) || 1;
    ctx.fillStyle = (style === null || style === void 0 ? void 0 : style.fillStyle) || "transparent";
    ctx.moveTo(point[0][0], point[0][1]);
    ctx.lineTo(point[1][0], point[1][1]);
    ctx.lineTo(point[2][0], point[2][1]);
    ctx.lineTo(point[3][0], point[3][1]);
    ctx.fill();
    ctx.closePath();
    ctx.stroke();
    ctx.restore();
  });
}
function recognize(_x2, _x3) {
  return _recognize.apply(this, arguments);
}
function _recognize() {
  _recognize = _asyncToGenerator(/* @__PURE__ */ _regeneratorRuntime().mark(function _callee3(image, options) {
    var detConfig, point, boxes, text_list, i, tmp_box, ratio, width_num, text_list_tmp, _i, output, recResult, text, _output, _recResult, _text, _args3 = arguments;
    return _regeneratorRuntime().wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            detConfig = _args3.length > 2 && _args3[2] !== void 0 ? _args3[2] : defaultPostConfig;
            _context3.next = 3;
            return detect(image, detConfig);
          case 3:
            point = _context3.sent;
            if (options !== null && options !== void 0 && options.canvas) {
              drawBox(point, image, options.canvas, options.style);
            }
            boxes = sorted_boxes(point);
            text_list = [];
            i = 0;
          case 8:
            if (!(i < boxes.length)) {
              _context3.next = 39;
              break;
            }
            tmp_box = JSON.parse(JSON.stringify(boxes[i]));
            get_rotate_crop_image(image, tmp_box);
            ratio = 3;
            width_num = Math.ceil(canvas_det.width / RECWIDTH / ratio);
            text_list_tmp = "";
            if (!(width_num > 1)) {
              _context3.next = 29;
              break;
            }
            _i = 0;
          case 16:
            if (!(_i < width_num)) {
              _context3.next = 27;
              break;
            }
            resize_norm_img_splice(canvas_det, canvas_det.width, canvas_det.height, _i, ratio);
            _context3.next = 20;
            return recRunner.predict(canvas_rec);
          case 20:
            output = _context3.sent;
            recResult = new recPostprocess(output);
            text = recResult.outputResult();
            text_list_tmp = text_list_tmp.concat(text.text);
          case 24:
            _i++;
            _context3.next = 16;
            break;
          case 27:
            _context3.next = 35;
            break;
          case 29:
            _context3.next = 31;
            return recRunner.predict(canvas_det);
          case 31:
            _output = _context3.sent;
            _recResult = new recPostprocess(_output);
            _text = _recResult.outputResult();
            text_list_tmp = text_list_tmp.concat(_text.text);
          case 35:
            text_list.push(text_list_tmp);
          case 36:
            i++;
            _context3.next = 8;
            break;
          case 39:
            return _context3.abrupt("return", {
              text: text_list,
              points: point
            });
          case 40:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3);
  }));
  return _recognize.apply(this, arguments);
}
function sorted_boxes(box) {
  function sortNumber(a, b) {
    return a[0][1] - b[0][1];
  }
  var boxes = box.sort(sortNumber);
  var num_boxes = boxes.length;
  for (var i = 0; i < num_boxes - 1; i++) {
    if (Math.abs(boxes[i + 1][0][1] - boxes[i][0][1]) < 10 && boxes[i + 1][0][0] < boxes[i][0][0]) {
      var tmp = boxes[i];
      boxes[i] = boxes[i + 1];
      boxes[i + 1] = tmp;
    }
  }
  return boxes;
}
function get_rotate_crop_image(img, points) {
  var img_crop_width = _int(Math.max(linalg_norm(points[0], points[1]), linalg_norm(points[2], points[3])));
  var img_crop_height = _int(Math.max(linalg_norm(points[0], points[3]), linalg_norm(points[1], points[2])));
  var pts_std = [[0, 0], [img_crop_width, 0], [img_crop_width, img_crop_height], [0, img_crop_height]];
  var srcTri = opencv_ocr.matFromArray(4, 1, opencv_ocr.CV_32FC2, flatten(points));
  var dstTri = opencv_ocr.matFromArray(4, 1, opencv_ocr.CV_32FC2, flatten(pts_std));
  var M = opencv_ocr.getPerspectiveTransform(srcTri, dstTri);
  var src = opencv_ocr.imread(img);
  var dst = new opencv_ocr.Mat();
  var dsize = new opencv_ocr.Size(img_crop_width, img_crop_height);
  opencv_ocr.warpPerspective(src, dst, M, dsize, opencv_ocr.INTER_CUBIC, opencv_ocr.BORDER_REPLICATE, new opencv_ocr.Scalar());
  var dst_img_height = dst.matSize[0];
  var dst_img_width = dst.matSize[1];
  var dst_rot;
  if (dst_img_height / dst_img_width >= 1.5) {
    dst_rot = new opencv_ocr.Mat();
    var dsize_rot = new opencv_ocr.Size(dst.rows, dst.cols);
    var center = new opencv_ocr.Point(dst.cols / 2, dst.cols / 2);
    var _M = opencv_ocr.getRotationMatrix2D(center, 90, 1);
    opencv_ocr.warpAffine(dst, dst_rot, _M, dsize_rot, opencv_ocr.INTER_CUBIC, opencv_ocr.BORDER_REPLICATE, new opencv_ocr.Scalar());
  }
  var dst_resize = new opencv_ocr.Mat();
  var dsize_resize = new opencv_ocr.Size(0, 0);
  var scale;
  if (dst_rot) {
    scale = RECHEIGHT / dst_rot.matSize[0];
    opencv_ocr.resize(dst_rot, dst_resize, dsize_resize, scale, scale, opencv_ocr.INTER_AREA);
    dst_rot["delete"]();
  } else {
    scale = RECHEIGHT / dst_img_height;
    opencv_ocr.resize(dst, dst_resize, dsize_resize, scale, scale, opencv_ocr.INTER_AREA);
  }
  canvas_det.width = dst_resize.matSize[1];
  canvas_det.height = dst_resize.matSize[0];
  opencv_ocr.imshow(canvas_det, dst_resize);
  src["delete"]();
  dst["delete"]();
  dst_resize["delete"]();
  srcTri["delete"]();
  dstTri["delete"]();
}
function linalg_norm(x, y) {
  return Math.sqrt(Math.pow(x[0] - y[0], 2) + Math.pow(x[1] - y[1], 2));
}
function resize_norm_img_splice(image, origin_width, origin_height) {
  var index = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : 0;
  var ratio = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : 3;
  canvas_rec.width = RECWIDTH;
  canvas_rec.height = RECHEIGHT;
  var ctx = canvas_rec.getContext("2d");
  ctx.fillStyle = "#fff";
  ctx.clearRect(0, 0, canvas_rec.width, canvas_rec.height);
  ctx.drawImage(image, -index * RECWIDTH * ratio, 0, origin_width, origin_height);
}
exports.init = init;
exports.recognize = recognize;
